
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc3c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800bdd4  0800bdd4  0001bdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be3c  0800be3c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800be3c  0800be3c  0001be3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be44  0800be44  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be44  0800be44  0001be44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be48  0800be48  0001be48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800be4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002264  20000180  0800bfcc  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023e4  0800bfcc  000223e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002691b  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ce6  00000000  00000000  00046acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  0004b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e8  00000000  00000000  0004d370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc86  00000000  00000000  0004ed58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d23  00000000  00000000  0006c9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a064f  00000000  00000000  00090701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130d50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007448  00000000  00000000  00130da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bdbc 	.word	0x0800bdbc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	0800bdbc 	.word	0x0800bdbc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <OperateLED_A>:
#include "BSP.h"
#include "main.h"


void OperateLED_A (LEDState_t eState)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	if(eState == eLED_On)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d105      	bne.n	80004ec <OperateLED_A+0x1c>
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2101      	movs	r1, #1
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <OperateLED_A+0x34>)
 80004e6:	f000 fee5 	bl	80012b4 <HAL_GPIO_WritePin>
	}
	else if(eState == eLED_Off)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
	}
}
 80004ea:	e007      	b.n	80004fc <OperateLED_A+0x2c>
	else if(eState == eLED_Off)
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d104      	bne.n	80004fc <OperateLED_A+0x2c>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2101      	movs	r1, #1
 80004f6:	4803      	ldr	r0, [pc, #12]	; (8000504 <OperateLED_A+0x34>)
 80004f8:	f000 fedc 	bl	80012b4 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40020800 	.word	0x40020800

08000508 <ToggleLED_B>:
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}

void ToggleLED_B()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800050c:	2102      	movs	r1, #2
 800050e:	4802      	ldr	r0, [pc, #8]	; (8000518 <ToggleLED_B+0x10>)
 8000510:	f000 fee9 	bl	80012e6 <HAL_GPIO_TogglePin>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40020800 	.word	0x40020800

0800051c <OperateSensorPower_A>:

void OperateSensorPower_A (SensorState_t eState)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d106      	bne.n	800053a <OperateSensorPower_A+0x1e>
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <OperateSensorPower_A+0x38>)
 8000534:	f000 febe 	bl	80012b4 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
	}
}
 8000538:	e008      	b.n	800054c <OperateSensorPower_A+0x30>
	else if(eState == eSensor_Off)
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d105      	bne.n	800054c <OperateSensorPower_A+0x30>
		HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	4803      	ldr	r0, [pc, #12]	; (8000554 <OperateSensorPower_A+0x38>)
 8000548:	f000 feb4 	bl	80012b4 <HAL_GPIO_WritePin>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40020800 	.word	0x40020800

08000558 <OperateSensorPower_B>:
void OperateSensorPower_B (SensorState_t eState)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	if(eState == eSensor_On)
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d106      	bne.n	8000576 <OperateSensorPower_B+0x1e>
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <OperateSensorPower_B+0x38>)
 8000570:	f000 fea0 	bl	80012b4 <HAL_GPIO_WritePin>
	}
	else if(eState == eSensor_Off)
	{
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
	}
}
 8000574:	e008      	b.n	8000588 <OperateSensorPower_B+0x30>
	else if(eState == eSensor_Off)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d105      	bne.n	8000588 <OperateSensorPower_B+0x30>
		HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	4803      	ldr	r0, [pc, #12]	; (8000590 <OperateSensorPower_B+0x38>)
 8000584:	f000 fe96 	bl	80012b4 <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020800 	.word	0x40020800

08000594 <TurnAllSensorOn>:

void TurnAllSensorOn()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	OperateSensorPower_A(eSensor_On);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ffbf 	bl	800051c <OperateSensorPower_A>
	OperateSensorPower_B(eSensor_On);
 800059e:	2000      	movs	r0, #0
 80005a0:	f7ff ffda 	bl	8000558 <OperateSensorPower_B>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <MCP9808_Read>:

#include "TemperatureSensor_MCP9808.h"
#include "MCP9808_ArrayData.h"

void MCP9808_Read(MCP9808_Sensor_t *kSensor)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_IT(kSensor->hTranscieverHandle, kSensor->u8Address, MCP9808_AddressAmbientTemperature, 1, kSensor->u16RawMeasurement, 2);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6858      	ldr	r0, [r3, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	785b      	ldrb	r3, [r3, #1]
 80005b8:	b299      	uxth	r1, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3308      	adds	r3, #8
 80005be:	2202      	movs	r2, #2
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	2205      	movs	r2, #5
 80005c8:	f000 ffec 	bl	80015a4 <HAL_I2C_Mem_Read_IT>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <MCP9808_DecodeTemperature>:

float MCP9808_DecodeTemperature(MCP9808_Sensor_t *kSensor)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	uint16_t u16FixedPointReadingLow = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	81fb      	strh	r3, [r7, #14]
	uint16_t u16FixedPointReadingHigh = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	81bb      	strh	r3, [r7, #12]
	uint16_t u16FixedPointReading = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	817b      	strh	r3, [r7, #10]

	u16FixedPointReadingLow = (kSensor->u16RawMeasurement[0]) << 8;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7a1b      	ldrb	r3, [r3, #8]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	021b      	lsls	r3, r3, #8
 80005f0:	81fb      	strh	r3, [r7, #14]
	u16FixedPointReadingHigh = (kSensor->u16RawMeasurement[1]) >> 8;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7a5b      	ldrb	r3, [r3, #9]
 80005f6:	121b      	asrs	r3, r3, #8
 80005f8:	81bb      	strh	r3, [r7, #12]
	u16FixedPointReading = u16FixedPointReadingLow + u16FixedPointReadingHigh;
 80005fa:	89fa      	ldrh	r2, [r7, #14]
 80005fc:	89bb      	ldrh	r3, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	817b      	strh	r3, [r7, #10]

	return (float)(u16FixedPointReading) / 16;
 8000602:	897b      	ldrh	r3, [r7, #10]
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800060c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000610:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000614:	eef0 7a66 	vmov.f32	s15, s13
}
 8000618:	eeb0 0a67 	vmov.f32	s0, s15
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <HAL_Init+0x40>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <HAL_Init+0x40>)
 8000632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000636:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <HAL_Init+0x40>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <HAL_Init+0x40>)
 800063e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000642:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <HAL_Init+0x40>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_Init+0x40>)
 800064a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800064e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000650:	2003      	movs	r0, #3
 8000652:	f000 f94f 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f808 	bl	800066c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800065c:	f00a fbce 	bl	800adfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023c00 	.word	0x40023c00

0800066c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_InitTick+0x54>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_InitTick+0x58>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000682:	fbb3 f3f1 	udiv	r3, r3, r1
 8000686:	fbb2 f3f3 	udiv	r3, r2, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f967 	bl	800095e <HAL_SYSTICK_Config>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	e00e      	b.n	80006b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b0f      	cmp	r3, #15
 800069e:	d80a      	bhi.n	80006b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a0:	2200      	movs	r2, #0
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295
 80006a8:	f000 f92f 	bl	800090a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <HAL_InitTick+0x5c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006b2:	2300      	movs	r3, #0
 80006b4:	e000      	b.n	80006b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000118 	.word	0x20000118
 80006c4:	20000004 	.word	0x20000004
 80006c8:	20000000 	.word	0x20000000

080006cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_IncTick+0x20>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_IncTick+0x24>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_IncTick+0x24>)
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000004 	.word	0x20000004
 80006f0:	200008d0 	.word	0x200008d0

080006f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return uwTick;
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <HAL_GetTick+0x14>)
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200008d0 	.word	0x200008d0

0800070c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000714:	f7ff ffee 	bl	80006f4 <HAL_GetTick>
 8000718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d005      	beq.n	8000732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_Delay+0x44>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000732:	bf00      	nop
 8000734:	f7ff ffde 	bl	80006f4 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	429a      	cmp	r2, r3
 8000742:	d8f7      	bhi.n	8000734 <HAL_Delay+0x28>
  {
  }
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000004 	.word	0x20000004

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db0b      	blt.n	80007e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4907      	ldr	r1, [pc, #28]	; (80007f0 <__NVIC_EnableIRQ+0x38>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000e100 	.word	0xe000e100

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	; (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	; (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f1c3 0307 	rsb	r3, r3, #7
 8000862:	2b04      	cmp	r3, #4
 8000864:	bf28      	it	cs
 8000866:	2304      	movcs	r3, #4
 8000868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	2b06      	cmp	r3, #6
 8000870:	d902      	bls.n	8000878 <NVIC_EncodePriority+0x30>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3b03      	subs	r3, #3
 8000876:	e000      	b.n	800087a <NVIC_EncodePriority+0x32>
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	f04f 32ff 	mov.w	r2, #4294967295
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43da      	mvns	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000890:	f04f 31ff 	mov.w	r1, #4294967295
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43d9      	mvns	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	4313      	orrs	r3, r2
         );
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3724      	adds	r7, #36	; 0x24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f7ff ff8e 	bl	80007f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff29 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff3e 	bl	800079c <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ff8e 	bl	8000848 <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff5d 	bl	80007f4 <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff31 	bl	80007b8 <__NVIC_EnableIRQ>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ffa2 	bl	80008b0 <SysTick_Config>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000984:	f7ff feb6 	bl	80006f4 <HAL_GetTick>
 8000988:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	e099      	b.n	8000ac8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2202      	movs	r2, #2
 8000998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f022 0201 	bic.w	r2, r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80009b4:	e00f      	b.n	80009d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80009b6:	f7ff fe9d 	bl	80006f4 <HAL_GetTick>
 80009ba:	4602      	mov	r2, r0
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	2b05      	cmp	r3, #5
 80009c2:	d908      	bls.n	80009d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2220      	movs	r2, #32
 80009c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2203      	movs	r2, #3
 80009ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80009d2:	2303      	movs	r3, #3
 80009d4:	e078      	b.n	8000ac8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1e8      	bne.n	80009b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <HAL_DMA_Init+0x158>)
 80009f0:	4013      	ands	r3, r2
 80009f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6a1b      	ldr	r3, [r3, #32]
 8000a20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2c:	2b04      	cmp	r3, #4
 8000a2e:	d107      	bne.n	8000a40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	f023 0307 	bic.w	r3, r3, #7
 8000a56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d117      	bne.n	8000a9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00e      	beq.n	8000a9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f000 fa19 	bl	8000eb4 <DMA_CheckFifoParam>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d008      	beq.n	8000a9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2240      	movs	r2, #64	; 0x40
 8000a8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2201      	movs	r2, #1
 8000a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000a96:	2301      	movs	r3, #1
 8000a98:	e016      	b.n	8000ac8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f000 f9d0 	bl	8000e48 <DMA_CalcBaseAndBitshift>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab0:	223f      	movs	r2, #63	; 0x3f
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	f010803f 	.word	0xf010803f

08000ad4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d004      	beq.n	8000af2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00c      	b.n	8000b0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2205      	movs	r2, #5
 8000af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 0201 	bic.w	r2, r2, #1
 8000b08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b24:	4b92      	ldr	r3, [pc, #584]	; (8000d70 <HAL_DMA_IRQHandler+0x258>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a92      	ldr	r2, [pc, #584]	; (8000d74 <HAL_DMA_IRQHandler+0x25c>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	0a9b      	lsrs	r3, r3, #10
 8000b30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b42:	2208      	movs	r2, #8
 8000b44:	409a      	lsls	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d01a      	beq.n	8000b84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d013      	beq.n	8000b84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f022 0204 	bic.w	r2, r2, #4
 8000b6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b70:	2208      	movs	r2, #8
 8000b72:	409a      	lsls	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b7c:	f043 0201 	orr.w	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b88:	2201      	movs	r2, #1
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d012      	beq.n	8000bba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00b      	beq.n	8000bba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	409a      	lsls	r2, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bb2:	f043 0202 	orr.w	r2, r3, #2
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	409a      	lsls	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d012      	beq.n	8000bf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d00b      	beq.n	8000bf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bdc:	2204      	movs	r2, #4
 8000bde:	409a      	lsls	r2, r3
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000be8:	f043 0204 	orr.w	r2, r3, #4
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d043      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d03c      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c12:	2210      	movs	r2, #16
 8000c14:	409a      	lsls	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d018      	beq.n	8000c5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d108      	bne.n	8000c48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d024      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	4798      	blx	r3
 8000c46:	e01f      	b.n	8000c88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d01b      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	4798      	blx	r3
 8000c58:	e016      	b.n	8000c88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d107      	bne.n	8000c78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f022 0208 	bic.w	r2, r2, #8
 8000c76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4013      	ands	r3, r2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f000 808e 	beq.w	8000db6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0310 	and.w	r3, r3, #16
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 8086 	beq.w	8000db6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cae:	2220      	movs	r2, #32
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b05      	cmp	r3, #5
 8000cc0:	d136      	bne.n	8000d30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 0216 	bic.w	r2, r2, #22
 8000cd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	695a      	ldr	r2, [r3, #20]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ce0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d103      	bne.n	8000cf2 <HAL_DMA_IRQHandler+0x1da>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d007      	beq.n	8000d02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 0208 	bic.w	r2, r2, #8
 8000d00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d06:	223f      	movs	r2, #63	; 0x3f
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d07d      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	4798      	blx	r3
        }
        return;
 8000d2e:	e078      	b.n	8000e22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d01c      	beq.n	8000d78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d108      	bne.n	8000d5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d030      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	4798      	blx	r3
 8000d5c:	e02b      	b.n	8000db6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d027      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	4798      	blx	r3
 8000d6e:	e022      	b.n	8000db6 <HAL_DMA_IRQHandler+0x29e>
 8000d70:	20000118 	.word	0x20000118
 8000d74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10f      	bne.n	8000da6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0210 	bic.w	r2, r2, #16
 8000d94:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d032      	beq.n	8000e24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d022      	beq.n	8000e10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2205      	movs	r2, #5
 8000dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0201 	bic.w	r2, r2, #1
 8000de0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d307      	bcc.n	8000dfe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1f2      	bne.n	8000de2 <HAL_DMA_IRQHandler+0x2ca>
 8000dfc:	e000      	b.n	8000e00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000dfe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2201      	movs	r2, #1
 8000e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d005      	beq.n	8000e24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	4798      	blx	r3
 8000e20:	e000      	b.n	8000e24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000e22:	bf00      	nop
    }
  }
}
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop

08000e2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e3a:	b2db      	uxtb	r3, r3
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	3b10      	subs	r3, #16
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <DMA_CalcBaseAndBitshift+0x64>)
 8000e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e62:	4a13      	ldr	r2, [pc, #76]	; (8000eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d909      	bls.n	8000e8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e7e:	f023 0303 	bic.w	r3, r3, #3
 8000e82:	1d1a      	adds	r2, r3, #4
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	659a      	str	r2, [r3, #88]	; 0x58
 8000e88:	e007      	b.n	8000e9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e92:	f023 0303 	bic.w	r3, r3, #3
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	aaaaaaab 	.word	0xaaaaaaab
 8000eb0:	0800be1c 	.word	0x0800be1c

08000eb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d11f      	bne.n	8000f0e <DMA_CheckFifoParam+0x5a>
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d856      	bhi.n	8000f82 <DMA_CheckFifoParam+0xce>
 8000ed4:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <DMA_CheckFifoParam+0x28>)
 8000ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eda:	bf00      	nop
 8000edc:	08000eed 	.word	0x08000eed
 8000ee0:	08000eff 	.word	0x08000eff
 8000ee4:	08000eed 	.word	0x08000eed
 8000ee8:	08000f83 	.word	0x08000f83
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d046      	beq.n	8000f86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000efc:	e043      	b.n	8000f86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f06:	d140      	bne.n	8000f8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f0c:	e03d      	b.n	8000f8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f16:	d121      	bne.n	8000f5c <DMA_CheckFifoParam+0xa8>
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d837      	bhi.n	8000f8e <DMA_CheckFifoParam+0xda>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <DMA_CheckFifoParam+0x70>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	08000f35 	.word	0x08000f35
 8000f28:	08000f3b 	.word	0x08000f3b
 8000f2c:	08000f35 	.word	0x08000f35
 8000f30:	08000f4d 	.word	0x08000f4d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
      break;
 8000f38:	e030      	b.n	8000f9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d025      	beq.n	8000f92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f4a:	e022      	b.n	8000f92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f54:	d11f      	bne.n	8000f96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f5a:	e01c      	b.n	8000f96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d903      	bls.n	8000f6a <DMA_CheckFifoParam+0xb6>
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d003      	beq.n	8000f70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f68:	e018      	b.n	8000f9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8000f6e:	e015      	b.n	8000f9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00e      	beq.n	8000f9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8000f80:	e00b      	b.n	8000f9a <DMA_CheckFifoParam+0xe6>
      break;
 8000f82:	bf00      	nop
 8000f84:	e00a      	b.n	8000f9c <DMA_CheckFifoParam+0xe8>
      break;
 8000f86:	bf00      	nop
 8000f88:	e008      	b.n	8000f9c <DMA_CheckFifoParam+0xe8>
      break;
 8000f8a:	bf00      	nop
 8000f8c:	e006      	b.n	8000f9c <DMA_CheckFifoParam+0xe8>
      break;
 8000f8e:	bf00      	nop
 8000f90:	e004      	b.n	8000f9c <DMA_CheckFifoParam+0xe8>
      break;
 8000f92:	bf00      	nop
 8000f94:	e002      	b.n	8000f9c <DMA_CheckFifoParam+0xe8>
      break;   
 8000f96:	bf00      	nop
 8000f98:	e000      	b.n	8000f9c <DMA_CheckFifoParam+0xe8>
      break;
 8000f9a:	bf00      	nop
    }
  } 
  
  return status; 
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	e159      	b.n	800127c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 8148 	bne.w	8001276 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d005      	beq.n	8000ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d130      	bne.n	8001060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	f003 0201 	and.w	r2, r3, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b03      	cmp	r3, #3
 800106a:	d017      	beq.n	800109c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d123      	bne.n	80010f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	69b9      	ldr	r1, [r7, #24]
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0203 	and.w	r2, r3, #3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80a2 	beq.w	8001276 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b57      	ldr	r3, [pc, #348]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a56      	ldr	r2, [pc, #344]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b54      	ldr	r3, [pc, #336]	; (8001294 <HAL_GPIO_Init+0x2e8>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114e:	4a52      	ldr	r2, [pc, #328]	; (8001298 <HAL_GPIO_Init+0x2ec>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a49      	ldr	r2, [pc, #292]	; (800129c <HAL_GPIO_Init+0x2f0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0x202>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a48      	ldr	r2, [pc, #288]	; (80012a0 <HAL_GPIO_Init+0x2f4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x1fe>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a47      	ldr	r2, [pc, #284]	; (80012a4 <HAL_GPIO_Init+0x2f8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x1fa>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a46      	ldr	r2, [pc, #280]	; (80012a8 <HAL_GPIO_Init+0x2fc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x1f6>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a45      	ldr	r2, [pc, #276]	; (80012ac <HAL_GPIO_Init+0x300>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x1f2>
 800119a:	2304      	movs	r3, #4
 800119c:	e008      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 800119e:	2307      	movs	r3, #7
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e004      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x204>
 80011ae:	2300      	movs	r3, #0
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	f002 0203 	and.w	r2, r2, #3
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4093      	lsls	r3, r2
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c0:	4935      	ldr	r1, [pc, #212]	; (8001298 <HAL_GPIO_Init+0x2ec>)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <HAL_GPIO_Init+0x304>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f2:	4a2f      	ldr	r2, [pc, #188]	; (80012b0 <HAL_GPIO_Init+0x304>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <HAL_GPIO_Init+0x304>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121c:	4a24      	ldr	r2, [pc, #144]	; (80012b0 <HAL_GPIO_Init+0x304>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001222:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001246:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_GPIO_Init+0x304>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001270:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <HAL_GPIO_Init+0x304>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3301      	adds	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b0f      	cmp	r3, #15
 8001280:	f67f aea2 	bls.w	8000fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40013800 	.word	0x40013800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020c00 	.word	0x40020c00
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40013c00 	.word	0x40013c00

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d0:	e003      	b.n	80012da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f8:	887a      	ldrh	r2, [r7, #2]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	041a      	lsls	r2, r3, #16
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43d9      	mvns	r1, r3
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	400b      	ands	r3, r1
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e12b      	b.n	8001586 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d106      	bne.n	8001348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f009 fd82 	bl	800ae4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2224      	movs	r2, #36	; 0x24
 800134c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800136e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800137e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001380:	f003 fb36 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8001384:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4a81      	ldr	r2, [pc, #516]	; (8001590 <HAL_I2C_Init+0x274>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d807      	bhi.n	80013a0 <HAL_I2C_Init+0x84>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4a80      	ldr	r2, [pc, #512]	; (8001594 <HAL_I2C_Init+0x278>)
 8001394:	4293      	cmp	r3, r2
 8001396:	bf94      	ite	ls
 8001398:	2301      	movls	r3, #1
 800139a:	2300      	movhi	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	e006      	b.n	80013ae <HAL_I2C_Init+0x92>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a7d      	ldr	r2, [pc, #500]	; (8001598 <HAL_I2C_Init+0x27c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	bf94      	ite	ls
 80013a8:	2301      	movls	r3, #1
 80013aa:	2300      	movhi	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0e7      	b.n	8001586 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4a78      	ldr	r2, [pc, #480]	; (800159c <HAL_I2C_Init+0x280>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	0c9b      	lsrs	r3, r3, #18
 80013c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4a6a      	ldr	r2, [pc, #424]	; (8001590 <HAL_I2C_Init+0x274>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d802      	bhi.n	80013f0 <HAL_I2C_Init+0xd4>
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	3301      	adds	r3, #1
 80013ee:	e009      	b.n	8001404 <HAL_I2C_Init+0xe8>
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	4a69      	ldr	r2, [pc, #420]	; (80015a0 <HAL_I2C_Init+0x284>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	099b      	lsrs	r3, r3, #6
 8001402:	3301      	adds	r3, #1
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	430b      	orrs	r3, r1
 800140a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001416:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	495c      	ldr	r1, [pc, #368]	; (8001590 <HAL_I2C_Init+0x274>)
 8001420:	428b      	cmp	r3, r1
 8001422:	d819      	bhi.n	8001458 <HAL_I2C_Init+0x13c>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1e59      	subs	r1, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001432:	1c59      	adds	r1, r3, #1
 8001434:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001438:	400b      	ands	r3, r1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00a      	beq.n	8001454 <HAL_I2C_Init+0x138>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1e59      	subs	r1, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fbb1 f3f3 	udiv	r3, r1, r3
 800144c:	3301      	adds	r3, #1
 800144e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001452:	e051      	b.n	80014f8 <HAL_I2C_Init+0x1dc>
 8001454:	2304      	movs	r3, #4
 8001456:	e04f      	b.n	80014f8 <HAL_I2C_Init+0x1dc>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d111      	bne.n	8001484 <HAL_I2C_Init+0x168>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1e58      	subs	r0, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	440b      	add	r3, r1
 800146e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001472:	3301      	adds	r3, #1
 8001474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf0c      	ite	eq
 800147c:	2301      	moveq	r3, #1
 800147e:	2300      	movne	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	e012      	b.n	80014aa <HAL_I2C_Init+0x18e>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	0099      	lsls	r1, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	fbb0 f3f3 	udiv	r3, r0, r3
 800149a:	3301      	adds	r3, #1
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Init+0x196>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e022      	b.n	80014f8 <HAL_I2C_Init+0x1dc>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10e      	bne.n	80014d8 <HAL_I2C_Init+0x1bc>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1e58      	subs	r0, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6859      	ldr	r1, [r3, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	440b      	add	r3, r1
 80014c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80014cc:	3301      	adds	r3, #1
 80014ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d6:	e00f      	b.n	80014f8 <HAL_I2C_Init+0x1dc>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1e58      	subs	r0, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6859      	ldr	r1, [r3, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	0099      	lsls	r1, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ee:	3301      	adds	r3, #1
 80014f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	6809      	ldr	r1, [r1, #0]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69da      	ldr	r2, [r3, #28]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6911      	ldr	r1, [r2, #16]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68d2      	ldr	r2, [r2, #12]
 8001532:	4311      	orrs	r1, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	430b      	orrs	r3, r1
 800153a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	000186a0 	.word	0x000186a0
 8001594:	001e847f 	.word	0x001e847f
 8001598:	003d08ff 	.word	0x003d08ff
 800159c:	431bde83 	.word	0x431bde83
 80015a0:	10624dd3 	.word	0x10624dd3

080015a4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	817b      	strh	r3, [r7, #10]
 80015b6:	460b      	mov	r3, r1
 80015b8:	813b      	strh	r3, [r7, #8]
 80015ba:	4613      	mov	r3, r2
 80015bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b20      	cmp	r3, #32
 80015cc:	f040 809a 	bne.w	8001704 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_I2C_Mem_Read_IT+0x170>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	4a50      	ldr	r2, [pc, #320]	; (8001718 <HAL_I2C_Mem_Read_IT+0x174>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	0a1a      	lsrs	r2, r3, #8
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	009a      	lsls	r2, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d116      	bne.n	8001624 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2220      	movs	r2, #32
 8001600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f043 0220 	orr.w	r2, r3, #32
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e070      	b.n	8001706 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b02      	cmp	r3, #2
 8001630:	d0db      	beq.n	80015ea <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_I2C_Mem_Read_IT+0x9c>
 800163c:	2302      	movs	r3, #2
 800163e:	e062      	b.n	8001706 <HAL_I2C_Mem_Read_IT+0x162>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b01      	cmp	r3, #1
 8001654:	d007      	beq.n	8001666 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001674:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2222      	movs	r2, #34	; 0x22
 800167a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2240      	movs	r2, #64	; 0x40
 8001682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a3a      	ldr	r2, [r7, #32]
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001696:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4a1d      	ldr	r2, [pc, #116]	; (800171c <HAL_I2C_Mem_Read_IT+0x178>)
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80016a8:	897a      	ldrh	r2, [r7, #10]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80016ae:	893a      	ldrh	r2, [r7, #8]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80016b4:	88fa      	ldrh	r2, [r7, #6]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016ce:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016de:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80016fe:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	e000      	b.n	8001706 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8001704:	2302      	movs	r3, #2
  }
}
 8001706:	4618      	mov	r0, r3
 8001708:	371c      	adds	r7, #28
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000118 	.word	0x20000118
 8001718:	14f8b589 	.word	0x14f8b589
 800171c:	ffff0000 	.word	0xffff0000

08001720 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001740:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001748:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	2b10      	cmp	r3, #16
 800174e:	d003      	beq.n	8001758 <HAL_I2C_EV_IRQHandler+0x38>
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b40      	cmp	r3, #64	; 0x40
 8001754:	f040 80c1 	bne.w	80018da <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10d      	bne.n	800178e <HAL_I2C_EV_IRQHandler+0x6e>
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001778:	d003      	beq.n	8001782 <HAL_I2C_EV_IRQHandler+0x62>
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001780:	d101      	bne.n	8001786 <HAL_I2C_EV_IRQHandler+0x66>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_I2C_EV_IRQHandler+0x68>
 8001786:	2300      	movs	r3, #0
 8001788:	2b01      	cmp	r3, #1
 800178a:	f000 8132 	beq.w	80019f2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00c      	beq.n	80017b2 <HAL_I2C_EV_IRQHandler+0x92>
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	0a5b      	lsrs	r3, r3, #9
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f001 fb5b 	bl	8002e60 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fcd2 	bl	8002154 <I2C_Master_SB>
 80017b0:	e092      	b.n	80018d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	0a5b      	lsrs	r3, r3, #9
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fd48 	bl	8002260 <I2C_Master_ADD10>
 80017d0:	e082      	b.n	80018d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	0a5b      	lsrs	r3, r3, #9
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fd62 	bl	80022b4 <I2C_Master_ADDR>
 80017f0:	e072      	b.n	80018d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d03b      	beq.n	8001876 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800180c:	f000 80f3 	beq.w	80019f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	09db      	lsrs	r3, r3, #7
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00f      	beq.n	800183c <HAL_I2C_EV_IRQHandler+0x11c>
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	0a9b      	lsrs	r3, r3, #10
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_I2C_EV_IRQHandler+0x11c>
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d103      	bne.n	800183c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f94c 	bl	8001ad2 <I2C_MasterTransmit_TXE>
 800183a:	e04d      	b.n	80018d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80d6 	beq.w	80019f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	0a5b      	lsrs	r3, r3, #9
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80cf 	beq.w	80019f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	2b21      	cmp	r3, #33	; 0x21
 800185c:	d103      	bne.n	8001866 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f9d3 	bl	8001c0a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001864:	e0c7      	b.n	80019f6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	2b40      	cmp	r3, #64	; 0x40
 800186a:	f040 80c4 	bne.w	80019f6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fa41 	bl	8001cf6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001874:	e0bf      	b.n	80019f6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001884:	f000 80b7 	beq.w	80019f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00f      	beq.n	80018b4 <HAL_I2C_EV_IRQHandler+0x194>
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	0a9b      	lsrs	r3, r3, #10
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d009      	beq.n	80018b4 <HAL_I2C_EV_IRQHandler+0x194>
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	089b      	lsrs	r3, r3, #2
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d103      	bne.n	80018b4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 fab6 	bl	8001e1e <I2C_MasterReceive_RXNE>
 80018b2:	e011      	b.n	80018d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 809a 	beq.w	80019f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	0a5b      	lsrs	r3, r3, #9
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 8093 	beq.w	80019f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fb55 	bl	8001f80 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018d6:	e08e      	b.n	80019f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80018d8:	e08d      	b.n	80019f6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d004      	beq.n	80018ec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e007      	b.n	80018fc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d012      	beq.n	800192e <HAL_I2C_EV_IRQHandler+0x20e>
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	0a5b      	lsrs	r3, r3, #9
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00c      	beq.n	800192e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001924:	69b9      	ldr	r1, [r7, #24]
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 ff13 	bl	8002752 <I2C_Slave_ADDR>
 800192c:	e066      	b.n	80019fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_I2C_EV_IRQHandler+0x22e>
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	0a5b      	lsrs	r3, r3, #9
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 ff4e 	bl	80027e8 <I2C_Slave_STOPF>
 800194c:	e056      	b.n	80019fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	2b21      	cmp	r3, #33	; 0x21
 8001952:	d002      	beq.n	800195a <HAL_I2C_EV_IRQHandler+0x23a>
 8001954:	7bbb      	ldrb	r3, [r7, #14]
 8001956:	2b29      	cmp	r3, #41	; 0x29
 8001958:	d125      	bne.n	80019a6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	09db      	lsrs	r3, r3, #7
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00f      	beq.n	8001986 <HAL_I2C_EV_IRQHandler+0x266>
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	0a9b      	lsrs	r3, r3, #10
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_I2C_EV_IRQHandler+0x266>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d103      	bne.n	8001986 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fe29 	bl	80025d6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001984:	e039      	b.n	80019fa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d033      	beq.n	80019fa <HAL_I2C_EV_IRQHandler+0x2da>
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	0a5b      	lsrs	r3, r3, #9
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d02d      	beq.n	80019fa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fe56 	bl	8002650 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019a4:	e029      	b.n	80019fa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00f      	beq.n	80019d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	0a9b      	lsrs	r3, r3, #10
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	089b      	lsrs	r3, r3, #2
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fe61 	bl	8002692 <I2C_SlaveReceive_RXNE>
 80019d0:	e014      	b.n	80019fc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00e      	beq.n	80019fc <HAL_I2C_EV_IRQHandler+0x2dc>
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	0a5b      	lsrs	r3, r3, #9
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fe8f 	bl	800270e <I2C_SlaveReceive_BTF>
 80019f0:	e004      	b.n	80019fc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80019f2:	bf00      	nop
 80019f4:	e002      	b.n	80019fc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019f6:	bf00      	nop
 80019f8:	e000      	b.n	80019fc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019fa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80019fc:	3720      	adds	r7, #32
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	70fb      	strb	r3, [r7, #3]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ae8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d150      	bne.n	8001b9a <I2C_MasterTransmit_TXE+0xc8>
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	2b21      	cmp	r3, #33	; 0x21
 8001afc:	d14d      	bne.n	8001b9a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d01d      	beq.n	8001b40 <I2C_MasterTransmit_TXE+0x6e>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b20      	cmp	r3, #32
 8001b08:	d01a      	beq.n	8001b40 <I2C_MasterTransmit_TXE+0x6e>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b10:	d016      	beq.n	8001b40 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b20:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2211      	movs	r2, #17
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff62 	bl	8001a02 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b3e:	e060      	b.n	8001c02 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b4e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b40      	cmp	r3, #64	; 0x40
 8001b78:	d107      	bne.n	8001b8a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff7d 	bl	8001a82 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b88:	e03b      	b.n	8001c02 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff35 	bl	8001a02 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b98:	e033      	b.n	8001c02 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2b21      	cmp	r3, #33	; 0x21
 8001b9e:	d005      	beq.n	8001bac <I2C_MasterTransmit_TXE+0xda>
 8001ba0:	7bbb      	ldrb	r3, [r7, #14]
 8001ba2:	2b40      	cmp	r3, #64	; 0x40
 8001ba4:	d12d      	bne.n	8001c02 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	2b22      	cmp	r3, #34	; 0x22
 8001baa:	d12a      	bne.n	8001c02 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d108      	bne.n	8001bc8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001bc6:	e01c      	b.n	8001c02 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b40      	cmp	r3, #64	; 0x40
 8001bd2:	d103      	bne.n	8001bdc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f88e 	bl	8001cf6 <I2C_MemoryTransmit_TXE_BTF>
}
 8001bda:	e012      	b.n	8001c02 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001c00:	e7ff      	b.n	8001c02 <I2C_MasterTransmit_TXE+0x130>
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b21      	cmp	r3, #33	; 0x21
 8001c22:	d164      	bne.n	8001cee <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d012      	beq.n	8001c54 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001c52:	e04c      	b.n	8001cee <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d01d      	beq.n	8001c96 <I2C_MasterTransmit_BTF+0x8c>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d01a      	beq.n	8001c96 <I2C_MasterTransmit_BTF+0x8c>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c66:	d016      	beq.n	8001c96 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c76:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2211      	movs	r2, #17
 8001c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff feb7 	bl	8001a02 <HAL_I2C_MasterTxCpltCallback>
}
 8001c94:	e02b      	b.n	8001cee <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ca4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b40      	cmp	r3, #64	; 0x40
 8001cce:	d107      	bne.n	8001ce0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff fed2 	bl	8001a82 <HAL_I2C_MemTxCpltCallback>
}
 8001cde:	e006      	b.n	8001cee <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fe8a 	bl	8001a02 <HAL_I2C_MasterTxCpltCallback>
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d11d      	bne.n	8001d4a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d10b      	bne.n	8001d2e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d26:	1c9a      	adds	r2, r3, #2
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001d2c:	e073      	b.n	8001e16 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	121b      	asrs	r3, r3, #8
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d48:	e065      	b.n	8001e16 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d10b      	bne.n	8001d6a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d68:	e055      	b.n	8001e16 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d151      	bne.n	8001e16 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	2b22      	cmp	r3, #34	; 0x22
 8001d76:	d10d      	bne.n	8001d94 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d86:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d92:	e040      	b.n	8001e16 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d015      	beq.n	8001dca <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	2b21      	cmp	r3, #33	; 0x21
 8001da2:	d112      	bne.n	8001dca <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001dc8:	e025      	b.n	8001e16 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d120      	bne.n	8001e16 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b21      	cmp	r3, #33	; 0x21
 8001dd8:	d11d      	bne.n	8001e16 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001de8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff fe36 	bl	8001a82 <HAL_I2C_MemTxCpltCallback>
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b22      	cmp	r3, #34	; 0x22
 8001e30:	f040 80a2 	bne.w	8001f78 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d921      	bls.n	8001e86 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	f040 8082 	bne.w	8001f78 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e82:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001e84:	e078      	b.n	8001f78 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d074      	beq.n	8001f78 <I2C_MasterReceive_RXNE+0x15a>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d002      	beq.n	8001e9a <I2C_MasterReceive_RXNE+0x7c>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d16e      	bne.n	8001f78 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 ffae 	bl	8002dfc <I2C_WaitOnSTOPRequestThroughIT>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d142      	bne.n	8001f2c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ec4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b40      	cmp	r3, #64	; 0x40
 8001efe:	d10a      	bne.n	8001f16 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fdc1 	bl	8001a96 <HAL_I2C_MemRxCpltCallback>
}
 8001f14:	e030      	b.n	8001f78 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2212      	movs	r2, #18
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fd76 	bl	8001a16 <HAL_I2C_MasterRxCpltCallback>
}
 8001f2a:	e025      	b.n	8001f78 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f3a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fd99 	bl	8001aaa <HAL_I2C_ErrorCallback>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d11b      	bne.n	8001fd0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001fce:	e0bd      	b.n	800214c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d129      	bne.n	800202e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d00a      	beq.n	8002006 <I2C_MasterReceive_BTF+0x86>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d007      	beq.n	8002006 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002004:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800202c:	e08e      	b.n	800214c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d176      	bne.n	8002126 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d002      	beq.n	8002044 <I2C_MasterReceive_BTF+0xc4>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b10      	cmp	r3, #16
 8002042:	d108      	bne.n	8002056 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e019      	b.n	800208a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d002      	beq.n	8002062 <I2C_MasterReceive_BTF+0xe2>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d108      	bne.n	8002074 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e00a      	b.n	800208a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b10      	cmp	r3, #16
 8002078:	d007      	beq.n	800208a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002088:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80020e4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b40      	cmp	r3, #64	; 0x40
 80020f8:	d10a      	bne.n	8002110 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fcc4 	bl	8001a96 <HAL_I2C_MemRxCpltCallback>
}
 800210e:	e01d      	b.n	800214c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2212      	movs	r2, #18
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fc79 	bl	8001a16 <HAL_I2C_MasterRxCpltCallback>
}
 8002124:	e012      	b.n	800214c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	d117      	bne.n	8002198 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002180:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002182:	e067      	b.n	8002254 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	b2da      	uxtb	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	611a      	str	r2, [r3, #16]
}
 8002196:	e05d      	b.n	8002254 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021a0:	d133      	bne.n	800220a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b21      	cmp	r3, #33	; 0x21
 80021ac:	d109      	bne.n	80021c2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021be:	611a      	str	r2, [r3, #16]
 80021c0:	e008      	b.n	80021d4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d004      	beq.n	80021e6 <I2C_Master_SB+0x92>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d108      	bne.n	80021f8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d032      	beq.n	8002254 <I2C_Master_SB+0x100>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d02d      	beq.n	8002254 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002206:	605a      	str	r2, [r3, #4]
}
 8002208:	e024      	b.n	8002254 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10e      	bne.n	8002230 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	b29b      	uxth	r3, r3
 8002218:	11db      	asrs	r3, r3, #7
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f003 0306 	and.w	r3, r3, #6
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f063 030f 	orn	r3, r3, #15
 8002226:	b2da      	uxtb	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	611a      	str	r2, [r3, #16]
}
 800222e:	e011      	b.n	8002254 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10d      	bne.n	8002254 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	b29b      	uxth	r3, r3
 800223e:	11db      	asrs	r3, r3, #7
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 0306 	and.w	r3, r3, #6
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f063 030e 	orn	r3, r3, #14
 800224c:	b2da      	uxtb	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	611a      	str	r2, [r3, #16]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	b2da      	uxtb	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <I2C_Master_ADD10+0x26>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	2b00      	cmp	r3, #0
 8002284:	d108      	bne.n	8002298 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <I2C_Master_ADD10+0x48>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a6:	605a      	str	r2, [r3, #4]
  }
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b091      	sub	sp, #68	; 0x44
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b22      	cmp	r3, #34	; 0x22
 80022dc:	f040 8169 	bne.w	80025b2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10f      	bne.n	8002308 <I2C_Master_ADDR+0x54>
 80022e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022ec:	2b40      	cmp	r3, #64	; 0x40
 80022ee:	d10b      	bne.n	8002308 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f0:	2300      	movs	r3, #0
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	e160      	b.n	80025ca <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11d      	bne.n	800234c <I2C_Master_ADDR+0x98>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002318:	d118      	bne.n	800234c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	651a      	str	r2, [r3, #80]	; 0x50
 800234a:	e13e      	b.n	80025ca <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d113      	bne.n	800237e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002356:	2300      	movs	r3, #0
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e115      	b.n	80025aa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	f040 808a 	bne.w	800249e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800238a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002390:	d137      	bne.n	8002402 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023b0:	d113      	bne.n	80023da <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	e0e7      	b.n	80025aa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	623b      	str	r3, [r7, #32]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	623b      	str	r3, [r7, #32]
 80023ee:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e0d3      	b.n	80025aa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002404:	2b08      	cmp	r3, #8
 8002406:	d02e      	beq.n	8002466 <I2C_Master_ADDR+0x1b2>
 8002408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240a:	2b20      	cmp	r3, #32
 800240c:	d02b      	beq.n	8002466 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002410:	2b12      	cmp	r3, #18
 8002412:	d102      	bne.n	800241a <I2C_Master_ADDR+0x166>
 8002414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002416:	2b01      	cmp	r3, #1
 8002418:	d125      	bne.n	8002466 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	2b04      	cmp	r3, #4
 800241e:	d00e      	beq.n	800243e <I2C_Master_ADDR+0x18a>
 8002420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002422:	2b02      	cmp	r3, #2
 8002424:	d00b      	beq.n	800243e <I2C_Master_ADDR+0x18a>
 8002426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002428:	2b10      	cmp	r3, #16
 800242a:	d008      	beq.n	800243e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	e007      	b.n	800244e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800244c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	e0a1      	b.n	80025aa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002474:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e085      	b.n	80025aa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d14d      	bne.n	8002544 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d016      	beq.n	80024dc <I2C_Master_ADDR+0x228>
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d013      	beq.n	80024dc <I2C_Master_ADDR+0x228>
 80024b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d010      	beq.n	80024dc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e007      	b.n	80024ec <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024ea:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024fa:	d117      	bne.n	800252c <I2C_Master_ADDR+0x278>
 80024fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002502:	d00b      	beq.n	800251c <I2C_Master_ADDR+0x268>
 8002504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002506:	2b01      	cmp	r3, #1
 8002508:	d008      	beq.n	800251c <I2C_Master_ADDR+0x268>
 800250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250c:	2b08      	cmp	r3, #8
 800250e:	d005      	beq.n	800251c <I2C_Master_ADDR+0x268>
 8002510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002512:	2b10      	cmp	r3, #16
 8002514:	d002      	beq.n	800251c <I2C_Master_ADDR+0x268>
 8002516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002518:	2b20      	cmp	r3, #32
 800251a:	d107      	bne.n	800252c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800252a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	e032      	b.n	80025aa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002552:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800255e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002562:	d117      	bne.n	8002594 <I2C_Master_ADDR+0x2e0>
 8002564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002566:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800256a:	d00b      	beq.n	8002584 <I2C_Master_ADDR+0x2d0>
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	2b01      	cmp	r3, #1
 8002570:	d008      	beq.n	8002584 <I2C_Master_ADDR+0x2d0>
 8002572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002574:	2b08      	cmp	r3, #8
 8002576:	d005      	beq.n	8002584 <I2C_Master_ADDR+0x2d0>
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	2b10      	cmp	r3, #16
 800257c:	d002      	beq.n	8002584 <I2C_Master_ADDR+0x2d0>
 800257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002580:	2b20      	cmp	r3, #32
 8002582:	d107      	bne.n	8002594 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002592:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80025b0:	e00b      	b.n	80025ca <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]
}
 80025c8:	e7ff      	b.n	80025ca <I2C_Master_ADDR+0x316>
 80025ca:	bf00      	nop
 80025cc:	3744      	adds	r7, #68	; 0x44
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d02b      	beq.n	8002648 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d114      	bne.n	8002648 <I2C_SlaveTransmit_TXE+0x72>
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b29      	cmp	r3, #41	; 0x29
 8002622:	d111      	bne.n	8002648 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002632:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2221      	movs	r2, #33	; 0x21
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2228      	movs	r2, #40	; 0x28
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff f9f1 	bl	8001a2a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d011      	beq.n	8002686 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	781a      	ldrb	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d02c      	beq.n	8002706 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d114      	bne.n	8002706 <I2C_SlaveReceive_RXNE+0x74>
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b2a      	cmp	r3, #42	; 0x2a
 80026e0:	d111      	bne.n	8002706 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2222      	movs	r2, #34	; 0x22
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2228      	movs	r2, #40	; 0x28
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff f99c 	bl	8001a3e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d012      	beq.n	8002746 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800276c:	2b28      	cmp	r3, #40	; 0x28
 800276e:	d127      	bne.n	80027c0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	09db      	lsrs	r3, r3, #7
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d103      	bne.n	80027a4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	81bb      	strh	r3, [r7, #12]
 80027a2:	e002      	b.n	80027aa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80027b2:	89ba      	ldrh	r2, [r7, #12]
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	4619      	mov	r1, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff f94a 	bl	8001a52 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80027be:	e00e      	b.n	80027de <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002806:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002808:	2300      	movs	r3, #0
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002834:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002844:	d172      	bne.n	800292c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	2b22      	cmp	r3, #34	; 0x22
 800284a:	d002      	beq.n	8002852 <I2C_Slave_STOPF+0x6a>
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b2a      	cmp	r3, #42	; 0x2a
 8002850:	d135      	bne.n	80028be <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	b29a      	uxth	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f043 0204 	orr.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002884:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe face 	bl	8000e2c <HAL_DMA_GetState>
 8002890:	4603      	mov	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d049      	beq.n	800292a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	4a69      	ldr	r2, [pc, #420]	; (8002a40 <I2C_Slave_STOPF+0x258>)
 800289c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe f916 	bl	8000ad4 <HAL_DMA_Abort_IT>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d03d      	beq.n	800292a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028b8:	4610      	mov	r0, r2
 80028ba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028bc:	e035      	b.n	800292a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f043 0204 	orr.w	r2, r3, #4
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fa98 	bl	8000e2c <HAL_DMA_GetState>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d014      	beq.n	800292c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	4a4e      	ldr	r2, [pc, #312]	; (8002a40 <I2C_Slave_STOPF+0x258>)
 8002908:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe f8e0 	bl	8000ad4 <HAL_DMA_Abort_IT>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002924:	4610      	mov	r0, r2
 8002926:	4798      	blx	r3
 8002928:	e000      	b.n	800292c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800292a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d03e      	beq.n	80029b4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	d112      	bne.n	800296a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d112      	bne.n	800299e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691a      	ldr	r2, [r3, #16]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f043 0204 	orr.w	r2, r3, #4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f843 	bl	8002a48 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80029c2:	e039      	b.n	8002a38 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b2a      	cmp	r3, #42	; 0x2a
 80029c8:	d109      	bne.n	80029de <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2228      	movs	r2, #40	; 0x28
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff f830 	bl	8001a3e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b28      	cmp	r3, #40	; 0x28
 80029e8:	d111      	bne.n	8002a0e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <I2C_Slave_STOPF+0x25c>)
 80029ee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff f831 	bl	8001a6e <HAL_I2C_ListenCpltCallback>
}
 8002a0c:	e014      	b.n	8002a38 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	2b22      	cmp	r3, #34	; 0x22
 8002a14:	d002      	beq.n	8002a1c <I2C_Slave_STOPF+0x234>
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	2b22      	cmp	r3, #34	; 0x22
 8002a1a:	d10d      	bne.n	8002a38 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff f803 	bl	8001a3e <HAL_I2C_SlaveRxCpltCallback>
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	08002cad 	.word	0x08002cad
 8002a44:	ffff0000 	.word	0xffff0000

08002a48 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a60:	7bbb      	ldrb	r3, [r7, #14]
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d002      	beq.n	8002a6c <I2C_ITError+0x24>
 8002a66:	7bbb      	ldrb	r3, [r7, #14]
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d10a      	bne.n	8002a82 <I2C_ITError+0x3a>
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2b22      	cmp	r3, #34	; 0x22
 8002a70:	d107      	bne.n	8002a82 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a80:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a88:	2b28      	cmp	r3, #40	; 0x28
 8002a8a:	d107      	bne.n	8002a9c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2228      	movs	r2, #40	; 0x28
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a9a:	e015      	b.n	8002ac8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aaa:	d00a      	beq.n	8002ac2 <I2C_ITError+0x7a>
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b60      	cmp	r3, #96	; 0x60
 8002ab0:	d007      	beq.n	8002ac2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad6:	d162      	bne.n	8002b9e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d020      	beq.n	8002b38 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	4a6a      	ldr	r2, [pc, #424]	; (8002ca4 <I2C_ITError+0x25c>)
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd ffe6 	bl	8000ad4 <HAL_DMA_Abort_IT>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8089 	beq.w	8002c22 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b32:	4610      	mov	r0, r2
 8002b34:	4798      	blx	r3
 8002b36:	e074      	b.n	8002c22 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	4a59      	ldr	r2, [pc, #356]	; (8002ca4 <I2C_ITError+0x25c>)
 8002b3e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd ffc5 	bl	8000ad4 <HAL_DMA_Abort_IT>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d068      	beq.n	8002c22 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d10b      	bne.n	8002b76 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4798      	blx	r3
 8002b9c:	e041      	b.n	8002c22 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b60      	cmp	r3, #96	; 0x60
 8002ba8:	d125      	bne.n	8002bf6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b40      	cmp	r3, #64	; 0x40
 8002bc4:	d10b      	bne.n	8002bde <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe ff65 	bl	8001abe <HAL_I2C_AbortCpltCallback>
 8002bf4:	e015      	b.n	8002c22 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	d10b      	bne.n	8002c1c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7fe ff44 	bl	8001aaa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10e      	bne.n	8002c50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d104      	bne.n	8002c50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c5e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c66:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d113      	bne.n	8002c9c <I2C_ITError+0x254>
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b28      	cmp	r3, #40	; 0x28
 8002c78:	d110      	bne.n	8002c9c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <I2C_ITError+0x260>)
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe fee9 	bl	8001a6e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	08002cad 	.word	0x08002cad
 8002ca8:	ffff0000 	.word	0xffff0000

08002cac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cc6:	4b4b      	ldr	r3, [pc, #300]	; (8002df4 <I2C_DMAAbort+0x148>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	08db      	lsrs	r3, r3, #3
 8002ccc:	4a4a      	ldr	r2, [pc, #296]	; (8002df8 <I2C_DMAAbort+0x14c>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0a1a      	lsrs	r2, r3, #8
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00da      	lsls	r2, r3, #3
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002cf2:	e00a      	b.n	8002d0a <I2C_DMAAbort+0x5e>
    }
    count--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d08:	d0ea      	beq.n	8002ce0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d16:	2200      	movs	r2, #0
 8002d18:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	2200      	movs	r2, #0
 8002d28:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d38:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b60      	cmp	r3, #96	; 0x60
 8002d7a:	d10e      	bne.n	8002d9a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7fe fe93 	bl	8001abe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d98:	e027      	b.n	8002dea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002da0:	2b28      	cmp	r3, #40	; 0x28
 8002da2:	d117      	bne.n	8002dd4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dc2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2228      	movs	r2, #40	; 0x28
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002dd2:	e007      	b.n	8002de4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002de4:	6978      	ldr	r0, [r7, #20]
 8002de6:	f7fe fe60 	bl	8001aaa <HAL_I2C_ErrorCallback>
}
 8002dea:	bf00      	nop
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000118 	.word	0x20000118
 8002df8:	14f8b589 	.word	0x14f8b589

08002dfc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	0a1a      	lsrs	r2, r3, #8
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d107      	bne.n	8002e3a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e008      	b.n	8002e4c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e48:	d0e9      	beq.n	8002e1e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	20000118 	.word	0x20000118
 8002e5c:	14f8b589 	.word	0x14f8b589

08002e60 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002e70:	d103      	bne.n	8002e7a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e78:	e007      	b.n	8002e8a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002e82:	d102      	bne.n	8002e8a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2208      	movs	r2, #8
 8002e88:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e98:	b08f      	sub	sp, #60	; 0x3c
 8002e9a:	af0a      	add	r7, sp, #40	; 0x28
 8002e9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e10f      	b.n	80030c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f008 fafc 	bl	800b4c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2203      	movs	r2, #3
 8002ecc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 fb3d 	bl	8007566 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	687e      	ldr	r6, [r7, #4]
 8002ef4:	466d      	mov	r5, sp
 8002ef6:	f106 0410 	add.w	r4, r6, #16
 8002efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f06:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f0a:	1d33      	adds	r3, r6, #4
 8002f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f0e:	6838      	ldr	r0, [r7, #0]
 8002f10:	f004 fa14 	bl	800733c <USB_CoreInit>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0d0      	b.n	80030c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f004 fb2b 	bl	8007588 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
 8002f36:	e04a      	b.n	8002fce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	333d      	adds	r3, #61	; 0x3d
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	333c      	adds	r3, #60	; 0x3c
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	b298      	uxth	r0, r3
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3342      	adds	r3, #66	; 0x42
 8002f74:	4602      	mov	r2, r0
 8002f76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	333f      	adds	r3, #63	; 0x3f
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3344      	adds	r3, #68	; 0x44
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3348      	adds	r3, #72	; 0x48
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3350      	adds	r3, #80	; 0x50
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d3af      	bcc.n	8002f38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	e044      	b.n	8003068 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003036:	7bfa      	ldrb	r2, [r7, #15]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	3301      	adds	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	429a      	cmp	r2, r3
 8003070:	d3b5      	bcc.n	8002fde <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	687e      	ldr	r6, [r7, #4]
 800307a:	466d      	mov	r5, sp
 800307c:	f106 0410 	add.w	r4, r6, #16
 8003080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003088:	e894 0003 	ldmia.w	r4, {r0, r1}
 800308c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003090:	1d33      	adds	r3, r6, #4
 8003092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003094:	6838      	ldr	r0, [r7, #0]
 8003096:	f004 fac3 	bl	8007620 <USB_DevInit>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e00d      	b.n	80030c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f005 fb3f 	bl	8008744 <USB_DevDisconnect>

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_PCD_Start+0x1c>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e020      	b.n	800312e <HAL_PCD_Start+0x5e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d109      	bne.n	8003110 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003100:	2b01      	cmp	r3, #1
 8003102:	d005      	beq.n	8003110 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f004 fa15 	bl	8007544 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f005 faef 	bl	8008702 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003136:	b590      	push	{r4, r7, lr}
 8003138:	b08d      	sub	sp, #52	; 0x34
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f005 fbad 	bl	80088ac <USB_GetMode>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 839d 	bne.w	8003894 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f005 fb11 	bl	8008786 <USB_ReadInterrupts>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8393 	beq.w	8003892 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f005 fb08 	bl	8008786 <USB_ReadInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b02      	cmp	r3, #2
 800317e:	d107      	bne.n	8003190 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f002 0202 	and.w	r2, r2, #2
 800318e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f005 faf6 	bl	8008786 <USB_ReadInterrupts>
 800319a:	4603      	mov	r3, r0
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d161      	bne.n	8003268 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0210 	bic.w	r2, r2, #16
 80031b2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f003 020f 	and.w	r2, r3, #15
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	3304      	adds	r3, #4
 80031d2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	0c5b      	lsrs	r3, r3, #17
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d124      	bne.n	800322a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d035      	beq.n	8003258 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	6a38      	ldr	r0, [r7, #32]
 8003200:	f005 f92d 	bl	800845e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003210:	441a      	add	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003222:	441a      	add	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	619a      	str	r2, [r3, #24]
 8003228:	e016      	b.n	8003258 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	0c5b      	lsrs	r3, r3, #17
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	2b06      	cmp	r3, #6
 8003234:	d110      	bne.n	8003258 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800323c:	2208      	movs	r2, #8
 800323e:	4619      	mov	r1, r3
 8003240:	6a38      	ldr	r0, [r7, #32]
 8003242:	f005 f90c 	bl	800845e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003252:	441a      	add	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0210 	orr.w	r2, r2, #16
 8003266:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f005 fa8a 	bl	8008786 <USB_ReadInterrupts>
 8003272:	4603      	mov	r3, r0
 8003274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003278:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800327c:	d16e      	bne.n	800335c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f005 fa90 	bl	80087ac <USB_ReadDevAllOutEpInterrupt>
 800328c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800328e:	e062      	b.n	8003356 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d057      	beq.n	800334a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f005 fab5 	bl	8008814 <USB_ReadDevOutEPInterrupt>
 80032aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00c      	beq.n	80032d0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	461a      	mov	r2, r3
 80032c4:	2301      	movs	r3, #1
 80032c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fdb0 	bl	8003e30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00c      	beq.n	80032f4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e6:	461a      	mov	r2, r3
 80032e8:	2308      	movs	r3, #8
 80032ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 feaa 	bl	8004048 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330a:	461a      	mov	r2, r3
 800330c:	2310      	movs	r3, #16
 800330e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003326:	461a      	mov	r2, r3
 8003328:	2320      	movs	r3, #32
 800332a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003342:	461a      	mov	r2, r3
 8003344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003348:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	3301      	adds	r3, #1
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	2b00      	cmp	r3, #0
 800335a:	d199      	bne.n	8003290 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f005 fa10 	bl	8008786 <USB_ReadInterrupts>
 8003366:	4603      	mov	r3, r0
 8003368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003370:	f040 80c0 	bne.w	80034f4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f005 fa31 	bl	80087e0 <USB_ReadDevAllInEpInterrupt>
 800337e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003384:	e0b2      	b.n	80034ec <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a7 	beq.w	80034e0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f005 fa57 	bl	8008850 <USB_ReadDevInEPInterrupt>
 80033a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d057      	beq.n	800345e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	2201      	movs	r2, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69f9      	ldr	r1, [r7, #28]
 80033ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ce:	4013      	ands	r3, r2
 80033d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033de:	461a      	mov	r2, r3
 80033e0:	2301      	movs	r3, #1
 80033e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d132      	bne.n	8003452 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	3348      	adds	r3, #72	; 0x48
 80033fc:	6819      	ldr	r1, [r3, #0]
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4403      	add	r3, r0
 800340c:	3344      	adds	r3, #68	; 0x44
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4419      	add	r1, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4403      	add	r3, r0
 8003420:	3348      	adds	r3, #72	; 0x48
 8003422:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d113      	bne.n	8003452 <HAL_PCD_IRQHandler+0x31c>
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3350      	adds	r3, #80	; 0x50
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800344a:	461a      	mov	r2, r3
 800344c:	2101      	movs	r1, #1
 800344e:	f005 fa5f 	bl	8008910 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4619      	mov	r1, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f008 f8c0 	bl	800b5de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003474:	461a      	mov	r2, r3
 8003476:	2308      	movs	r3, #8
 8003478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003490:	461a      	mov	r2, r3
 8003492:	2310      	movs	r3, #16
 8003494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ac:	461a      	mov	r2, r3
 80034ae:	2340      	movs	r3, #64	; 0x40
 80034b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c8:	461a      	mov	r2, r3
 80034ca:	2302      	movs	r3, #2
 80034cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fc1b 	bl	8003d16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	3301      	adds	r3, #1
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f47f af49 	bne.w	8003386 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f005 f944 	bl	8008786 <USB_ReadInterrupts>
 80034fe:	4603      	mov	r3, r0
 8003500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003508:	d122      	bne.n	8003550 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003524:	2b01      	cmp	r3, #1
 8003526:	d108      	bne.n	800353a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003530:	2100      	movs	r1, #0
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fe26 	bl	8004184 <HAL_PCDEx_LPM_Callback>
 8003538:	e002      	b.n	8003540 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f008 f8bc 	bl	800b6b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800354e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f005 f916 	bl	8008786 <USB_ReadInterrupts>
 800355a:	4603      	mov	r3, r0
 800355c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003564:	d112      	bne.n	800358c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f008 f878 	bl	800b66c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800358a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f005 f8f8 	bl	8008786 <USB_ReadInterrupts>
 8003596:	4603      	mov	r3, r0
 8003598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	f040 80c7 	bne.w	8003732 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2110      	movs	r1, #16
 80035be:	4618      	mov	r0, r3
 80035c0:	f004 f992 	bl	80078e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c4:	2300      	movs	r3, #0
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c8:	e056      	b.n	8003678 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d6:	461a      	mov	r2, r3
 80035d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ee:	0151      	lsls	r1, r2, #5
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	440a      	add	r2, r1
 80035f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035fc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	440a      	add	r2, r1
 8003614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003618:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800361c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362a:	461a      	mov	r2, r3
 800362c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003630:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003642:	0151      	lsls	r1, r2, #5
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	440a      	add	r2, r1
 8003648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800364c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003650:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003662:	0151      	lsls	r1, r2, #5
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	440a      	add	r2, r1
 8003668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800366c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003670:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003674:	3301      	adds	r3, #1
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800367e:	429a      	cmp	r2, r3
 8003680:	d3a3      	bcc.n	80035ca <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003690:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003694:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ae:	f043 030b 	orr.w	r3, r3, #11
 80036b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c4:	f043 030b 	orr.w	r3, r3, #11
 80036c8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ca:	e015      	b.n	80036f8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f2:	f043 030b 	orr.w	r3, r3, #11
 80036f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003706:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800370a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800371c:	461a      	mov	r2, r3
 800371e:	f005 f8f7 	bl	8008910 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f005 f825 	bl	8008786 <USB_ReadInterrupts>
 800373c:	4603      	mov	r3, r0
 800373e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003746:	d124      	bne.n	8003792 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f005 f8bb 	bl	80088c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f004 f923 	bl	80079a2 <USB_GetDevSpeed>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681c      	ldr	r4, [r3, #0]
 8003768:	f001 f936 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 800376c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	4620      	mov	r0, r4
 8003778:	f003 fe42 	bl	8007400 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f007 ff56 	bl	800b62e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003790:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f004 fff5 	bl	8008786 <USB_ReadInterrupts>
 800379c:	4603      	mov	r3, r0
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d10a      	bne.n	80037bc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f007 ff33 	bl	800b612 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f002 0208 	and.w	r2, r2, #8
 80037ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f004 ffe0 	bl	8008786 <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d0:	d10f      	bne.n	80037f2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	4619      	mov	r1, r3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f007 ff8b 	bl	800b6f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f004 ffc5 	bl	8008786 <USB_ReadInterrupts>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003806:	d10f      	bne.n	8003828 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4619      	mov	r1, r3
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f007 ff5e 	bl	800b6d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003826:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f004 ffaa 	bl	8008786 <USB_ReadInterrupts>
 8003832:	4603      	mov	r3, r0
 8003834:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383c:	d10a      	bne.n	8003854 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f007 ff6c 	bl	800b71c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f004 ff94 	bl	8008786 <USB_ReadInterrupts>
 800385e:	4603      	mov	r3, r0
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b04      	cmp	r3, #4
 8003866:	d115      	bne.n	8003894 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f007 ff5c 	bl	800b738 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	430a      	orrs	r2, r1
 800388e:	605a      	str	r2, [r3, #4]
 8003890:	e000      	b.n	8003894 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003892:	bf00      	nop
    }
  }
}
 8003894:	3734      	adds	r7, #52	; 0x34
 8003896:	46bd      	mov	sp, r7
 8003898:	bd90      	pop	{r4, r7, pc}

0800389a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_PCD_SetAddress+0x1a>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e013      	b.n	80038dc <HAL_PCD_SetAddress+0x42>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f004 fef2 	bl	80086b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	461a      	mov	r2, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	70fb      	strb	r3, [r7, #3]
 80038f6:	460b      	mov	r3, r1
 80038f8:	803b      	strh	r3, [r7, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003906:	2b00      	cmp	r3, #0
 8003908:	da0f      	bge.n	800392a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	f003 020f 	and.w	r2, r3, #15
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	3338      	adds	r3, #56	; 0x38
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	3304      	adds	r3, #4
 8003920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	705a      	strb	r2, [r3, #1]
 8003928:	e00f      	b.n	800394a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800392a:	78fb      	ldrb	r3, [r7, #3]
 800392c:	f003 020f 	and.w	r2, r3, #15
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	3304      	adds	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003956:	883a      	ldrh	r2, [r7, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	78ba      	ldrb	r2, [r7, #2]
 8003960:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	785b      	ldrb	r3, [r3, #1]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003974:	78bb      	ldrb	r3, [r7, #2]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d102      	bne.n	8003980 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_PCD_EP_Open+0xaa>
 800398a:	2302      	movs	r3, #2
 800398c:	e00e      	b.n	80039ac <HAL_PCD_EP_Open+0xc8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68f9      	ldr	r1, [r7, #12]
 800399c:	4618      	mov	r0, r3
 800399e:	f004 f825 	bl	80079ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80039aa:	7afb      	ldrb	r3, [r7, #11]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	da0f      	bge.n	80039e8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	f003 020f 	and.w	r2, r3, #15
 80039ce:	4613      	mov	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	3338      	adds	r3, #56	; 0x38
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4413      	add	r3, r2
 80039dc:	3304      	adds	r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	705a      	strb	r2, [r3, #1]
 80039e6:	e00f      	b.n	8003a08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	f003 020f 	and.w	r2, r3, #15
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	3304      	adds	r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_PCD_EP_Close+0x6e>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e00e      	b.n	8003a40 <HAL_PCD_EP_Close+0x8c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68f9      	ldr	r1, [r7, #12]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f004 f863 	bl	8007afc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	460b      	mov	r3, r1
 8003a56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a58:	7afb      	ldrb	r3, [r7, #11]
 8003a5a:	f003 020f 	and.w	r2, r3, #15
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3304      	adds	r3, #4
 8003a70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2200      	movs	r2, #0
 8003a88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a8a:	7afb      	ldrb	r3, [r7, #11]
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d102      	bne.n	8003aa4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aa4:	7afb      	ldrb	r3, [r7, #11]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6979      	ldr	r1, [r7, #20]
 8003abc:	f004 fb3e 	bl	800813c <USB_EP0StartXfer>
 8003ac0:	e008      	b.n	8003ad4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	6979      	ldr	r1, [r7, #20]
 8003ad0:	f004 f8f0 	bl	8007cb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	f003 020f 	and.w	r2, r3, #15
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b00:	681b      	ldr	r3, [r3, #0]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
 8003b20:	f003 020f 	and.w	r2, r3, #15
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	3338      	adds	r3, #56	; 0x38
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	3304      	adds	r3, #4
 8003b34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2200      	movs	r2, #0
 8003b46:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d102      	bne.n	8003b68 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b68:	7afb      	ldrb	r3, [r7, #11]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6979      	ldr	r1, [r7, #20]
 8003b80:	f004 fadc 	bl	800813c <USB_EP0StartXfer>
 8003b84:	e008      	b.n	8003b98 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	6979      	ldr	r1, [r7, #20]
 8003b94:	f004 f88e 	bl	8007cb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	f003 020f 	and.w	r2, r3, #15
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d901      	bls.n	8003bc0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e050      	b.n	8003c62 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	da0f      	bge.n	8003be8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	f003 020f 	and.w	r2, r3, #15
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	3338      	adds	r3, #56	; 0x38
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	3304      	adds	r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	705a      	strb	r2, [r3, #1]
 8003be6:	e00d      	b.n	8003c04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_PCD_EP_SetStall+0x82>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e01e      	b.n	8003c62 <HAL_PCD_EP_SetStall+0xc0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f004 fc6b 	bl	800850e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10a      	bne.n	8003c58 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	b2d9      	uxtb	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c52:	461a      	mov	r2, r3
 8003c54:	f004 fe5c 	bl	8008910 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	f003 020f 	and.w	r2, r3, #15
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d901      	bls.n	8003c88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e042      	b.n	8003d0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da0f      	bge.n	8003cb0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 020f 	and.w	r2, r3, #15
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	3338      	adds	r3, #56	; 0x38
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	705a      	strb	r2, [r3, #1]
 8003cae:	e00f      	b.n	8003cd0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	f003 020f 	and.w	r2, r3, #15
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_PCD_EP_ClrStall+0x86>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e00e      	b.n	8003d0e <HAL_PCD_EP_ClrStall+0xa4>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68f9      	ldr	r1, [r7, #12]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 fc73 	bl	80085ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b08a      	sub	sp, #40	; 0x28
 8003d1a:	af02      	add	r7, sp, #8
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	3338      	adds	r3, #56	; 0x38
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d901      	bls.n	8003d4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e06c      	b.n	8003e28 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d902      	bls.n	8003d6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3303      	adds	r3, #3
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d72:	e02b      	b.n	8003dcc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d902      	bls.n	8003d90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	3303      	adds	r3, #3
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68d9      	ldr	r1, [r3, #12]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	4603      	mov	r3, r0
 8003dae:	6978      	ldr	r0, [r7, #20]
 8003db0:	f004 fb17 	bl	80083e2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	441a      	add	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	699a      	ldr	r2, [r3, #24]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	441a      	add	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d809      	bhi.n	8003df6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d203      	bcs.n	8003df6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1be      	bne.n	8003d74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d811      	bhi.n	8003e26 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	2201      	movs	r2, #1
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	6939      	ldr	r1, [r7, #16]
 8003e1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e22:	4013      	ands	r3, r2
 8003e24:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	333c      	adds	r3, #60	; 0x3c
 8003e48:	3304      	adds	r3, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	f040 80a0 	bne.w	8003fa8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d015      	beq.n	8003e9e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a72      	ldr	r2, [pc, #456]	; (8004040 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	f240 80dd 	bls.w	8004036 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80d7 	beq.w	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	461a      	mov	r2, r3
 8003e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9a:	6093      	str	r3, [r2, #8]
 8003e9c:	e0cb      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	6093      	str	r3, [r2, #8]
 8003eba:	e0bc      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 80b7 	bne.w	8004036 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a5d      	ldr	r2, [pc, #372]	; (8004040 <PCD_EP_OutXfrComplete_int+0x210>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d90f      	bls.n	8003ef0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	e0a2      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f02:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	0159      	lsls	r1, r3, #5
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003f16:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4403      	add	r3, r0
 8003f26:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f2a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4403      	add	r3, r0
 8003f4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4419      	add	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4403      	add	r3, r0
 8003f64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f68:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d114      	bne.n	8003f9a <PCD_EP_OutXfrComplete_int+0x16a>
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d108      	bne.n	8003f9a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f92:	461a      	mov	r2, r3
 8003f94:	2101      	movs	r1, #1
 8003f96:	f004 fcbb 	bl	8008910 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f007 fb01 	bl	800b5a8 <HAL_PCD_DataOutStageCallback>
 8003fa6:	e046      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a26      	ldr	r2, [pc, #152]	; (8004044 <PCD_EP_OutXfrComplete_int+0x214>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d124      	bne.n	8003ffa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fcc:	6093      	str	r3, [r2, #8]
 8003fce:	e032      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2320      	movs	r3, #32
 8003fea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f007 fad8 	bl	800b5a8 <HAL_PCD_DataOutStageCallback>
 8003ff8:	e01d      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d114      	bne.n	800402a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d108      	bne.n	800402a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004022:	461a      	mov	r2, r3
 8004024:	2100      	movs	r1, #0
 8004026:	f004 fc73 	bl	8008910 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	4619      	mov	r1, r3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f007 fab9 	bl	800b5a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	4f54300a 	.word	0x4f54300a
 8004044:	4f54310a 	.word	0x4f54310a

08004048 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	333c      	adds	r3, #60	; 0x3c
 8004060:	3304      	adds	r3, #4
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d90e      	bls.n	800409c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004094:	461a      	mov	r2, r3
 8004096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f007 fa71 	bl	800b584 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d90c      	bls.n	80040c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d108      	bne.n	80040c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040bc:	461a      	mov	r2, r3
 80040be:	2101      	movs	r1, #1
 80040c0:	f004 fc26 	bl	8008910 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	4f54300a 	.word	0x4f54300a

080040d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	70fb      	strb	r3, [r7, #3]
 80040e0:	4613      	mov	r3, r2
 80040e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040f2:	883b      	ldrh	r3, [r7, #0]
 80040f4:	0419      	lsls	r1, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004100:	e028      	b.n	8004154 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	4413      	add	r3, r2
 800410e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004110:	2300      	movs	r3, #0
 8004112:	73fb      	strb	r3, [r7, #15]
 8004114:	e00d      	b.n	8004132 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	3340      	adds	r3, #64	; 0x40
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4413      	add	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	3301      	adds	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
 8004132:	7bfa      	ldrb	r2, [r7, #15]
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	3b01      	subs	r3, #1
 8004138:	429a      	cmp	r2, r3
 800413a:	d3ec      	bcc.n	8004116 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800413c:	883b      	ldrh	r3, [r7, #0]
 800413e:	0418      	lsls	r0, r3, #16
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6819      	ldr	r1, [r3, #0]
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	3b01      	subs	r3, #1
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	4302      	orrs	r2, r0
 800414c:	3340      	adds	r3, #64	; 0x40
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e262      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d075      	beq.n	80042a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ba:	4ba3      	ldr	r3, [pc, #652]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d00c      	beq.n	80041e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041c6:	4ba0      	ldr	r3, [pc, #640]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d112      	bne.n	80041f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d2:	4b9d      	ldr	r3, [pc, #628]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041de:	d10b      	bne.n	80041f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e0:	4b99      	ldr	r3, [pc, #612]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d05b      	beq.n	80042a4 <HAL_RCC_OscConfig+0x108>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d157      	bne.n	80042a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e23d      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004200:	d106      	bne.n	8004210 <HAL_RCC_OscConfig+0x74>
 8004202:	4b91      	ldr	r3, [pc, #580]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a90      	ldr	r2, [pc, #576]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e01d      	b.n	800424c <HAL_RCC_OscConfig+0xb0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0x98>
 800421a:	4b8b      	ldr	r3, [pc, #556]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a8a      	ldr	r2, [pc, #552]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b88      	ldr	r3, [pc, #544]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a87      	ldr	r2, [pc, #540]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0xb0>
 8004234:	4b84      	ldr	r3, [pc, #528]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a83      	ldr	r2, [pc, #524]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 800423a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4b81      	ldr	r3, [pc, #516]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a80      	ldr	r2, [pc, #512]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fc fa4e 	bl	80006f4 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800425c:	f7fc fa4a 	bl	80006f4 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e202      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426e:	4b76      	ldr	r3, [pc, #472]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0xc0>
 800427a:	e014      	b.n	80042a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fc fa3a 	bl	80006f4 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004284:	f7fc fa36 	bl	80006f4 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e1ee      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004296:	4b6c      	ldr	r3, [pc, #432]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0xe8>
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d063      	beq.n	800437a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042b2:	4b65      	ldr	r3, [pc, #404]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042be:	4b62      	ldr	r3, [pc, #392]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d11c      	bne.n	8004304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ca:	4b5f      	ldr	r3, [pc, #380]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d116      	bne.n	8004304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d6:	4b5c      	ldr	r3, [pc, #368]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_RCC_OscConfig+0x152>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d001      	beq.n	80042ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e1c2      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ee:	4b56      	ldr	r3, [pc, #344]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4952      	ldr	r1, [pc, #328]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004302:	e03a      	b.n	800437a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800430c:	4b4f      	ldr	r3, [pc, #316]	; (800444c <HAL_RCC_OscConfig+0x2b0>)
 800430e:	2201      	movs	r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fc f9ef 	bl	80006f4 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431a:	f7fc f9eb 	bl	80006f4 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e1a3      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432c:	4b46      	ldr	r3, [pc, #280]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004338:	4b43      	ldr	r3, [pc, #268]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4940      	ldr	r1, [pc, #256]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
 800434c:	e015      	b.n	800437a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434e:	4b3f      	ldr	r3, [pc, #252]	; (800444c <HAL_RCC_OscConfig+0x2b0>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fc f9ce 	bl	80006f4 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800435c:	f7fc f9ca 	bl	80006f4 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e182      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436e:	4b36      	ldr	r3, [pc, #216]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d030      	beq.n	80043e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d016      	beq.n	80043bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438e:	4b30      	ldr	r3, [pc, #192]	; (8004450 <HAL_RCC_OscConfig+0x2b4>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004394:	f7fc f9ae 	bl	80006f4 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439c:	f7fc f9aa 	bl	80006f4 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e162      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ae:	4b26      	ldr	r3, [pc, #152]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x200>
 80043ba:	e015      	b.n	80043e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043bc:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCC_OscConfig+0x2b4>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c2:	f7fc f997 	bl	80006f4 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ca:	f7fc f993 	bl	80006f4 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e14b      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043dc:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80043de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f0      	bne.n	80043ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 809e 	beq.w	8004532 <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f6:	2300      	movs	r3, #0
 80043f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fa:	4b13      	ldr	r3, [pc, #76]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004414:	6413      	str	r3, [r2, #64]	; 0x40
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_OscConfig+0x2b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d121      	bne.n	8004476 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <HAL_RCC_OscConfig+0x2b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a07      	ldr	r2, [pc, #28]	; (8004454 <HAL_RCC_OscConfig+0x2b8>)
 8004438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443e:	f7fc f959 	bl	80006f4 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004444:	e011      	b.n	800446a <HAL_RCC_OscConfig+0x2ce>
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
 800444c:	42470000 	.word	0x42470000
 8004450:	42470e80 	.word	0x42470e80
 8004454:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004458:	f7fc f94c 	bl	80006f4 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e104      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446a:	4b84      	ldr	r3, [pc, #528]	; (800467c <HAL_RCC_OscConfig+0x4e0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d106      	bne.n	800448c <HAL_RCC_OscConfig+0x2f0>
 800447e:	4b80      	ldr	r3, [pc, #512]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	4a7f      	ldr	r2, [pc, #508]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6713      	str	r3, [r2, #112]	; 0x70
 800448a:	e01c      	b.n	80044c6 <HAL_RCC_OscConfig+0x32a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b05      	cmp	r3, #5
 8004492:	d10c      	bne.n	80044ae <HAL_RCC_OscConfig+0x312>
 8004494:	4b7a      	ldr	r3, [pc, #488]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a79      	ldr	r2, [pc, #484]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 800449a:	f043 0304 	orr.w	r3, r3, #4
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	4b77      	ldr	r3, [pc, #476]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a76      	ldr	r2, [pc, #472]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	e00b      	b.n	80044c6 <HAL_RCC_OscConfig+0x32a>
 80044ae:	4b74      	ldr	r3, [pc, #464]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	4a73      	ldr	r2, [pc, #460]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ba:	4b71      	ldr	r3, [pc, #452]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a70      	ldr	r2, [pc, #448]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 80044c0:	f023 0304 	bic.w	r3, r3, #4
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d014      	beq.n	80044f8 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ce:	f7fc f911 	bl	80006f4 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	e009      	b.n	80044ea <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d6:	f7fc f90d 	bl	80006f4 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0c4      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ea:	4b65      	ldr	r3, [pc, #404]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0ef      	beq.n	80044d6 <HAL_RCC_OscConfig+0x33a>
 80044f6:	e013      	b.n	8004520 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f8:	f7fc f8fc 	bl	80006f4 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fe:	e009      	b.n	8004514 <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fc f8f8 	bl	80006f4 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e0af      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004514:	4b5a      	ldr	r3, [pc, #360]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1ef      	bne.n	8004500 <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d105      	bne.n	8004532 <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004526:	4b56      	ldr	r3, [pc, #344]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	4a55      	ldr	r2, [pc, #340]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 800452c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004530:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 809b 	beq.w	8004672 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800453c:	4b50      	ldr	r3, [pc, #320]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 030c 	and.w	r3, r3, #12
 8004544:	2b08      	cmp	r3, #8
 8004546:	d05c      	beq.n	8004602 <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d141      	bne.n	80045d4 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004550:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004556:	f7fc f8cd 	bl	80006f4 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455e:	f7fc f8c9 	bl	80006f4 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e081      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004570:	4b43      	ldr	r3, [pc, #268]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f0      	bne.n	800455e <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	019b      	lsls	r3, r3, #6
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	3b01      	subs	r3, #1
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	061b      	lsls	r3, r3, #24
 80045a0:	4937      	ldr	r1, [pc, #220]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a6:	4b37      	ldr	r3, [pc, #220]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ac:	f7fc f8a2 	bl	80006f4 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fc f89e 	bl	80006f4 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e056      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c6:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0x418>
 80045d2:	e04e      	b.n	8004672 <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d4:	4b2b      	ldr	r3, [pc, #172]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7fc f88b 	bl	80006f4 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e2:	f7fc f887 	bl	80006f4 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e03f      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f4:	4b22      	ldr	r3, [pc, #136]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f0      	bne.n	80045e2 <HAL_RCC_OscConfig+0x446>
 8004600:	e037      	b.n	8004672 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e032      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800460e:	4b1c      	ldr	r3, [pc, #112]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d028      	beq.n	800466e <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d121      	bne.n	800466e <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d11a      	bne.n	800466e <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800463e:	4013      	ands	r3, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004644:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004646:	4293      	cmp	r3, r2
 8004648:	d111      	bne.n	800466e <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	085b      	lsrs	r3, r3, #1
 8004656:	3b01      	subs	r3, #1
 8004658:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d107      	bne.n	800466e <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800466a:	429a      	cmp	r2, r3
 800466c:	d001      	beq.n	8004672 <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40007000 	.word	0x40007000
 8004680:	40023800 	.word	0x40023800
 8004684:	42470060 	.word	0x42470060

08004688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0cc      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800469c:	4b68      	ldr	r3, [pc, #416]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d90c      	bls.n	80046c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b65      	ldr	r3, [pc, #404]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b63      	ldr	r3, [pc, #396]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0b8      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046dc:	4b59      	ldr	r3, [pc, #356]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4a58      	ldr	r2, [pc, #352]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f4:	4b53      	ldr	r3, [pc, #332]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	4a52      	ldr	r2, [pc, #328]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004700:	4b50      	ldr	r3, [pc, #320]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	494d      	ldr	r1, [pc, #308]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d044      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d107      	bne.n	8004736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004726:	4b47      	ldr	r3, [pc, #284]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d119      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e07f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d003      	beq.n	8004746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004742:	2b03      	cmp	r3, #3
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004746:	4b3f      	ldr	r3, [pc, #252]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e06f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004756:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e067      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004766:	4b37      	ldr	r3, [pc, #220]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f023 0203 	bic.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4934      	ldr	r1, [pc, #208]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004778:	f7fb ffbc 	bl	80006f4 <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	e00a      	b.n	8004796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004780:	f7fb ffb8 	bl	80006f4 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e04f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	4b2b      	ldr	r3, [pc, #172]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 020c 	and.w	r2, r3, #12
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1eb      	bne.n	8004780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047a8:	4b25      	ldr	r3, [pc, #148]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d20c      	bcs.n	80047d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b22      	ldr	r3, [pc, #136]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047be:	4b20      	ldr	r3, [pc, #128]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e032      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047dc:	4b19      	ldr	r3, [pc, #100]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4916      	ldr	r1, [pc, #88]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fa:	4b12      	ldr	r3, [pc, #72]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	490e      	ldr	r1, [pc, #56]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800480e:	f000 f82d 	bl	800486c <HAL_RCC_GetSysClockFreq>
 8004812:	4602      	mov	r2, r0
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	490a      	ldr	r1, [pc, #40]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 8004820:	5ccb      	ldrb	r3, [r1, r3]
 8004822:	fa22 f303 	lsr.w	r3, r2, r3
 8004826:	4a09      	ldr	r2, [pc, #36]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fb ff1c 	bl	800066c <HAL_InitTick>

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40023c00 	.word	0x40023c00
 8004844:	40023800 	.word	0x40023800
 8004848:	0800be24 	.word	0x0800be24
 800484c:	20000118 	.word	0x20000118
 8004850:	20000000 	.word	0x20000000

08004854 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004858:	4b03      	ldr	r3, [pc, #12]	; (8004868 <HAL_RCC_EnableCSS+0x14>)
 800485a:	2201      	movs	r2, #1
 800485c:	601a      	str	r2, [r3, #0]
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	4247004c 	.word	0x4247004c

0800486c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800486c:	b5b0      	push	{r4, r5, r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004872:	2100      	movs	r1, #0
 8004874:	6079      	str	r1, [r7, #4]
 8004876:	2100      	movs	r1, #0
 8004878:	60f9      	str	r1, [r7, #12]
 800487a:	2100      	movs	r1, #0
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800487e:	2100      	movs	r1, #0
 8004880:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004882:	4952      	ldr	r1, [pc, #328]	; (80049cc <HAL_RCC_GetSysClockFreq+0x160>)
 8004884:	6889      	ldr	r1, [r1, #8]
 8004886:	f001 010c 	and.w	r1, r1, #12
 800488a:	2908      	cmp	r1, #8
 800488c:	d00d      	beq.n	80048aa <HAL_RCC_GetSysClockFreq+0x3e>
 800488e:	2908      	cmp	r1, #8
 8004890:	f200 8094 	bhi.w	80049bc <HAL_RCC_GetSysClockFreq+0x150>
 8004894:	2900      	cmp	r1, #0
 8004896:	d002      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x32>
 8004898:	2904      	cmp	r1, #4
 800489a:	d003      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x38>
 800489c:	e08e      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800489e:	4b4c      	ldr	r3, [pc, #304]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80048a0:	60bb      	str	r3, [r7, #8]
       break;
 80048a2:	e08e      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048a4:	4b4b      	ldr	r3, [pc, #300]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80048a6:	60bb      	str	r3, [r7, #8]
      break;
 80048a8:	e08b      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048aa:	4948      	ldr	r1, [pc, #288]	; (80049cc <HAL_RCC_GetSysClockFreq+0x160>)
 80048ac:	6849      	ldr	r1, [r1, #4]
 80048ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80048b2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048b4:	4945      	ldr	r1, [pc, #276]	; (80049cc <HAL_RCC_GetSysClockFreq+0x160>)
 80048b6:	6849      	ldr	r1, [r1, #4]
 80048b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80048bc:	2900      	cmp	r1, #0
 80048be:	d024      	beq.n	800490a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c0:	4942      	ldr	r1, [pc, #264]	; (80049cc <HAL_RCC_GetSysClockFreq+0x160>)
 80048c2:	6849      	ldr	r1, [r1, #4]
 80048c4:	0989      	lsrs	r1, r1, #6
 80048c6:	4608      	mov	r0, r1
 80048c8:	f04f 0100 	mov.w	r1, #0
 80048cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80048d0:	f04f 0500 	mov.w	r5, #0
 80048d4:	ea00 0204 	and.w	r2, r0, r4
 80048d8:	ea01 0305 	and.w	r3, r1, r5
 80048dc:	493d      	ldr	r1, [pc, #244]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80048de:	fb01 f003 	mul.w	r0, r1, r3
 80048e2:	2100      	movs	r1, #0
 80048e4:	fb01 f102 	mul.w	r1, r1, r2
 80048e8:	1844      	adds	r4, r0, r1
 80048ea:	493a      	ldr	r1, [pc, #232]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80048ec:	fba2 0101 	umull	r0, r1, r2, r1
 80048f0:	1863      	adds	r3, r4, r1
 80048f2:	4619      	mov	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	f7fb fc6c 	bl	80001d8 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e04a      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490a:	4b30      	ldr	r3, [pc, #192]	; (80049cc <HAL_RCC_GetSysClockFreq+0x160>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	099b      	lsrs	r3, r3, #6
 8004910:	461a      	mov	r2, r3
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	f240 10ff 	movw	r0, #511	; 0x1ff
 800491a:	f04f 0100 	mov.w	r1, #0
 800491e:	ea02 0400 	and.w	r4, r2, r0
 8004922:	ea03 0501 	and.w	r5, r3, r1
 8004926:	4620      	mov	r0, r4
 8004928:	4629      	mov	r1, r5
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	014b      	lsls	r3, r1, #5
 8004934:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004938:	0142      	lsls	r2, r0, #5
 800493a:	4610      	mov	r0, r2
 800493c:	4619      	mov	r1, r3
 800493e:	1b00      	subs	r0, r0, r4
 8004940:	eb61 0105 	sbc.w	r1, r1, r5
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	018b      	lsls	r3, r1, #6
 800494e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004952:	0182      	lsls	r2, r0, #6
 8004954:	1a12      	subs	r2, r2, r0
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	f04f 0000 	mov.w	r0, #0
 800495e:	f04f 0100 	mov.w	r1, #0
 8004962:	00d9      	lsls	r1, r3, #3
 8004964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004968:	00d0      	lsls	r0, r2, #3
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	1912      	adds	r2, r2, r4
 8004970:	eb45 0303 	adc.w	r3, r5, r3
 8004974:	f04f 0000 	mov.w	r0, #0
 8004978:	f04f 0100 	mov.w	r1, #0
 800497c:	0299      	lsls	r1, r3, #10
 800497e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004982:	0290      	lsls	r0, r2, #10
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	461a      	mov	r2, r3
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	f7fb fc20 	bl	80001d8 <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4613      	mov	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <HAL_RCC_GetSysClockFreq+0x160>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	3301      	adds	r3, #1
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	60bb      	str	r3, [r7, #8]
      break;
 80049ba:	e002      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80049be:	60bb      	str	r3, [r7, #8]
      break;
 80049c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c2:	68bb      	ldr	r3, [r7, #8]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bdb0      	pop	{r4, r5, r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	00f42400 	.word	0x00f42400
 80049d4:	016e3600 	.word	0x016e3600

080049d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049dc:	4b03      	ldr	r3, [pc, #12]	; (80049ec <HAL_RCC_GetHCLKFreq+0x14>)
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	20000118 	.word	0x20000118

080049f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049f4:	f7ff fff0 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	0a9b      	lsrs	r3, r3, #10
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4903      	ldr	r1, [pc, #12]	; (8004a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40023800 	.word	0x40023800
 8004a14:	0800be34 	.word	0x0800be34

08004a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a1c:	f7ff ffdc 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	0b5b      	lsrs	r3, r3, #13
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4903      	ldr	r1, [pc, #12]	; (8004a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a2e:	5ccb      	ldrb	r3, [r1, r3]
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	0800be34 	.word	0x0800be34

08004a40 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004a44:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4c:	2b80      	cmp	r3, #128	; 0x80
 8004a4e:	d104      	bne.n	8004a5a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004a50:	f000 f80a 	bl	8004a68 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004a54:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004a56:	2280      	movs	r2, #128	; 0x80
 8004a58:	701a      	strb	r2, [r3, #0]
  }
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40023800 	.word	0x40023800
 8004a64:	4002380e 	.word	0x4002380e

08004a68 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d038      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004aa0:	4b68      	ldr	r3, [pc, #416]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aa6:	f7fb fe25 	bl	80006f4 <HAL_GetTick>
 8004aaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aae:	f7fb fe21 	bl	80006f4 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0bc      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac0:	4b61      	ldr	r3, [pc, #388]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	071b      	lsls	r3, r3, #28
 8004ade:	495a      	ldr	r1, [pc, #360]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ae6:	4b57      	ldr	r3, [pc, #348]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aec:	f7fb fe02 	bl	80006f4 <HAL_GetTick>
 8004af0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004af4:	f7fb fdfe 	bl	80006f4 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e099      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b06:	4b50      	ldr	r3, [pc, #320]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 8082 	beq.w	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	4b48      	ldr	r3, [pc, #288]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	4a47      	ldr	r2, [pc, #284]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b30:	4b45      	ldr	r3, [pc, #276]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b3c:	4b43      	ldr	r3, [pc, #268]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a42      	ldr	r2, [pc, #264]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b46:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b48:	f7fb fdd4 	bl	80006f4 <HAL_GetTick>
 8004b4c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b50:	f7fb fdd0 	bl	80006f4 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e06b      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b62:	4b3a      	ldr	r3, [pc, #232]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b6e:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b76:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d02e      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x164>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d027      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b8c:	4b2e      	ldr	r3, [pc, #184]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b94:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b96:	4b2e      	ldr	r3, [pc, #184]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b98:	2201      	movs	r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b9c:	4b2c      	ldr	r3, [pc, #176]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ba2:	4a29      	ldr	r2, [pc, #164]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ba8:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d113      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fb fd9e 	bl	80006f4 <HAL_GetTick>
 8004bb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bba:	e009      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bbc:	f7fb fd9a 	bl	80006f4 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e034      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd0:	4b1d      	ldr	r3, [pc, #116]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ef      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004be8:	d10d      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004bea:	4b17      	ldr	r3, [pc, #92]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfe:	4912      	ldr	r1, [pc, #72]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	608b      	str	r3, [r1, #8]
 8004c04:	e005      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8004c06:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	4a0f      	ldr	r2, [pc, #60]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c10:	6093      	str	r3, [r2, #8]
 8004c12:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c1e:	490a      	ldr	r1, [pc, #40]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	7d1a      	ldrb	r2, [r3, #20]
 8004c34:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004c36:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	42470068 	.word	0x42470068
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	40007000 	.word	0x40007000
 8004c50:	42470e40 	.word	0x42470e40
 8004c54:	424711e0 	.word	0x424711e0

08004c58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e083      	b.n	8004d72 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	7f5b      	ldrb	r3, [r3, #29]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d105      	bne.n	8004c80 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f006 f9b4 	bl	800afe8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	22ca      	movs	r2, #202	; 0xca
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2253      	movs	r2, #83	; 0x53
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f897 	bl	8004dca <RTC_EnterInitMode>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d008      	beq.n	8004cb4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	22ff      	movs	r2, #255	; 0xff
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2204      	movs	r2, #4
 8004cae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e05e      	b.n	8004d72 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6899      	ldr	r1, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68d2      	ldr	r2, [r2, #12]
 8004cee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6919      	ldr	r1, [r3, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	041a      	lsls	r2, r3, #16
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d12:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10e      	bne.n	8004d40 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f829 	bl	8004d7a <HAL_RTC_WaitForSynchro>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d008      	beq.n	8004d40 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	22ff      	movs	r2, #255	; 0xff
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2204      	movs	r2, #4
 8004d3a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e018      	b.n	8004d72 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	22ff      	movs	r2, #255	; 0xff
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004d70:	2300      	movs	r3, #0
  }
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d94:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d96:	f7fb fcad 	bl	80006f4 <HAL_GetTick>
 8004d9a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004d9c:	e009      	b.n	8004db2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d9e:	f7fb fca9 	bl	80006f4 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dac:	d901      	bls.n	8004db2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e007      	b.n	8004dc2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0ee      	beq.n	8004d9e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d119      	bne.n	8004e18 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dee:	f7fb fc81 	bl	80006f4 <HAL_GetTick>
 8004df2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004df4:	e009      	b.n	8004e0a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004df6:	f7fb fc7d 	bl	80006f4 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e04:	d901      	bls.n	8004e0a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e007      	b.n	8004e1a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ee      	beq.n	8004df6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e022      	b.n	8004e7a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d105      	bne.n	8004e4c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f006 f8fa 	bl	800b040 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f815 	bl	8004e84 <HAL_SD_InitCard>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e00a      	b.n	8004e7a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004e84:	b5b0      	push	{r4, r5, r7, lr}
 8004e86:	b08e      	sub	sp, #56	; 0x38
 8004e88:	af04      	add	r7, sp, #16
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004ea0:	2376      	movs	r3, #118	; 0x76
 8004ea2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681d      	ldr	r5, [r3, #0]
 8004ea8:	466c      	mov	r4, sp
 8004eaa:	f107 0314 	add.w	r3, r7, #20
 8004eae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004eb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004eb6:	f107 0308 	add.w	r3, r7, #8
 8004eba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f001 fda5 	bl	8006a0c <SDIO_Init>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e04c      	b.n	8004f6e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004ed4:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <HAL_SD_InitCard+0xf4>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 fdcc 	bl	8006a7c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004ee4:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <HAL_SD_InitCard+0xf4>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fb52 	bl	8005594 <SD_PowerON>
 8004ef0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00b      	beq.n	8004f10 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e02e      	b.n	8004f6e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fa73 	bl	80053fc <SD_InitCard>
 8004f16:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e01b      	b.n	8004f6e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f001 fe2f 	bl	8006ba2 <SDMMC_CmdBlockLength>
 8004f44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00f      	beq.n	8004f6c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <HAL_SD_InitCard+0xf8>)
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3728      	adds	r7, #40	; 0x28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bdb0      	pop	{r4, r5, r7, pc}
 8004f76:	bf00      	nop
 8004f78:	422580a0 	.word	0x422580a0
 8004f7c:	004005ff 	.word	0x004005ff

08004f80 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f8e:	0f9b      	lsrs	r3, r3, #30
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9a:	0e9b      	lsrs	r3, r3, #26
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fac:	0e1b      	lsrs	r3, r3, #24
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fbe:	0c1b      	lsrs	r3, r3, #16
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fca:	0a1b      	lsrs	r3, r3, #8
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fe0:	0d1b      	lsrs	r3, r3, #20
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fec:	0c1b      	lsrs	r3, r3, #16
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ffe:	0bdb      	lsrs	r3, r3, #15
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	b2da      	uxtb	r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005010:	0b9b      	lsrs	r3, r3, #14
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	b2da      	uxtb	r2, r3
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005022:	0b5b      	lsrs	r3, r3, #13
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	b2da      	uxtb	r2, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005034:	0b1b      	lsrs	r3, r3, #12
 8005036:	b2db      	uxtb	r3, r3
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	b2da      	uxtb	r2, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2200      	movs	r2, #0
 8005046:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504c:	2b00      	cmp	r3, #0
 800504e:	d163      	bne.n	8005118 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005054:	009a      	lsls	r2, r3, #2
 8005056:	f640 73fc 	movw	r3, #4092	; 0xffc
 800505a:	4013      	ands	r3, r2
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005060:	0f92      	lsrs	r2, r2, #30
 8005062:	431a      	orrs	r2, r3
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800506c:	0edb      	lsrs	r3, r3, #27
 800506e:	b2db      	uxtb	r3, r3
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	b2da      	uxtb	r2, r3
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800507e:	0e1b      	lsrs	r3, r3, #24
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	b2da      	uxtb	r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005090:	0d5b      	lsrs	r3, r3, #21
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	b2da      	uxtb	r2, r3
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a2:	0c9b      	lsrs	r3, r3, #18
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b4:	0bdb      	lsrs	r3, r3, #15
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	7e1b      	ldrb	r3, [r3, #24]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	3302      	adds	r3, #2
 80050d8:	2201      	movs	r2, #1
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80050e2:	fb02 f203 	mul.w	r2, r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	7a1b      	ldrb	r3, [r3, #8]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	2201      	movs	r2, #1
 80050f6:	409a      	lsls	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005104:	0a52      	lsrs	r2, r2, #9
 8005106:	fb02 f203 	mul.w	r2, r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005114:	661a      	str	r2, [r3, #96]	; 0x60
 8005116:	e031      	b.n	800517c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511c:	2b01      	cmp	r3, #1
 800511e:	d11d      	bne.n	800515c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005124:	041b      	lsls	r3, r3, #16
 8005126:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800512e:	0c1b      	lsrs	r3, r3, #16
 8005130:	431a      	orrs	r2, r3
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	3301      	adds	r3, #1
 800513c:	029a      	lsls	r2, r3, #10
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005150:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	661a      	str	r2, [r3, #96]	; 0x60
 800515a:	e00f      	b.n	800517c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a58      	ldr	r2, [pc, #352]	; (80052c4 <HAL_SD_GetCardCSD+0x344>)
 8005162:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e09d      	b.n	80052b8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005180:	0b9b      	lsrs	r3, r3, #14
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	b2da      	uxtb	r2, r3
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005192:	09db      	lsrs	r3, r3, #7
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519a:	b2da      	uxtb	r2, r3
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	0fdb      	lsrs	r3, r3, #31
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c0:	0f5b      	lsrs	r3, r3, #29
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	0e9b      	lsrs	r3, r3, #26
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e4:	0d9b      	lsrs	r3, r3, #22
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	0d5b      	lsrs	r3, r3, #21
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	0c1b      	lsrs	r3, r3, #16
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	b2da      	uxtb	r2, r3
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005226:	0bdb      	lsrs	r3, r3, #15
 8005228:	b2db      	uxtb	r3, r3
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	b2da      	uxtb	r2, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523a:	0b9b      	lsrs	r3, r3, #14
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	b2da      	uxtb	r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	0b5b      	lsrs	r3, r3, #13
 8005250:	b2db      	uxtb	r3, r3
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	b2da      	uxtb	r2, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	0b1b      	lsrs	r3, r3, #12
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	b2da      	uxtb	r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	0a9b      	lsrs	r3, r3, #10
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	b2da      	uxtb	r2, r3
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	b2da      	uxtb	r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	085b      	lsrs	r3, r3, #1
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	004005ff 	.word	0x004005ff

080052c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80052c8:	b5b0      	push	{r4, r5, r7, lr}
 80052ca:	b08e      	sub	sp, #56	; 0x38
 80052cc:	af04      	add	r7, sp, #16
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2203      	movs	r2, #3
 80052dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d02e      	beq.n	8005346 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ee:	d106      	bne.n	80052fe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	639a      	str	r2, [r3, #56]	; 0x38
 80052fc:	e029      	b.n	8005352 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005304:	d10a      	bne.n	800531c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f9d2 	bl	80056b0 <SD_WideBus_Enable>
 800530c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	639a      	str	r2, [r3, #56]	; 0x38
 800531a:	e01a      	b.n	8005352 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fa0f 	bl	8005746 <SD_WideBus_Disable>
 8005328:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	639a      	str	r2, [r3, #56]	; 0x38
 8005336:	e00c      	b.n	8005352 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	639a      	str	r2, [r3, #56]	; 0x38
 8005344:	e005      	b.n	8005352 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00b      	beq.n	8005372 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a26      	ldr	r2, [pc, #152]	; (80053f8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005360:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005370:	e01f      	b.n	80053b2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681d      	ldr	r5, [r3, #0]
 8005398:	466c      	mov	r4, sp
 800539a:	f107 0314 	add.w	r3, r7, #20
 800539e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053a6:	f107 0308 	add.w	r3, r7, #8
 80053aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053ac:	4628      	mov	r0, r5
 80053ae:	f001 fb2d 	bl	8006a0c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 fbf1 	bl	8006ba2 <SDMMC_CmdBlockLength>
 80053c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00c      	beq.n	80053e2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a0a      	ldr	r2, [pc, #40]	; (80053f8 <HAL_SD_ConfigWideBusOperation+0x130>)
 80053ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80053ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3728      	adds	r7, #40	; 0x28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bdb0      	pop	{r4, r5, r7, pc}
 80053f6:	bf00      	nop
 80053f8:	004005ff 	.word	0x004005ff

080053fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80053fc:	b5b0      	push	{r4, r5, r7, lr}
 80053fe:	b094      	sub	sp, #80	; 0x50
 8005400:	af04      	add	r7, sp, #16
 8005402:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005404:	2301      	movs	r3, #1
 8005406:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f001 fb44 	bl	8006a9a <SDIO_GetPowerState>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d102      	bne.n	800541e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005418:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800541c:	e0b6      	b.n	800558c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	2b03      	cmp	r3, #3
 8005424:	d02f      	beq.n	8005486 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f001 fcc3 	bl	8006db6 <SDMMC_CmdSendCID>
 8005430:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <SD_InitCard+0x40>
    {
      return errorstate;
 8005438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543a:	e0a7      	b.n	800558c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f001 fb6e 	bl	8006b24 <SDIO_GetResponse>
 8005448:	4602      	mov	r2, r0
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2104      	movs	r1, #4
 8005454:	4618      	mov	r0, r3
 8005456:	f001 fb65 	bl	8006b24 <SDIO_GetResponse>
 800545a:	4602      	mov	r2, r0
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2108      	movs	r1, #8
 8005466:	4618      	mov	r0, r3
 8005468:	f001 fb5c 	bl	8006b24 <SDIO_GetResponse>
 800546c:	4602      	mov	r2, r0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	210c      	movs	r1, #12
 8005478:	4618      	mov	r0, r3
 800547a:	f001 fb53 	bl	8006b24 <SDIO_GetResponse>
 800547e:	4602      	mov	r2, r0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	2b03      	cmp	r3, #3
 800548c:	d00d      	beq.n	80054aa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f107 020e 	add.w	r2, r7, #14
 8005496:	4611      	mov	r1, r2
 8005498:	4618      	mov	r0, r3
 800549a:	f001 fcc9 	bl	8006e30 <SDMMC_CmdSetRelAdd>
 800549e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80054a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <SD_InitCard+0xae>
    {
      return errorstate;
 80054a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a8:	e070      	b.n	800558c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d036      	beq.n	8005520 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80054b2:	89fb      	ldrh	r3, [r7, #14]
 80054b4:	461a      	mov	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c2:	041b      	lsls	r3, r3, #16
 80054c4:	4619      	mov	r1, r3
 80054c6:	4610      	mov	r0, r2
 80054c8:	f001 fc93 	bl	8006df2 <SDMMC_CmdSendCSD>
 80054cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80054ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80054d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d6:	e059      	b.n	800558c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2100      	movs	r1, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 fb20 	bl	8006b24 <SDIO_GetResponse>
 80054e4:	4602      	mov	r2, r0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2104      	movs	r1, #4
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 fb17 	bl	8006b24 <SDIO_GetResponse>
 80054f6:	4602      	mov	r2, r0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2108      	movs	r1, #8
 8005502:	4618      	mov	r0, r3
 8005504:	f001 fb0e 	bl	8006b24 <SDIO_GetResponse>
 8005508:	4602      	mov	r2, r0
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	210c      	movs	r1, #12
 8005514:	4618      	mov	r0, r3
 8005516:	f001 fb05 	bl	8006b24 <SDIO_GetResponse>
 800551a:	4602      	mov	r2, r0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2104      	movs	r1, #4
 8005526:	4618      	mov	r0, r3
 8005528:	f001 fafc 	bl	8006b24 <SDIO_GetResponse>
 800552c:	4603      	mov	r3, r0
 800552e:	0d1a      	lsrs	r2, r3, #20
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005534:	f107 0310 	add.w	r3, r7, #16
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff fd20 	bl	8004f80 <HAL_SD_GetCardCSD>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005546:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800554a:	e01f      	b.n	800558c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	461a      	mov	r2, r3
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	4608      	mov	r0, r1
 800555e:	f001 fb42 	bl	8006be6 <SDMMC_CmdSelDesel>
 8005562:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <SD_InitCard+0x172>
  {
    return errorstate;
 800556a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556c:	e00e      	b.n	800558c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681d      	ldr	r5, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	466c      	mov	r4, sp
 8005576:	f103 0210 	add.w	r2, r3, #16
 800557a:	ca07      	ldmia	r2, {r0, r1, r2}
 800557c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005580:	3304      	adds	r3, #4
 8005582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005584:	4628      	mov	r0, r5
 8005586:	f001 fa41 	bl	8006a0c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3740      	adds	r7, #64	; 0x40
 8005590:	46bd      	mov	sp, r7
 8005592:	bdb0      	pop	{r4, r5, r7, pc}

08005594 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	2300      	movs	r3, #0
 80055a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 fb3d 	bl	8006c2c <SDMMC_CmdGoIdleState>
 80055b2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <SD_PowerON+0x2a>
  {
    return errorstate;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	e072      	b.n	80056a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f001 fb50 	bl	8006c68 <SDMMC_CmdOperCond>
 80055c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00d      	beq.n	80055ec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 fb26 	bl	8006c2c <SDMMC_CmdGoIdleState>
 80055e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	e05b      	b.n	80056a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d137      	bne.n	800566a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2100      	movs	r1, #0
 8005600:	4618      	mov	r0, r3
 8005602:	f001 fb50 	bl	8006ca6 <SDMMC_CmdAppCommand>
 8005606:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d02d      	beq.n	800566a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800560e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005612:	e047      	b.n	80056a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2100      	movs	r1, #0
 800561a:	4618      	mov	r0, r3
 800561c:	f001 fb43 	bl	8006ca6 <SDMMC_CmdAppCommand>
 8005620:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <SD_PowerON+0x98>
    {
      return errorstate;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	e03b      	b.n	80056a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	491e      	ldr	r1, [pc, #120]	; (80056ac <SD_PowerON+0x118>)
 8005632:	4618      	mov	r0, r3
 8005634:	f001 fb59 	bl	8006cea <SDMMC_CmdAppOperCommand>
 8005638:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005640:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005644:	e02e      	b.n	80056a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2100      	movs	r1, #0
 800564c:	4618      	mov	r0, r3
 800564e:	f001 fa69 	bl	8006b24 <SDIO_GetResponse>
 8005652:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	0fdb      	lsrs	r3, r3, #31
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <SD_PowerON+0xcc>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <SD_PowerON+0xce>
 8005660:	2300      	movs	r3, #0
 8005662:	613b      	str	r3, [r7, #16]

    count++;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	3301      	adds	r3, #1
 8005668:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005670:	4293      	cmp	r3, r2
 8005672:	d802      	bhi.n	800567a <SD_PowerON+0xe6>
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0cc      	beq.n	8005614 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005680:	4293      	cmp	r3, r2
 8005682:	d902      	bls.n	800568a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005688:	e00c      	b.n	80056a4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	645a      	str	r2, [r3, #68]	; 0x44
 800569a:	e002      	b.n	80056a2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	c1100000 	.word	0xc1100000

080056b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2100      	movs	r1, #0
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 fa2c 	bl	8006b24 <SDIO_GetResponse>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056d6:	d102      	bne.n	80056de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056dc:	e02f      	b.n	800573e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80056de:	f107 030c 	add.w	r3, r7, #12
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f879 	bl	80057dc <SD_FindSCR>
 80056ea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	e023      	b.n	800573e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01c      	beq.n	800573a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005708:	041b      	lsls	r3, r3, #16
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f001 faca 	bl	8006ca6 <SDMMC_CmdAppCommand>
 8005712:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	e00f      	b.n	800573e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2102      	movs	r1, #2
 8005724:	4618      	mov	r0, r3
 8005726:	f001 fb03 	bl	8006d30 <SDMMC_CmdBusWidth>
 800572a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	e003      	b.n	800573e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005736:	2300      	movs	r3, #0
 8005738:	e001      	b.n	800573e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800573a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f001 f9e1 	bl	8006b24 <SDIO_GetResponse>
 8005762:	4603      	mov	r3, r0
 8005764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800576c:	d102      	bne.n	8005774 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800576e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005772:	e02f      	b.n	80057d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005774:	f107 030c 	add.w	r3, r7, #12
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f82e 	bl	80057dc <SD_FindSCR>
 8005780:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	e023      	b.n	80057d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01c      	beq.n	80057d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f001 fa7f 	bl	8006ca6 <SDMMC_CmdAppCommand>
 80057a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	e00f      	b.n	80057d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2100      	movs	r1, #0
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 fab8 	bl	8006d30 <SDMMC_CmdBusWidth>
 80057c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	e003      	b.n	80057d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	e001      	b.n	80057d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80057d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80057dc:	b590      	push	{r4, r7, lr}
 80057de:	b08f      	sub	sp, #60	; 0x3c
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80057e6:	f7fa ff85 	bl	80006f4 <HAL_GetTick>
 80057ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80057f0:	2300      	movs	r3, #0
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2108      	movs	r1, #8
 8005802:	4618      	mov	r0, r3
 8005804:	f001 f9cd 	bl	8006ba2 <SDMMC_CmdBlockLength>
 8005808:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	e0b2      	b.n	800597a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f001 fa40 	bl	8006ca6 <SDMMC_CmdAppCommand>
 8005826:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <SD_FindSCR+0x56>
  {
    return errorstate;
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	e0a3      	b.n	800597a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005832:	f04f 33ff 	mov.w	r3, #4294967295
 8005836:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005838:	2308      	movs	r3, #8
 800583a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800583c:	2330      	movs	r3, #48	; 0x30
 800583e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005840:	2302      	movs	r3, #2
 8005842:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005844:	2300      	movs	r3, #0
 8005846:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005848:	2301      	movs	r3, #1
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f107 0210 	add.w	r2, r7, #16
 8005854:	4611      	mov	r1, r2
 8005856:	4618      	mov	r0, r3
 8005858:	f001 f977 	bl	8006b4a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f001 fa87 	bl	8006d74 <SDMMC_CmdSendSCR>
 8005866:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	2b00      	cmp	r3, #0
 800586c:	d02a      	beq.n	80058c4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	e083      	b.n	800597a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00f      	beq.n	80058a0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6819      	ldr	r1, [r3, #0]
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	f107 0208 	add.w	r2, r7, #8
 800588c:	18d4      	adds	r4, r2, r3
 800588e:	4608      	mov	r0, r1
 8005890:	f001 f8e7 	bl	8006a62 <SDIO_ReadFIFO>
 8005894:	4603      	mov	r3, r0
 8005896:	6023      	str	r3, [r4, #0]
      index++;
 8005898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589a:	3301      	adds	r3, #1
 800589c:	637b      	str	r3, [r7, #52]	; 0x34
 800589e:	e006      	b.n	80058ae <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d012      	beq.n	80058d4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80058ae:	f7fa ff21 	bl	80006f4 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058bc:	d102      	bne.n	80058c4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80058be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058c2:	e05a      	b.n	800597a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ca:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0cf      	beq.n	8005872 <SD_FindSCR+0x96>
 80058d2:	e000      	b.n	80058d6 <SD_FindSCR+0xfa>
      break;
 80058d4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2208      	movs	r2, #8
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80058ec:	2308      	movs	r3, #8
 80058ee:	e044      	b.n	800597a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d005      	beq.n	800590a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2202      	movs	r2, #2
 8005904:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005906:	2302      	movs	r3, #2
 8005908:	e037      	b.n	800597a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2220      	movs	r2, #32
 800591e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005920:	2320      	movs	r3, #32
 8005922:	e02a      	b.n	800597a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f240 523a 	movw	r2, #1338	; 0x53a
 800592c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	061a      	lsls	r2, r3, #24
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800593a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	0a1b      	lsrs	r3, r3, #8
 8005940:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005944:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	0e1b      	lsrs	r3, r3, #24
 800594a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	601a      	str	r2, [r3, #0]
    scr++;
 8005950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005952:	3304      	adds	r3, #4
 8005954:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	061a      	lsls	r2, r3, #24
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005962:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	0a1b      	lsrs	r3, r3, #8
 8005968:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800596c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	0e1b      	lsrs	r3, r3, #24
 8005972:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	373c      	adds	r7, #60	; 0x3c
 800597e:	46bd      	mov	sp, r7
 8005980:	bd90      	pop	{r4, r7, pc}

08005982 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e041      	b.n	8005a18 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d106      	bne.n	80059ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f005 fbd3 	bl	800b154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3304      	adds	r3, #4
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f000 fae5 	bl	8005f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e041      	b.n	8005ab6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f839 	bl	8005abe <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	f000 fa96 	bl	8005f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d122      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d11b      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f06f 0202 	mvn.w	r2, #2
 8005afe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fa1c 	bl	8005f52 <HAL_TIM_IC_CaptureCallback>
 8005b1a:	e005      	b.n	8005b28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fa0e 	bl	8005f3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa1f 	bl	8005f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d122      	bne.n	8005b82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d11b      	bne.n	8005b82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f06f 0204 	mvn.w	r2, #4
 8005b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f9f2 	bl	8005f52 <HAL_TIM_IC_CaptureCallback>
 8005b6e:	e005      	b.n	8005b7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f9e4 	bl	8005f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f9f5 	bl	8005f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d122      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d11b      	bne.n	8005bd6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f06f 0208 	mvn.w	r2, #8
 8005ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2204      	movs	r2, #4
 8005bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f9c8 	bl	8005f52 <HAL_TIM_IC_CaptureCallback>
 8005bc2:	e005      	b.n	8005bd0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f9ba 	bl	8005f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f9cb 	bl	8005f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d122      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d11b      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f06f 0210 	mvn.w	r2, #16
 8005bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2208      	movs	r2, #8
 8005c00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d003      	beq.n	8005c18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f99e 	bl	8005f52 <HAL_TIM_IC_CaptureCallback>
 8005c16:	e005      	b.n	8005c24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f990 	bl	8005f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9a1 	bl	8005f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d10e      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d107      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f06f 0201 	mvn.w	r2, #1
 8005c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f96a 	bl	8005f2a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c60:	2b80      	cmp	r3, #128	; 0x80
 8005c62:	d10e      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6e:	2b80      	cmp	r3, #128	; 0x80
 8005c70:	d107      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fca5 	bl	80065cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d10e      	bne.n	8005cae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d107      	bne.n	8005cae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f966 	bl	8005f7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d10e      	bne.n	8005cda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d107      	bne.n	8005cda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0220 	mvn.w	r2, #32
 8005cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fc6f 	bl	80065b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e048      	b.n	8005d94 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b0c      	cmp	r3, #12
 8005d0e:	d839      	bhi.n	8005d84 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005d10:	a201      	add	r2, pc, #4	; (adr r2, 8005d18 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d16:	bf00      	nop
 8005d18:	08005d4d 	.word	0x08005d4d
 8005d1c:	08005d85 	.word	0x08005d85
 8005d20:	08005d85 	.word	0x08005d85
 8005d24:	08005d85 	.word	0x08005d85
 8005d28:	08005d5b 	.word	0x08005d5b
 8005d2c:	08005d85 	.word	0x08005d85
 8005d30:	08005d85 	.word	0x08005d85
 8005d34:	08005d85 	.word	0x08005d85
 8005d38:	08005d69 	.word	0x08005d69
 8005d3c:	08005d85 	.word	0x08005d85
 8005d40:	08005d85 	.word	0x08005d85
 8005d44:	08005d85 	.word	0x08005d85
 8005d48:	08005d77 	.word	0x08005d77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f99c 	bl	8006090 <TIM_OC1_SetConfig>
      break;
 8005d58:	e017      	b.n	8005d8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 f9fb 	bl	800615c <TIM_OC2_SetConfig>
      break;
 8005d66:	e010      	b.n	8005d8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fa60 	bl	8006234 <TIM_OC3_SetConfig>
      break;
 8005d74:	e009      	b.n	8005d8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fac3 	bl	8006308 <TIM_OC4_SetConfig>
      break;
 8005d82:	e002      	b.n	8005d8a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	75fb      	strb	r3, [r7, #23]
      break;
 8005d88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_TIM_ConfigClockSource+0x1c>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e0b4      	b.n	8005f22 <HAL_TIM_ConfigClockSource+0x186>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df0:	d03e      	beq.n	8005e70 <HAL_TIM_ConfigClockSource+0xd4>
 8005df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df6:	f200 8087 	bhi.w	8005f08 <HAL_TIM_ConfigClockSource+0x16c>
 8005dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfe:	f000 8086 	beq.w	8005f0e <HAL_TIM_ConfigClockSource+0x172>
 8005e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e06:	d87f      	bhi.n	8005f08 <HAL_TIM_ConfigClockSource+0x16c>
 8005e08:	2b70      	cmp	r3, #112	; 0x70
 8005e0a:	d01a      	beq.n	8005e42 <HAL_TIM_ConfigClockSource+0xa6>
 8005e0c:	2b70      	cmp	r3, #112	; 0x70
 8005e0e:	d87b      	bhi.n	8005f08 <HAL_TIM_ConfigClockSource+0x16c>
 8005e10:	2b60      	cmp	r3, #96	; 0x60
 8005e12:	d050      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0x11a>
 8005e14:	2b60      	cmp	r3, #96	; 0x60
 8005e16:	d877      	bhi.n	8005f08 <HAL_TIM_ConfigClockSource+0x16c>
 8005e18:	2b50      	cmp	r3, #80	; 0x50
 8005e1a:	d03c      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0xfa>
 8005e1c:	2b50      	cmp	r3, #80	; 0x50
 8005e1e:	d873      	bhi.n	8005f08 <HAL_TIM_ConfigClockSource+0x16c>
 8005e20:	2b40      	cmp	r3, #64	; 0x40
 8005e22:	d058      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x13a>
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	d86f      	bhi.n	8005f08 <HAL_TIM_ConfigClockSource+0x16c>
 8005e28:	2b30      	cmp	r3, #48	; 0x30
 8005e2a:	d064      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e2c:	2b30      	cmp	r3, #48	; 0x30
 8005e2e:	d86b      	bhi.n	8005f08 <HAL_TIM_ConfigClockSource+0x16c>
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d060      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d867      	bhi.n	8005f08 <HAL_TIM_ConfigClockSource+0x16c>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d05c      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e3c:	2b10      	cmp	r3, #16
 8005e3e:	d05a      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0x15a>
 8005e40:	e062      	b.n	8005f08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	6899      	ldr	r1, [r3, #8]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f000 fb23 	bl	800649c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	609a      	str	r2, [r3, #8]
      break;
 8005e6e:	e04f      	b.n	8005f10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	6899      	ldr	r1, [r3, #8]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f000 fb0c 	bl	800649c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e92:	609a      	str	r2, [r3, #8]
      break;
 8005e94:	e03c      	b.n	8005f10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	6859      	ldr	r1, [r3, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f000 fa80 	bl	80063a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2150      	movs	r1, #80	; 0x50
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fad9 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8005eb4:	e02c      	b.n	8005f10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6859      	ldr	r1, [r3, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f000 fa9f 	bl	8006406 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2160      	movs	r1, #96	; 0x60
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fac9 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8005ed4:	e01c      	b.n	8005f10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6818      	ldr	r0, [r3, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6859      	ldr	r1, [r3, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f000 fa60 	bl	80063a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2140      	movs	r1, #64	; 0x40
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fab9 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8005ef4:	e00c      	b.n	8005f10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4619      	mov	r1, r3
 8005f00:	4610      	mov	r0, r2
 8005f02:	f000 fab0 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8005f06:	e003      	b.n	8005f10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f0c:	e000      	b.n	8005f10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a34      	ldr	r2, [pc, #208]	; (8006074 <TIM_Base_SetConfig+0xe4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d00f      	beq.n	8005fc8 <TIM_Base_SetConfig+0x38>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fae:	d00b      	beq.n	8005fc8 <TIM_Base_SetConfig+0x38>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a31      	ldr	r2, [pc, #196]	; (8006078 <TIM_Base_SetConfig+0xe8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d007      	beq.n	8005fc8 <TIM_Base_SetConfig+0x38>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a30      	ldr	r2, [pc, #192]	; (800607c <TIM_Base_SetConfig+0xec>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_Base_SetConfig+0x38>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a2f      	ldr	r2, [pc, #188]	; (8006080 <TIM_Base_SetConfig+0xf0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d108      	bne.n	8005fda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a25      	ldr	r2, [pc, #148]	; (8006074 <TIM_Base_SetConfig+0xe4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01b      	beq.n	800601a <TIM_Base_SetConfig+0x8a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe8:	d017      	beq.n	800601a <TIM_Base_SetConfig+0x8a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a22      	ldr	r2, [pc, #136]	; (8006078 <TIM_Base_SetConfig+0xe8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d013      	beq.n	800601a <TIM_Base_SetConfig+0x8a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a21      	ldr	r2, [pc, #132]	; (800607c <TIM_Base_SetConfig+0xec>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00f      	beq.n	800601a <TIM_Base_SetConfig+0x8a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a20      	ldr	r2, [pc, #128]	; (8006080 <TIM_Base_SetConfig+0xf0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00b      	beq.n	800601a <TIM_Base_SetConfig+0x8a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1f      	ldr	r2, [pc, #124]	; (8006084 <TIM_Base_SetConfig+0xf4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d007      	beq.n	800601a <TIM_Base_SetConfig+0x8a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a1e      	ldr	r2, [pc, #120]	; (8006088 <TIM_Base_SetConfig+0xf8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d003      	beq.n	800601a <TIM_Base_SetConfig+0x8a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a1d      	ldr	r2, [pc, #116]	; (800608c <TIM_Base_SetConfig+0xfc>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d108      	bne.n	800602c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a08      	ldr	r2, [pc, #32]	; (8006074 <TIM_Base_SetConfig+0xe4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d103      	bne.n	8006060 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	615a      	str	r2, [r3, #20]
}
 8006066:	bf00      	nop
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40010000 	.word	0x40010000
 8006078:	40000400 	.word	0x40000400
 800607c:	40000800 	.word	0x40000800
 8006080:	40000c00 	.word	0x40000c00
 8006084:	40014000 	.word	0x40014000
 8006088:	40014400 	.word	0x40014400
 800608c:	40014800 	.word	0x40014800

08006090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f023 0302 	bic.w	r3, r3, #2
 80060d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1c      	ldr	r2, [pc, #112]	; (8006158 <TIM_OC1_SetConfig+0xc8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d10c      	bne.n	8006106 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f023 0308 	bic.w	r3, r3, #8
 80060f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f023 0304 	bic.w	r3, r3, #4
 8006104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a13      	ldr	r2, [pc, #76]	; (8006158 <TIM_OC1_SetConfig+0xc8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d111      	bne.n	8006132 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800611c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40010000 	.word	0x40010000

0800615c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f023 0210 	bic.w	r2, r3, #16
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f023 0320 	bic.w	r3, r3, #32
 80061a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a1e      	ldr	r2, [pc, #120]	; (8006230 <TIM_OC2_SetConfig+0xd4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d10d      	bne.n	80061d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a15      	ldr	r2, [pc, #84]	; (8006230 <TIM_OC2_SetConfig+0xd4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d113      	bne.n	8006208 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40010000 	.word	0x40010000

08006234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0303 	bic.w	r3, r3, #3
 800626a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800627c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a1d      	ldr	r2, [pc, #116]	; (8006304 <TIM_OC3_SetConfig+0xd0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d10d      	bne.n	80062ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	021b      	lsls	r3, r3, #8
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a14      	ldr	r2, [pc, #80]	; (8006304 <TIM_OC3_SetConfig+0xd0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d113      	bne.n	80062de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	621a      	str	r2, [r3, #32]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	40010000 	.word	0x40010000

08006308 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	031b      	lsls	r3, r3, #12
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a10      	ldr	r2, [pc, #64]	; (80063a4 <TIM_OC4_SetConfig+0x9c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d109      	bne.n	800637c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800636e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	019b      	lsls	r3, r3, #6
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	621a      	str	r2, [r3, #32]
}
 8006396:	bf00      	nop
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40010000 	.word	0x40010000

080063a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	f023 0201 	bic.w	r2, r3, #1
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f023 030a 	bic.w	r3, r3, #10
 80063e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006406:	b480      	push	{r7}
 8006408:	b087      	sub	sp, #28
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	f023 0210 	bic.w	r2, r3, #16
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	031b      	lsls	r3, r3, #12
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006442:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	4313      	orrs	r3, r2
 800644c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006466:	b480      	push	{r7}
 8006468:	b085      	sub	sp, #20
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	f043 0307 	orr.w	r3, r3, #7
 8006488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	609a      	str	r2, [r3, #8]
}
 8006490:	bf00      	nop
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	021a      	lsls	r2, r3, #8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	431a      	orrs	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	609a      	str	r2, [r3, #8]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e050      	b.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1c      	ldr	r2, [pc, #112]	; (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d018      	beq.n	800656a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006540:	d013      	beq.n	800656a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a18      	ldr	r2, [pc, #96]	; (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00e      	beq.n	800656a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a16      	ldr	r2, [pc, #88]	; (80065ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d009      	beq.n	800656a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a15      	ldr	r2, [pc, #84]	; (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d10c      	bne.n	8006584 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	4313      	orrs	r3, r2
 800657a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40010000 	.word	0x40010000
 80065a8:	40000400 	.word	0x40000400
 80065ac:	40000800 	.word	0x40000800
 80065b0:	40000c00 	.word	0x40000c00
 80065b4:	40014000 	.word	0x40014000

080065b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e03f      	b.n	8006672 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f004 fdca 	bl	800b1a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2224      	movs	r2, #36	; 0x24
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f829 	bl	800667c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695a      	ldr	r2, [r3, #20]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2220      	movs	r2, #32
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006680:	b09f      	sub	sp, #124	; 0x7c
 8006682:	af00      	add	r7, sp, #0
 8006684:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006692:	68d9      	ldr	r1, [r3, #12]
 8006694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	ea40 0301 	orr.w	r3, r0, r1
 800669c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800669e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80066b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066c0:	f021 010c 	bic.w	r1, r1, #12
 80066c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066ca:	430b      	orrs	r3, r1
 80066cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066da:	6999      	ldr	r1, [r3, #24]
 80066dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	ea40 0301 	orr.w	r3, r0, r1
 80066e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	4bc5      	ldr	r3, [pc, #788]	; (8006a00 <UART_SetConfig+0x384>)
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d004      	beq.n	80066fa <UART_SetConfig+0x7e>
 80066f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	4bc3      	ldr	r3, [pc, #780]	; (8006a04 <UART_SetConfig+0x388>)
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d103      	bne.n	8006702 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066fa:	f7fe f98d 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 80066fe:	6778      	str	r0, [r7, #116]	; 0x74
 8006700:	e002      	b.n	8006708 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006702:	f7fe f975 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8006706:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006710:	f040 80b6 	bne.w	8006880 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006716:	461c      	mov	r4, r3
 8006718:	f04f 0500 	mov.w	r5, #0
 800671c:	4622      	mov	r2, r4
 800671e:	462b      	mov	r3, r5
 8006720:	1891      	adds	r1, r2, r2
 8006722:	6439      	str	r1, [r7, #64]	; 0x40
 8006724:	415b      	adcs	r3, r3
 8006726:	647b      	str	r3, [r7, #68]	; 0x44
 8006728:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800672c:	1912      	adds	r2, r2, r4
 800672e:	eb45 0303 	adc.w	r3, r5, r3
 8006732:	f04f 0000 	mov.w	r0, #0
 8006736:	f04f 0100 	mov.w	r1, #0
 800673a:	00d9      	lsls	r1, r3, #3
 800673c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006740:	00d0      	lsls	r0, r2, #3
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	1911      	adds	r1, r2, r4
 8006748:	6639      	str	r1, [r7, #96]	; 0x60
 800674a:	416b      	adcs	r3, r5
 800674c:	667b      	str	r3, [r7, #100]	; 0x64
 800674e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	461a      	mov	r2, r3
 8006754:	f04f 0300 	mov.w	r3, #0
 8006758:	1891      	adds	r1, r2, r2
 800675a:	63b9      	str	r1, [r7, #56]	; 0x38
 800675c:	415b      	adcs	r3, r3
 800675e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006764:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006768:	f7f9 fd36 	bl	80001d8 <__aeabi_uldivmod>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4ba5      	ldr	r3, [pc, #660]	; (8006a08 <UART_SetConfig+0x38c>)
 8006772:	fba3 2302 	umull	r2, r3, r3, r2
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	011e      	lsls	r6, r3, #4
 800677a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800677c:	461c      	mov	r4, r3
 800677e:	f04f 0500 	mov.w	r5, #0
 8006782:	4622      	mov	r2, r4
 8006784:	462b      	mov	r3, r5
 8006786:	1891      	adds	r1, r2, r2
 8006788:	6339      	str	r1, [r7, #48]	; 0x30
 800678a:	415b      	adcs	r3, r3
 800678c:	637b      	str	r3, [r7, #52]	; 0x34
 800678e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006792:	1912      	adds	r2, r2, r4
 8006794:	eb45 0303 	adc.w	r3, r5, r3
 8006798:	f04f 0000 	mov.w	r0, #0
 800679c:	f04f 0100 	mov.w	r1, #0
 80067a0:	00d9      	lsls	r1, r3, #3
 80067a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067a6:	00d0      	lsls	r0, r2, #3
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	1911      	adds	r1, r2, r4
 80067ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80067b0:	416b      	adcs	r3, r5
 80067b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	461a      	mov	r2, r3
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	1891      	adds	r1, r2, r2
 80067c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80067c2:	415b      	adcs	r3, r3
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80067ce:	f7f9 fd03 	bl	80001d8 <__aeabi_uldivmod>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4b8c      	ldr	r3, [pc, #560]	; (8006a08 <UART_SetConfig+0x38c>)
 80067d8:	fba3 1302 	umull	r1, r3, r3, r2
 80067dc:	095b      	lsrs	r3, r3, #5
 80067de:	2164      	movs	r1, #100	; 0x64
 80067e0:	fb01 f303 	mul.w	r3, r1, r3
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	3332      	adds	r3, #50	; 0x32
 80067ea:	4a87      	ldr	r2, [pc, #540]	; (8006a08 <UART_SetConfig+0x38c>)
 80067ec:	fba2 2303 	umull	r2, r3, r2, r3
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067f8:	441e      	add	r6, r3
 80067fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067fc:	4618      	mov	r0, r3
 80067fe:	f04f 0100 	mov.w	r1, #0
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	1894      	adds	r4, r2, r2
 8006808:	623c      	str	r4, [r7, #32]
 800680a:	415b      	adcs	r3, r3
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
 800680e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006812:	1812      	adds	r2, r2, r0
 8006814:	eb41 0303 	adc.w	r3, r1, r3
 8006818:	f04f 0400 	mov.w	r4, #0
 800681c:	f04f 0500 	mov.w	r5, #0
 8006820:	00dd      	lsls	r5, r3, #3
 8006822:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006826:	00d4      	lsls	r4, r2, #3
 8006828:	4622      	mov	r2, r4
 800682a:	462b      	mov	r3, r5
 800682c:	1814      	adds	r4, r2, r0
 800682e:	653c      	str	r4, [r7, #80]	; 0x50
 8006830:	414b      	adcs	r3, r1
 8006832:	657b      	str	r3, [r7, #84]	; 0x54
 8006834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	461a      	mov	r2, r3
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	1891      	adds	r1, r2, r2
 8006840:	61b9      	str	r1, [r7, #24]
 8006842:	415b      	adcs	r3, r3
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800684a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800684e:	f7f9 fcc3 	bl	80001d8 <__aeabi_uldivmod>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	4b6c      	ldr	r3, [pc, #432]	; (8006a08 <UART_SetConfig+0x38c>)
 8006858:	fba3 1302 	umull	r1, r3, r3, r2
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	2164      	movs	r1, #100	; 0x64
 8006860:	fb01 f303 	mul.w	r3, r1, r3
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	3332      	adds	r3, #50	; 0x32
 800686a:	4a67      	ldr	r2, [pc, #412]	; (8006a08 <UART_SetConfig+0x38c>)
 800686c:	fba2 2303 	umull	r2, r3, r2, r3
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	f003 0207 	and.w	r2, r3, #7
 8006876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4432      	add	r2, r6
 800687c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800687e:	e0b9      	b.n	80069f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006882:	461c      	mov	r4, r3
 8006884:	f04f 0500 	mov.w	r5, #0
 8006888:	4622      	mov	r2, r4
 800688a:	462b      	mov	r3, r5
 800688c:	1891      	adds	r1, r2, r2
 800688e:	6139      	str	r1, [r7, #16]
 8006890:	415b      	adcs	r3, r3
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006898:	1912      	adds	r2, r2, r4
 800689a:	eb45 0303 	adc.w	r3, r5, r3
 800689e:	f04f 0000 	mov.w	r0, #0
 80068a2:	f04f 0100 	mov.w	r1, #0
 80068a6:	00d9      	lsls	r1, r3, #3
 80068a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068ac:	00d0      	lsls	r0, r2, #3
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	eb12 0804 	adds.w	r8, r2, r4
 80068b6:	eb43 0905 	adc.w	r9, r3, r5
 80068ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	4618      	mov	r0, r3
 80068c0:	f04f 0100 	mov.w	r1, #0
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	f04f 0300 	mov.w	r3, #0
 80068cc:	008b      	lsls	r3, r1, #2
 80068ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068d2:	0082      	lsls	r2, r0, #2
 80068d4:	4640      	mov	r0, r8
 80068d6:	4649      	mov	r1, r9
 80068d8:	f7f9 fc7e 	bl	80001d8 <__aeabi_uldivmod>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4b49      	ldr	r3, [pc, #292]	; (8006a08 <UART_SetConfig+0x38c>)
 80068e2:	fba3 2302 	umull	r2, r3, r3, r2
 80068e6:	095b      	lsrs	r3, r3, #5
 80068e8:	011e      	lsls	r6, r3, #4
 80068ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ec:	4618      	mov	r0, r3
 80068ee:	f04f 0100 	mov.w	r1, #0
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	1894      	adds	r4, r2, r2
 80068f8:	60bc      	str	r4, [r7, #8]
 80068fa:	415b      	adcs	r3, r3
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006902:	1812      	adds	r2, r2, r0
 8006904:	eb41 0303 	adc.w	r3, r1, r3
 8006908:	f04f 0400 	mov.w	r4, #0
 800690c:	f04f 0500 	mov.w	r5, #0
 8006910:	00dd      	lsls	r5, r3, #3
 8006912:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006916:	00d4      	lsls	r4, r2, #3
 8006918:	4622      	mov	r2, r4
 800691a:	462b      	mov	r3, r5
 800691c:	1814      	adds	r4, r2, r0
 800691e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006920:	414b      	adcs	r3, r1
 8006922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	4618      	mov	r0, r3
 800692a:	f04f 0100 	mov.w	r1, #0
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	008b      	lsls	r3, r1, #2
 8006938:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800693c:	0082      	lsls	r2, r0, #2
 800693e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006942:	f7f9 fc49 	bl	80001d8 <__aeabi_uldivmod>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4b2f      	ldr	r3, [pc, #188]	; (8006a08 <UART_SetConfig+0x38c>)
 800694c:	fba3 1302 	umull	r1, r3, r3, r2
 8006950:	095b      	lsrs	r3, r3, #5
 8006952:	2164      	movs	r1, #100	; 0x64
 8006954:	fb01 f303 	mul.w	r3, r1, r3
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	3332      	adds	r3, #50	; 0x32
 800695e:	4a2a      	ldr	r2, [pc, #168]	; (8006a08 <UART_SetConfig+0x38c>)
 8006960:	fba2 2303 	umull	r2, r3, r2, r3
 8006964:	095b      	lsrs	r3, r3, #5
 8006966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800696a:	441e      	add	r6, r3
 800696c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800696e:	4618      	mov	r0, r3
 8006970:	f04f 0100 	mov.w	r1, #0
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	1894      	adds	r4, r2, r2
 800697a:	603c      	str	r4, [r7, #0]
 800697c:	415b      	adcs	r3, r3
 800697e:	607b      	str	r3, [r7, #4]
 8006980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006984:	1812      	adds	r2, r2, r0
 8006986:	eb41 0303 	adc.w	r3, r1, r3
 800698a:	f04f 0400 	mov.w	r4, #0
 800698e:	f04f 0500 	mov.w	r5, #0
 8006992:	00dd      	lsls	r5, r3, #3
 8006994:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006998:	00d4      	lsls	r4, r2, #3
 800699a:	4622      	mov	r2, r4
 800699c:	462b      	mov	r3, r5
 800699e:	eb12 0a00 	adds.w	sl, r2, r0
 80069a2:	eb43 0b01 	adc.w	fp, r3, r1
 80069a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f04f 0100 	mov.w	r1, #0
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	008b      	lsls	r3, r1, #2
 80069ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069be:	0082      	lsls	r2, r0, #2
 80069c0:	4650      	mov	r0, sl
 80069c2:	4659      	mov	r1, fp
 80069c4:	f7f9 fc08 	bl	80001d8 <__aeabi_uldivmod>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <UART_SetConfig+0x38c>)
 80069ce:	fba3 1302 	umull	r1, r3, r3, r2
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	2164      	movs	r1, #100	; 0x64
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	011b      	lsls	r3, r3, #4
 80069de:	3332      	adds	r3, #50	; 0x32
 80069e0:	4a09      	ldr	r2, [pc, #36]	; (8006a08 <UART_SetConfig+0x38c>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	f003 020f 	and.w	r2, r3, #15
 80069ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4432      	add	r2, r6
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	377c      	adds	r7, #124	; 0x7c
 80069f8:	46bd      	mov	sp, r7
 80069fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fe:	bf00      	nop
 8006a00:	40011000 	.word	0x40011000
 8006a04:	40011400 	.word	0x40011400
 8006a08:	51eb851f 	.word	0x51eb851f

08006a0c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	f107 001c 	add.w	r0, r7, #28
 8006a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006a22:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006a24:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006a26:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006a2a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006a2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006a32:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006a36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006a46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	b004      	add	sp, #16
 8006a60:	4770      	bx	lr

08006a62 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2203      	movs	r2, #3
 8006a88:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006a8a:	2002      	movs	r0, #2
 8006a8c:	f7f9 fe3e 	bl	800070c <HAL_Delay>
  
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0303 	and.w	r3, r3, #3
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ad4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006ada:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006ae0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006af0:	f023 030f 	bic.w	r3, r3, #15
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	b2db      	uxtb	r3, r3
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3314      	adds	r3, #20
 8006b32:	461a      	mov	r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4413      	add	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
}  
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b70:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006b76:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006b7c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0

}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b088      	sub	sp, #32
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bb4:	2340      	movs	r3, #64	; 0x40
 8006bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bc2:	f107 0308 	add.w	r3, r7, #8
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff ff74 	bl	8006ab6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd2:	2110      	movs	r1, #16
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f979 	bl	8006ecc <SDMMC_GetCmdResp1>
 8006bda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3720      	adds	r7, #32
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b08a      	sub	sp, #40	; 0x28
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006bf6:	2307      	movs	r3, #7
 8006bf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bfa:	2340      	movs	r3, #64	; 0x40
 8006bfc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c06:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c08:	f107 0310 	add.w	r3, r7, #16
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f7ff ff51 	bl	8006ab6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c18:	2107      	movs	r1, #7
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f956 	bl	8006ecc <SDMMC_GetCmdResp1>
 8006c20:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3728      	adds	r7, #40	; 0x28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c40:	2300      	movs	r3, #0
 8006c42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c4a:	f107 0308 	add.w	r3, r7, #8
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff ff30 	bl	8006ab6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f90c 	bl	8006e74 <SDMMC_GetCmdError>
 8006c5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3720      	adds	r7, #32
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c70:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006c74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c76:	2308      	movs	r3, #8
 8006c78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c7a:	2340      	movs	r3, #64	; 0x40
 8006c7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c88:	f107 0308 	add.w	r3, r7, #8
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff ff11 	bl	8006ab6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fb03 	bl	80072a0 <SDMMC_GetCmdResp7>
 8006c9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c9c:	69fb      	ldr	r3, [r7, #28]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3720      	adds	r7, #32
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b088      	sub	sp, #32
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006cb4:	2337      	movs	r3, #55	; 0x37
 8006cb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cb8:	2340      	movs	r3, #64	; 0x40
 8006cba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cc6:	f107 0308 	add.w	r3, r7, #8
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff fef2 	bl	8006ab6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd6:	2137      	movs	r1, #55	; 0x37
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f8f7 	bl	8006ecc <SDMMC_GetCmdResp1>
 8006cde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3720      	adds	r7, #32
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b088      	sub	sp, #32
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006d00:	2329      	movs	r3, #41	; 0x29
 8006d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d04:	2340      	movs	r3, #64	; 0x40
 8006d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d12:	f107 0308 	add.w	r3, r7, #8
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff fecc 	bl	8006ab6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa0a 	bl	8007138 <SDMMC_GetCmdResp3>
 8006d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d26:	69fb      	ldr	r3, [r7, #28]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b088      	sub	sp, #32
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006d3e:	2306      	movs	r3, #6
 8006d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d42:	2340      	movs	r3, #64	; 0x40
 8006d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d50:	f107 0308 	add.w	r3, r7, #8
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fead 	bl	8006ab6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d60:	2106      	movs	r1, #6
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f8b2 	bl	8006ecc <SDMMC_GetCmdResp1>
 8006d68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3720      	adds	r7, #32
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006d80:	2333      	movs	r3, #51	; 0x33
 8006d82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d84:	2340      	movs	r3, #64	; 0x40
 8006d86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d92:	f107 0308 	add.w	r3, r7, #8
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7ff fe8c 	bl	8006ab6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da2:	2133      	movs	r1, #51	; 0x33
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f891 	bl	8006ecc <SDMMC_GetCmdResp1>
 8006daa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dac:	69fb      	ldr	r3, [r7, #28]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3720      	adds	r7, #32
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b088      	sub	sp, #32
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006dc6:	23c0      	movs	r3, #192	; 0xc0
 8006dc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dd4:	f107 0308 	add.w	r3, r7, #8
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff fe6b 	bl	8006ab6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f961 	bl	80070a8 <SDMMC_GetCmdResp2>
 8006de6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006de8:	69fb      	ldr	r3, [r7, #28]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3720      	adds	r7, #32
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b088      	sub	sp, #32
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006e00:	2309      	movs	r3, #9
 8006e02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006e04:	23c0      	movs	r3, #192	; 0xc0
 8006e06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e12:	f107 0308 	add.w	r3, r7, #8
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff fe4c 	bl	8006ab6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f942 	bl	80070a8 <SDMMC_GetCmdResp2>
 8006e24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e26:	69fb      	ldr	r3, [r7, #28]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3720      	adds	r7, #32
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e42:	2340      	movs	r3, #64	; 0x40
 8006e44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e46:	2300      	movs	r3, #0
 8006e48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e50:	f107 0308 	add.w	r3, r7, #8
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff fe2d 	bl	8006ab6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	2103      	movs	r1, #3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f9a7 	bl	80071b4 <SDMMC_GetCmdResp6>
 8006e66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e68:	69fb      	ldr	r3, [r7, #28]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3720      	adds	r7, #32
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e7c:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <SDMMC_GetCmdError+0x50>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a11      	ldr	r2, [pc, #68]	; (8006ec8 <SDMMC_GetCmdError+0x54>)
 8006e82:	fba2 2303 	umull	r2, r3, r2, r3
 8006e86:	0a5b      	lsrs	r3, r3, #9
 8006e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8c:	fb02 f303 	mul.w	r3, r2, r3
 8006e90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1e5a      	subs	r2, r3, #1
 8006e96:	60fa      	str	r2, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d102      	bne.n	8006ea2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ea0:	e009      	b.n	8006eb6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0f1      	beq.n	8006e92 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	22c5      	movs	r2, #197	; 0xc5
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20000118 	.word	0x20000118
 8006ec8:	10624dd3 	.word	0x10624dd3

08006ecc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006eda:	4b70      	ldr	r3, [pc, #448]	; (800709c <SDMMC_GetCmdResp1+0x1d0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a70      	ldr	r2, [pc, #448]	; (80070a0 <SDMMC_GetCmdResp1+0x1d4>)
 8006ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee4:	0a5a      	lsrs	r2, r3, #9
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	fb02 f303 	mul.w	r3, r2, r3
 8006eec:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	1e5a      	subs	r2, r3, #1
 8006ef2:	61fa      	str	r2, [r7, #28]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d102      	bne.n	8006efe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ef8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006efc:	e0c9      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f02:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0ef      	beq.n	8006eee <SDMMC_GetCmdResp1+0x22>
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1ea      	bne.n	8006eee <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2204      	movs	r2, #4
 8006f28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f2a:	2304      	movs	r3, #4
 8006f2c:	e0b1      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d004      	beq.n	8006f44 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e0a6      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	22c5      	movs	r2, #197	; 0xc5
 8006f48:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f7ff fddd 	bl	8006b0a <SDIO_GetCommandResponse>
 8006f50:	4603      	mov	r3, r0
 8006f52:	461a      	mov	r2, r3
 8006f54:	7afb      	ldrb	r3, [r7, #11]
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d001      	beq.n	8006f5e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e099      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006f5e:	2100      	movs	r1, #0
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7ff fddf 	bl	8006b24 <SDIO_GetResponse>
 8006f66:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4b4e      	ldr	r3, [pc, #312]	; (80070a4 <SDMMC_GetCmdResp1+0x1d8>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	e08d      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	da02      	bge.n	8006f82 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006f7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f80:	e087      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006f8c:	2340      	movs	r3, #64	; 0x40
 8006f8e:	e080      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006f9a:	2380      	movs	r3, #128	; 0x80
 8006f9c:	e079      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fac:	e071      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fbc:	e069      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fcc:	e061      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fdc:	e059      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fec:	e051      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ffc:	e049      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007008:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800700c:	e041      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800701c:	e039      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800702c:	e031      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007038:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800703c:	e029      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007048:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800704c:	e021      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007058:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800705c:	e019      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007068:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800706c:	e011      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007078:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800707c:	e009      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007088:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800708c:	e001      	b.n	8007092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800708e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007092:	4618      	mov	r0, r3
 8007094:	3720      	adds	r7, #32
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20000118 	.word	0x20000118
 80070a0:	10624dd3 	.word	0x10624dd3
 80070a4:	fdffe008 	.word	0xfdffe008

080070a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070b0:	4b1f      	ldr	r3, [pc, #124]	; (8007130 <SDMMC_GetCmdResp2+0x88>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1f      	ldr	r2, [pc, #124]	; (8007134 <SDMMC_GetCmdResp2+0x8c>)
 80070b6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ba:	0a5b      	lsrs	r3, r3, #9
 80070bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c0:	fb02 f303 	mul.w	r3, r2, r3
 80070c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	1e5a      	subs	r2, r3, #1
 80070ca:	60fa      	str	r2, [r7, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070d4:	e026      	b.n	8007124 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d0ef      	beq.n	80070c6 <SDMMC_GetCmdResp2+0x1e>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1ea      	bne.n	80070c6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2204      	movs	r2, #4
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007102:	2304      	movs	r3, #4
 8007104:	e00e      	b.n	8007124 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d004      	beq.n	800711c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007118:	2301      	movs	r3, #1
 800711a:	e003      	b.n	8007124 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	22c5      	movs	r2, #197	; 0xc5
 8007120:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	20000118 	.word	0x20000118
 8007134:	10624dd3 	.word	0x10624dd3

08007138 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007140:	4b1a      	ldr	r3, [pc, #104]	; (80071ac <SDMMC_GetCmdResp3+0x74>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a1a      	ldr	r2, [pc, #104]	; (80071b0 <SDMMC_GetCmdResp3+0x78>)
 8007146:	fba2 2303 	umull	r2, r3, r2, r3
 800714a:	0a5b      	lsrs	r3, r3, #9
 800714c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007150:	fb02 f303 	mul.w	r3, r2, r3
 8007154:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1e5a      	subs	r2, r3, #1
 800715a:	60fa      	str	r2, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d102      	bne.n	8007166 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007160:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007164:	e01b      	b.n	800719e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0ef      	beq.n	8007156 <SDMMC_GetCmdResp3+0x1e>
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1ea      	bne.n	8007156 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2204      	movs	r2, #4
 8007190:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007192:	2304      	movs	r3, #4
 8007194:	e003      	b.n	800719e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	22c5      	movs	r2, #197	; 0xc5
 800719a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	20000118 	.word	0x20000118
 80071b0:	10624dd3 	.word	0x10624dd3

080071b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	460b      	mov	r3, r1
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071c2:	4b35      	ldr	r3, [pc, #212]	; (8007298 <SDMMC_GetCmdResp6+0xe4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a35      	ldr	r2, [pc, #212]	; (800729c <SDMMC_GetCmdResp6+0xe8>)
 80071c8:	fba2 2303 	umull	r2, r3, r2, r3
 80071cc:	0a5b      	lsrs	r3, r3, #9
 80071ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d2:	fb02 f303 	mul.w	r3, r2, r3
 80071d6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	1e5a      	subs	r2, r3, #1
 80071dc:	61fa      	str	r2, [r7, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d102      	bne.n	80071e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071e6:	e052      	b.n	800728e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0ef      	beq.n	80071d8 <SDMMC_GetCmdResp6+0x24>
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1ea      	bne.n	80071d8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b00      	cmp	r3, #0
 800720c:	d004      	beq.n	8007218 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2204      	movs	r2, #4
 8007212:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007214:	2304      	movs	r3, #4
 8007216:	e03a      	b.n	800728e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b00      	cmp	r3, #0
 8007222:	d004      	beq.n	800722e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2201      	movs	r2, #1
 8007228:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800722a:	2301      	movs	r3, #1
 800722c:	e02f      	b.n	800728e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff fc6b 	bl	8006b0a <SDIO_GetCommandResponse>
 8007234:	4603      	mov	r3, r0
 8007236:	461a      	mov	r2, r3
 8007238:	7afb      	ldrb	r3, [r7, #11]
 800723a:	4293      	cmp	r3, r2
 800723c:	d001      	beq.n	8007242 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800723e:	2301      	movs	r3, #1
 8007240:	e025      	b.n	800728e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	22c5      	movs	r2, #197	; 0xc5
 8007246:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007248:	2100      	movs	r1, #0
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7ff fc6a 	bl	8006b24 <SDIO_GetResponse>
 8007250:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d106      	bne.n	800726a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	0c1b      	lsrs	r3, r3, #16
 8007260:	b29a      	uxth	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007266:	2300      	movs	r3, #0
 8007268:	e011      	b.n	800728e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007278:	e009      	b.n	800728e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007288:	e001      	b.n	800728e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800728a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800728e:	4618      	mov	r0, r3
 8007290:	3720      	adds	r7, #32
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000118 	.word	0x20000118
 800729c:	10624dd3 	.word	0x10624dd3

080072a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072a8:	4b22      	ldr	r3, [pc, #136]	; (8007334 <SDMMC_GetCmdResp7+0x94>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a22      	ldr	r2, [pc, #136]	; (8007338 <SDMMC_GetCmdResp7+0x98>)
 80072ae:	fba2 2303 	umull	r2, r3, r2, r3
 80072b2:	0a5b      	lsrs	r3, r3, #9
 80072b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b8:	fb02 f303 	mul.w	r3, r2, r3
 80072bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	1e5a      	subs	r2, r3, #1
 80072c2:	60fa      	str	r2, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d102      	bne.n	80072ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072cc:	e02c      	b.n	8007328 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d0ef      	beq.n	80072be <SDMMC_GetCmdResp7+0x1e>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1ea      	bne.n	80072be <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d004      	beq.n	80072fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2204      	movs	r2, #4
 80072f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072fa:	2304      	movs	r3, #4
 80072fc:	e014      	b.n	8007328 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007310:	2301      	movs	r3, #1
 8007312:	e009      	b.n	8007328 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2240      	movs	r2, #64	; 0x40
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007326:	2300      	movs	r3, #0
  
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	20000118 	.word	0x20000118
 8007338:	10624dd3 	.word	0x10624dd3

0800733c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800733c:	b084      	sub	sp, #16
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	f107 001c 	add.w	r0, r7, #28
 800734a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	2b01      	cmp	r3, #1
 8007352:	d122      	bne.n	800739a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800737c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737e:	2b01      	cmp	r3, #1
 8007380:	d105      	bne.n	800738e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 fb1c 	bl	80089cc <USB_CoreReset>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]
 8007398:	e01a      	b.n	80073d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 fb10 	bl	80089cc <USB_CoreReset>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80073b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
 80073c2:	e005      	b.n	80073d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d10b      	bne.n	80073ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f043 0206 	orr.w	r2, r3, #6
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f043 0220 	orr.w	r2, r3, #32
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073fa:	b004      	add	sp, #16
 80073fc:	4770      	bx	lr
	...

08007400 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	4613      	mov	r3, r2
 800740c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d165      	bne.n	80074e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4a41      	ldr	r2, [pc, #260]	; (800751c <USB_SetTurnaroundTime+0x11c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d906      	bls.n	800742a <USB_SetTurnaroundTime+0x2a>
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4a40      	ldr	r2, [pc, #256]	; (8007520 <USB_SetTurnaroundTime+0x120>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d202      	bcs.n	800742a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007424:	230f      	movs	r3, #15
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e062      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	4a3c      	ldr	r2, [pc, #240]	; (8007520 <USB_SetTurnaroundTime+0x120>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d306      	bcc.n	8007440 <USB_SetTurnaroundTime+0x40>
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	4a3b      	ldr	r2, [pc, #236]	; (8007524 <USB_SetTurnaroundTime+0x124>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d202      	bcs.n	8007440 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800743a:	230e      	movs	r3, #14
 800743c:	617b      	str	r3, [r7, #20]
 800743e:	e057      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4a38      	ldr	r2, [pc, #224]	; (8007524 <USB_SetTurnaroundTime+0x124>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d306      	bcc.n	8007456 <USB_SetTurnaroundTime+0x56>
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4a37      	ldr	r2, [pc, #220]	; (8007528 <USB_SetTurnaroundTime+0x128>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d202      	bcs.n	8007456 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007450:	230d      	movs	r3, #13
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	e04c      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	4a33      	ldr	r2, [pc, #204]	; (8007528 <USB_SetTurnaroundTime+0x128>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d306      	bcc.n	800746c <USB_SetTurnaroundTime+0x6c>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	4a32      	ldr	r2, [pc, #200]	; (800752c <USB_SetTurnaroundTime+0x12c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d802      	bhi.n	800746c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007466:	230c      	movs	r3, #12
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	e041      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4a2f      	ldr	r2, [pc, #188]	; (800752c <USB_SetTurnaroundTime+0x12c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d906      	bls.n	8007482 <USB_SetTurnaroundTime+0x82>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4a2e      	ldr	r2, [pc, #184]	; (8007530 <USB_SetTurnaroundTime+0x130>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d802      	bhi.n	8007482 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800747c:	230b      	movs	r3, #11
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	e036      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	4a2a      	ldr	r2, [pc, #168]	; (8007530 <USB_SetTurnaroundTime+0x130>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d906      	bls.n	8007498 <USB_SetTurnaroundTime+0x98>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	4a29      	ldr	r2, [pc, #164]	; (8007534 <USB_SetTurnaroundTime+0x134>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d802      	bhi.n	8007498 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007492:	230a      	movs	r3, #10
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	e02b      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4a26      	ldr	r2, [pc, #152]	; (8007534 <USB_SetTurnaroundTime+0x134>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d906      	bls.n	80074ae <USB_SetTurnaroundTime+0xae>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4a25      	ldr	r2, [pc, #148]	; (8007538 <USB_SetTurnaroundTime+0x138>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d202      	bcs.n	80074ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80074a8:	2309      	movs	r3, #9
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	e020      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	4a21      	ldr	r2, [pc, #132]	; (8007538 <USB_SetTurnaroundTime+0x138>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d306      	bcc.n	80074c4 <USB_SetTurnaroundTime+0xc4>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	4a20      	ldr	r2, [pc, #128]	; (800753c <USB_SetTurnaroundTime+0x13c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d802      	bhi.n	80074c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80074be:	2308      	movs	r3, #8
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	e015      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4a1d      	ldr	r2, [pc, #116]	; (800753c <USB_SetTurnaroundTime+0x13c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d906      	bls.n	80074da <USB_SetTurnaroundTime+0xda>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4a1c      	ldr	r2, [pc, #112]	; (8007540 <USB_SetTurnaroundTime+0x140>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d202      	bcs.n	80074da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80074d4:	2307      	movs	r3, #7
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	e00a      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80074da:	2306      	movs	r3, #6
 80074dc:	617b      	str	r3, [r7, #20]
 80074de:	e007      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80074e6:	2309      	movs	r3, #9
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	e001      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80074ec:	2309      	movs	r3, #9
 80074ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	029b      	lsls	r3, r3, #10
 8007504:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007508:	431a      	orrs	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	371c      	adds	r7, #28
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	00d8acbf 	.word	0x00d8acbf
 8007520:	00e4e1c0 	.word	0x00e4e1c0
 8007524:	00f42400 	.word	0x00f42400
 8007528:	01067380 	.word	0x01067380
 800752c:	011a499f 	.word	0x011a499f
 8007530:	01312cff 	.word	0x01312cff
 8007534:	014ca43f 	.word	0x014ca43f
 8007538:	016e3600 	.word	0x016e3600
 800753c:	01a6ab1f 	.word	0x01a6ab1f
 8007540:	01e84800 	.word	0x01e84800

08007544 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f043 0201 	orr.w	r2, r3, #1
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f023 0201 	bic.w	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075a4:	78fb      	ldrb	r3, [r7, #3]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d115      	bne.n	80075d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075b6:	2001      	movs	r0, #1
 80075b8:	f7f9 f8a8 	bl	800070c <HAL_Delay>
      ms++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3301      	adds	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 f972 	bl	80088ac <USB_GetMode>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d01e      	beq.n	800760c <USB_SetCurrentMode+0x84>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b31      	cmp	r3, #49	; 0x31
 80075d2:	d9f0      	bls.n	80075b6 <USB_SetCurrentMode+0x2e>
 80075d4:	e01a      	b.n	800760c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075d6:	78fb      	ldrb	r3, [r7, #3]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d115      	bne.n	8007608 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075e8:	2001      	movs	r0, #1
 80075ea:	f7f9 f88f 	bl	800070c <HAL_Delay>
      ms++;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3301      	adds	r3, #1
 80075f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 f959 	bl	80088ac <USB_GetMode>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <USB_SetCurrentMode+0x84>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b31      	cmp	r3, #49	; 0x31
 8007604:	d9f0      	bls.n	80075e8 <USB_SetCurrentMode+0x60>
 8007606:	e001      	b.n	800760c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e005      	b.n	8007618 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b32      	cmp	r3, #50	; 0x32
 8007610:	d101      	bne.n	8007616 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007620:	b084      	sub	sp, #16
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800762e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800763a:	2300      	movs	r3, #0
 800763c:	613b      	str	r3, [r7, #16]
 800763e:	e009      	b.n	8007654 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	3340      	adds	r3, #64	; 0x40
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	2200      	movs	r2, #0
 800764c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	3301      	adds	r3, #1
 8007652:	613b      	str	r3, [r7, #16]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	2b0e      	cmp	r3, #14
 8007658:	d9f2      	bls.n	8007640 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800765a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d11c      	bne.n	800769a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800766e:	f043 0302 	orr.w	r3, r3, #2
 8007672:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007678:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	639a      	str	r2, [r3, #56]	; 0x38
 8007698:	e00b      	b.n	80076b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076b8:	461a      	mov	r2, r3
 80076ba:	2300      	movs	r3, #0
 80076bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c4:	4619      	mov	r1, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076cc:	461a      	mov	r2, r3
 80076ce:	680b      	ldr	r3, [r1, #0]
 80076d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d10c      	bne.n	80076f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d104      	bne.n	80076e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076de:	2100      	movs	r1, #0
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f945 	bl	8007970 <USB_SetDevSpeed>
 80076e6:	e008      	b.n	80076fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076e8:	2101      	movs	r1, #1
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f940 	bl	8007970 <USB_SetDevSpeed>
 80076f0:	e003      	b.n	80076fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076f2:	2103      	movs	r1, #3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f93b 	bl	8007970 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076fa:	2110      	movs	r1, #16
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f8f3 	bl	80078e8 <USB_FlushTxFifo>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f90f 	bl	8007930 <USB_FlushRxFifo>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007722:	461a      	mov	r2, r3
 8007724:	2300      	movs	r3, #0
 8007726:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772e:	461a      	mov	r2, r3
 8007730:	2300      	movs	r3, #0
 8007732:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773a:	461a      	mov	r2, r3
 800773c:	2300      	movs	r3, #0
 800773e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007740:	2300      	movs	r3, #0
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	e043      	b.n	80077ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	015a      	lsls	r2, r3, #5
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4413      	add	r3, r2
 800774e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800775c:	d118      	bne.n	8007790 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007770:	461a      	mov	r2, r3
 8007772:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	e013      	b.n	80077a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007786:	461a      	mov	r2, r3
 8007788:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	e008      	b.n	80077a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779c:	461a      	mov	r2, r3
 800779e:	2300      	movs	r3, #0
 80077a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ae:	461a      	mov	r2, r3
 80077b0:	2300      	movs	r3, #0
 80077b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c0:	461a      	mov	r2, r3
 80077c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	3301      	adds	r3, #1
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d3b7      	bcc.n	8007746 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077d6:	2300      	movs	r3, #0
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	e043      	b.n	8007864 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077f2:	d118      	bne.n	8007826 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007806:	461a      	mov	r2, r3
 8007808:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	e013      	b.n	8007838 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	461a      	mov	r2, r3
 800781e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	e008      	b.n	8007838 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007832:	461a      	mov	r2, r3
 8007834:	2300      	movs	r3, #0
 8007836:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007844:	461a      	mov	r2, r3
 8007846:	2300      	movs	r3, #0
 8007848:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007856:	461a      	mov	r2, r3
 8007858:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800785c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	3301      	adds	r3, #1
 8007862:	613b      	str	r3, [r7, #16]
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	429a      	cmp	r2, r3
 800786a:	d3b7      	bcc.n	80077dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800787a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800787e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800788c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	2b00      	cmp	r3, #0
 8007892:	d105      	bne.n	80078a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	f043 0210 	orr.w	r2, r3, #16
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699a      	ldr	r2, [r3, #24]
 80078a4:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <USB_DevInit+0x2c4>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d005      	beq.n	80078be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	f043 0208 	orr.w	r2, r3, #8
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80078be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d107      	bne.n	80078d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078cc:	f043 0304 	orr.w	r3, r3, #4
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078e0:	b004      	add	sp, #16
 80078e2:	4770      	bx	lr
 80078e4:	803c3800 	.word	0x803c3800

080078e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	019b      	lsls	r3, r3, #6
 80078fa:	f043 0220 	orr.w	r2, r3, #32
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	4a08      	ldr	r2, [pc, #32]	; (800792c <USB_FlushTxFifo+0x44>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d901      	bls.n	8007912 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e006      	b.n	8007920 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b20      	cmp	r3, #32
 800791c:	d0f1      	beq.n	8007902 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	00030d40 	.word	0x00030d40

08007930 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2210      	movs	r2, #16
 8007940:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3301      	adds	r3, #1
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	4a08      	ldr	r2, [pc, #32]	; (800796c <USB_FlushRxFifo+0x3c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d901      	bls.n	8007952 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e006      	b.n	8007960 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f003 0310 	and.w	r3, r3, #16
 800795a:	2b10      	cmp	r3, #16
 800795c:	d0f1      	beq.n	8007942 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	00030d40 	.word	0x00030d40

08007970 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007990:	4313      	orrs	r3, r2
 8007992:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b087      	sub	sp, #28
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f003 0306 	and.w	r3, r3, #6
 80079ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d102      	bne.n	80079c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]
 80079c6:	e00a      	b.n	80079de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d002      	beq.n	80079d4 <USB_GetDevSpeed+0x32>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b06      	cmp	r3, #6
 80079d2:	d102      	bne.n	80079da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80079d4:	2302      	movs	r3, #2
 80079d6:	75fb      	strb	r3, [r7, #23]
 80079d8:	e001      	b.n	80079de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80079da:	230f      	movs	r3, #15
 80079dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80079de:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	371c      	adds	r7, #28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	785b      	ldrb	r3, [r3, #1]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d13a      	bne.n	8007a7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0e:	69da      	ldr	r2, [r3, #28]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	f003 030f 	and.w	r3, r3, #15
 8007a18:	2101      	movs	r1, #1
 8007a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	68f9      	ldr	r1, [r7, #12]
 8007a22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a26:	4313      	orrs	r3, r2
 8007a28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d155      	bne.n	8007aec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	78db      	ldrb	r3, [r3, #3]
 8007a5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	059b      	lsls	r3, r3, #22
 8007a62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a64:	4313      	orrs	r3, r2
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	0151      	lsls	r1, r2, #5
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	440a      	add	r2, r1
 8007a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	e036      	b.n	8007aec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a84:	69da      	ldr	r2, [r3, #28]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	f003 030f 	and.w	r3, r3, #15
 8007a8e:	2101      	movs	r1, #1
 8007a90:	fa01 f303 	lsl.w	r3, r1, r3
 8007a94:	041b      	lsls	r3, r3, #16
 8007a96:	68f9      	ldr	r1, [r7, #12]
 8007a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d11a      	bne.n	8007aec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	78db      	ldrb	r3, [r3, #3]
 8007ad0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	0151      	lsls	r1, r2, #5
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	440a      	add	r2, r1
 8007ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
	...

08007afc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d161      	bne.n	8007bdc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b2e:	d11f      	bne.n	8007b70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	0151      	lsls	r1, r2, #5
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	440a      	add	r2, r1
 8007b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	2101      	movs	r1, #1
 8007b82:	fa01 f303 	lsl.w	r3, r1, r3
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	43db      	mvns	r3, r3
 8007b8a:	68f9      	ldr	r1, [r7, #12]
 8007b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b90:	4013      	ands	r3, r2
 8007b92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9a:	69da      	ldr	r2, [r3, #28]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	f003 030f 	and.w	r3, r3, #15
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	43db      	mvns	r3, r3
 8007bae:	68f9      	ldr	r1, [r7, #12]
 8007bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	0159      	lsls	r1, r3, #5
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	440b      	add	r3, r1
 8007bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4b35      	ldr	r3, [pc, #212]	; (8007cac <USB_DeactivateEndpoint+0x1b0>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	600b      	str	r3, [r1, #0]
 8007bda:	e060      	b.n	8007c9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bf2:	d11f      	bne.n	8007c34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	0151      	lsls	r1, r2, #5
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	440a      	add	r2, r1
 8007c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	f003 030f 	and.w	r3, r3, #15
 8007c44:	2101      	movs	r1, #1
 8007c46:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4a:	041b      	lsls	r3, r3, #16
 8007c4c:	43db      	mvns	r3, r3
 8007c4e:	68f9      	ldr	r1, [r7, #12]
 8007c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c54:	4013      	ands	r3, r2
 8007c56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5e:	69da      	ldr	r2, [r3, #28]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	2101      	movs	r1, #1
 8007c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6e:	041b      	lsls	r3, r3, #16
 8007c70:	43db      	mvns	r3, r3
 8007c72:	68f9      	ldr	r1, [r7, #12]
 8007c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c78:	4013      	ands	r3, r2
 8007c7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	0159      	lsls	r1, r3, #5
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	440b      	add	r3, r1
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	4619      	mov	r1, r3
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <USB_DeactivateEndpoint+0x1b4>)
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	ec337800 	.word	0xec337800
 8007cb0:	eff37800 	.word	0xeff37800

08007cb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08a      	sub	sp, #40	; 0x28
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	785b      	ldrb	r3, [r3, #1]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	f040 815c 	bne.w	8007f8e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d132      	bne.n	8007d44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	0151      	lsls	r1, r2, #5
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	440a      	add	r2, r1
 8007cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	0151      	lsls	r1, r2, #5
 8007d14:	69fa      	ldr	r2, [r7, #28]
 8007d16:	440a      	add	r2, r1
 8007d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	0151      	lsls	r1, r2, #5
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	440a      	add	r2, r1
 8007d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d3c:	0cdb      	lsrs	r3, r3, #19
 8007d3e:	04db      	lsls	r3, r3, #19
 8007d40:	6113      	str	r3, [r2, #16]
 8007d42:	e074      	b.n	8007e2e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	0151      	lsls	r1, r2, #5
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	440a      	add	r2, r1
 8007d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d5e:	0cdb      	lsrs	r3, r3, #19
 8007d60:	04db      	lsls	r3, r3, #19
 8007d62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	0151      	lsls	r1, r2, #5
 8007d76:	69fa      	ldr	r2, [r7, #28]
 8007d78:	440a      	add	r2, r1
 8007d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d94:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	6959      	ldr	r1, [r3, #20]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	440b      	add	r3, r1
 8007da0:	1e59      	subs	r1, r3, #1
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007daa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007dac:	4b9d      	ldr	r3, [pc, #628]	; (8008024 <USB_EPStartXfer+0x370>)
 8007dae:	400b      	ands	r3, r1
 8007db0:	69b9      	ldr	r1, [r7, #24]
 8007db2:	0148      	lsls	r0, r1, #5
 8007db4:	69f9      	ldr	r1, [r7, #28]
 8007db6:	4401      	add	r1, r0
 8007db8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dcc:	691a      	ldr	r2, [r3, #16]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dd6:	69b9      	ldr	r1, [r7, #24]
 8007dd8:	0148      	lsls	r0, r1, #5
 8007dda:	69f9      	ldr	r1, [r7, #28]
 8007ddc:	4401      	add	r1, r0
 8007dde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007de2:	4313      	orrs	r3, r2
 8007de4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	78db      	ldrb	r3, [r3, #3]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d11f      	bne.n	8007e2e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007e0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	0151      	lsls	r1, r2, #5
 8007e20:	69fa      	ldr	r2, [r7, #28]
 8007e22:	440a      	add	r2, r1
 8007e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e2c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d14b      	bne.n	8007ecc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d009      	beq.n	8007e50 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e48:	461a      	mov	r2, r3
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	78db      	ldrb	r3, [r3, #3]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d128      	bne.n	8007eaa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d110      	bne.n	8007e8a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	0151      	lsls	r1, r2, #5
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	440a      	add	r2, r1
 8007e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e86:	6013      	str	r3, [r2, #0]
 8007e88:	e00f      	b.n	8007eaa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	0151      	lsls	r1, r2, #5
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	440a      	add	r2, r1
 8007ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ea8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	0151      	lsls	r1, r2, #5
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	440a      	add	r2, r1
 8007ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	e12f      	b.n	800812c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007eea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	78db      	ldrb	r3, [r3, #3]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d015      	beq.n	8007f20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 8117 	beq.w	800812c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	2101      	movs	r1, #1
 8007f10:	fa01 f303 	lsl.w	r3, r1, r3
 8007f14:	69f9      	ldr	r1, [r7, #28]
 8007f16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	634b      	str	r3, [r1, #52]	; 0x34
 8007f1e:	e105      	b.n	800812c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d110      	bne.n	8007f52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	0151      	lsls	r1, r2, #5
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	440a      	add	r2, r1
 8007f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f4e:	6013      	str	r3, [r2, #0]
 8007f50:	e00f      	b.n	8007f72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	0151      	lsls	r1, r2, #5
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	440a      	add	r2, r1
 8007f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	68d9      	ldr	r1, [r3, #12]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	b298      	uxth	r0, r3
 8007f80:	79fb      	ldrb	r3, [r7, #7]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4603      	mov	r3, r0
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 fa2b 	bl	80083e2 <USB_WritePacket>
 8007f8c:	e0ce      	b.n	800812c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	0151      	lsls	r1, r2, #5
 8007fa0:	69fa      	ldr	r2, [r7, #28]
 8007fa2:	440a      	add	r2, r1
 8007fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa8:	0cdb      	lsrs	r3, r3, #19
 8007faa:	04db      	lsls	r3, r3, #19
 8007fac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	0151      	lsls	r1, r2, #5
 8007fc0:	69fa      	ldr	r2, [r7, #28]
 8007fc2:	440a      	add	r2, r1
 8007fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fd0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d126      	bne.n	8008028 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff0:	69b9      	ldr	r1, [r7, #24]
 8007ff2:	0148      	lsls	r0, r1, #5
 8007ff4:	69f9      	ldr	r1, [r7, #28]
 8007ff6:	4401      	add	r1, r0
 8007ff8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	0151      	lsls	r1, r2, #5
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	440a      	add	r2, r1
 8008016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800801a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800801e:	6113      	str	r3, [r2, #16]
 8008020:	e036      	b.n	8008090 <USB_EPStartXfer+0x3dc>
 8008022:	bf00      	nop
 8008024:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	695a      	ldr	r2, [r3, #20]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	4413      	add	r3, r2
 8008032:	1e5a      	subs	r2, r3, #1
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	fbb2 f3f3 	udiv	r3, r2, r3
 800803c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	8afb      	ldrh	r3, [r7, #22]
 800804e:	04d9      	lsls	r1, r3, #19
 8008050:	4b39      	ldr	r3, [pc, #228]	; (8008138 <USB_EPStartXfer+0x484>)
 8008052:	400b      	ands	r3, r1
 8008054:	69b9      	ldr	r1, [r7, #24]
 8008056:	0148      	lsls	r0, r1, #5
 8008058:	69f9      	ldr	r1, [r7, #28]
 800805a:	4401      	add	r1, r0
 800805c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008060:	4313      	orrs	r3, r2
 8008062:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008070:	691a      	ldr	r2, [r3, #16]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	8af9      	ldrh	r1, [r7, #22]
 8008078:	fb01 f303 	mul.w	r3, r1, r3
 800807c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008080:	69b9      	ldr	r1, [r7, #24]
 8008082:	0148      	lsls	r0, r1, #5
 8008084:	69f9      	ldr	r1, [r7, #28]
 8008086:	4401      	add	r1, r0
 8008088:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800808c:	4313      	orrs	r3, r2
 800808e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d10d      	bne.n	80080b2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d009      	beq.n	80080b2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	68d9      	ldr	r1, [r3, #12]
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ae:	460a      	mov	r2, r1
 80080b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	78db      	ldrb	r3, [r3, #3]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d128      	bne.n	800810c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d110      	bne.n	80080ec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080e8:	6013      	str	r3, [r2, #0]
 80080ea:	e00f      	b.n	800810c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	0151      	lsls	r1, r2, #5
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	440a      	add	r2, r1
 8008102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800810a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	0151      	lsls	r1, r2, #5
 800811e:	69fa      	ldr	r2, [r7, #28]
 8008120:	440a      	add	r2, r1
 8008122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008126:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800812a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3720      	adds	r7, #32
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	1ff80000 	.word	0x1ff80000

0800813c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	785b      	ldrb	r3, [r3, #1]
 8008158:	2b01      	cmp	r3, #1
 800815a:	f040 80cd 	bne.w	80082f8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d132      	bne.n	80081cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	4413      	add	r3, r2
 800816e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	0151      	lsls	r1, r2, #5
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	440a      	add	r2, r1
 800817c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008180:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008184:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008188:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	0151      	lsls	r1, r2, #5
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	440a      	add	r2, r1
 80081c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c4:	0cdb      	lsrs	r3, r3, #19
 80081c6:	04db      	lsls	r3, r3, #19
 80081c8:	6113      	str	r3, [r2, #16]
 80081ca:	e04e      	b.n	800826a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	0151      	lsls	r1, r2, #5
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	440a      	add	r2, r1
 80081e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e6:	0cdb      	lsrs	r3, r3, #19
 80081e8:	04db      	lsls	r3, r3, #19
 80081ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	0151      	lsls	r1, r2, #5
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	440a      	add	r2, r1
 8008202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008206:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800820a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800820e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	695a      	ldr	r2, [r3, #20]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	429a      	cmp	r2, r3
 800821a:	d903      	bls.n	8008224 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	0151      	lsls	r1, r2, #5
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	440a      	add	r2, r1
 800823a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800823e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008250:	691a      	ldr	r2, [r3, #16]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800825a:	6939      	ldr	r1, [r7, #16]
 800825c:	0148      	lsls	r0, r1, #5
 800825e:	6979      	ldr	r1, [r7, #20]
 8008260:	4401      	add	r1, r0
 8008262:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008266:	4313      	orrs	r3, r2
 8008268:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d11e      	bne.n	80082ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d009      	beq.n	800828c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008284:	461a      	mov	r2, r3
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	0151      	lsls	r1, r2, #5
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	440a      	add	r2, r1
 80082a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	e092      	b.n	80083d4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	0151      	lsls	r1, r2, #5
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	440a      	add	r2, r1
 80082c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d07e      	beq.n	80083d4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	2101      	movs	r1, #1
 80082e8:	fa01 f303 	lsl.w	r3, r1, r3
 80082ec:	6979      	ldr	r1, [r7, #20]
 80082ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082f2:	4313      	orrs	r3, r2
 80082f4:	634b      	str	r3, [r1, #52]	; 0x34
 80082f6:	e06d      	b.n	80083d4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	0151      	lsls	r1, r2, #5
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	440a      	add	r2, r1
 800830e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008312:	0cdb      	lsrs	r3, r3, #19
 8008314:	04db      	lsls	r3, r3, #19
 8008316:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	4413      	add	r3, r2
 8008320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	0151      	lsls	r1, r2, #5
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	440a      	add	r2, r1
 800832e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008332:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008336:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800833a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	0151      	lsls	r1, r2, #5
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	440a      	add	r2, r1
 8008362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008366:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800836a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008378:	691a      	ldr	r2, [r3, #16]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008382:	6939      	ldr	r1, [r7, #16]
 8008384:	0148      	lsls	r0, r1, #5
 8008386:	6979      	ldr	r1, [r7, #20]
 8008388:	4401      	add	r1, r0
 800838a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800838e:	4313      	orrs	r3, r2
 8008390:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d10d      	bne.n	80083b4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d009      	beq.n	80083b4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	68d9      	ldr	r1, [r3, #12]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b0:	460a      	mov	r2, r1
 80083b2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	0151      	lsls	r1, r2, #5
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	440a      	add	r2, r1
 80083ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80083d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b089      	sub	sp, #36	; 0x24
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	4611      	mov	r1, r2
 80083ee:	461a      	mov	r2, r3
 80083f0:	460b      	mov	r3, r1
 80083f2:	71fb      	strb	r3, [r7, #7]
 80083f4:	4613      	mov	r3, r2
 80083f6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008400:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008404:	2b00      	cmp	r3, #0
 8008406:	d123      	bne.n	8008450 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008408:	88bb      	ldrh	r3, [r7, #4]
 800840a:	3303      	adds	r3, #3
 800840c:	089b      	lsrs	r3, r3, #2
 800840e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008410:	2300      	movs	r3, #0
 8008412:	61bb      	str	r3, [r7, #24]
 8008414:	e018      	b.n	8008448 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	031a      	lsls	r2, r3, #12
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	4413      	add	r3, r2
 800841e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008422:	461a      	mov	r2, r3
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6013      	str	r3, [r2, #0]
      pSrc++;
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	3301      	adds	r3, #1
 800842e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	3301      	adds	r3, #1
 8008434:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	3301      	adds	r3, #1
 800843a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	3301      	adds	r3, #1
 8008440:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	3301      	adds	r3, #1
 8008446:	61bb      	str	r3, [r7, #24]
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	429a      	cmp	r2, r3
 800844e:	d3e2      	bcc.n	8008416 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3724      	adds	r7, #36	; 0x24
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800845e:	b480      	push	{r7}
 8008460:	b08b      	sub	sp, #44	; 0x2c
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	4613      	mov	r3, r2
 800846a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008474:	88fb      	ldrh	r3, [r7, #6]
 8008476:	089b      	lsrs	r3, r3, #2
 8008478:	b29b      	uxth	r3, r3
 800847a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800847c:	88fb      	ldrh	r3, [r7, #6]
 800847e:	f003 0303 	and.w	r3, r3, #3
 8008482:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008484:	2300      	movs	r3, #0
 8008486:	623b      	str	r3, [r7, #32]
 8008488:	e014      	b.n	80084b4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	601a      	str	r2, [r3, #0]
    pDest++;
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	3301      	adds	r3, #1
 800849a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	3301      	adds	r3, #1
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	3301      	adds	r3, #1
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	3301      	adds	r3, #1
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80084ae:	6a3b      	ldr	r3, [r7, #32]
 80084b0:	3301      	adds	r3, #1
 80084b2:	623b      	str	r3, [r7, #32]
 80084b4:	6a3a      	ldr	r2, [r7, #32]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d3e6      	bcc.n	800848a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80084bc:	8bfb      	ldrh	r3, [r7, #30]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d01e      	beq.n	8008500 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084cc:	461a      	mov	r2, r3
 80084ce:	f107 0310 	add.w	r3, r7, #16
 80084d2:	6812      	ldr	r2, [r2, #0]
 80084d4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	fa22 f303 	lsr.w	r3, r2, r3
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	701a      	strb	r2, [r3, #0]
      i++;
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	3301      	adds	r3, #1
 80084ec:	623b      	str	r3, [r7, #32]
      pDest++;
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	3301      	adds	r3, #1
 80084f2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80084f4:	8bfb      	ldrh	r3, [r7, #30]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80084fa:	8bfb      	ldrh	r3, [r7, #30]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1ea      	bne.n	80084d6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008502:	4618      	mov	r0, r3
 8008504:	372c      	adds	r7, #44	; 0x2c
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800850e:	b480      	push	{r7}
 8008510:	b085      	sub	sp, #20
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d12c      	bne.n	8008584 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	db12      	blt.n	8008562 <USB_EPSetStall+0x54>
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00f      	beq.n	8008562 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	440a      	add	r2, r1
 8008558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800855c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008560:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	0151      	lsls	r1, r2, #5
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	440a      	add	r2, r1
 8008578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800857c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	e02b      	b.n	80085dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	db12      	blt.n	80085bc <USB_EPSetStall+0xae>
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00f      	beq.n	80085bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	0151      	lsls	r1, r2, #5
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	440a      	add	r2, r1
 80085b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	0151      	lsls	r1, r2, #5
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	440a      	add	r2, r1
 80085d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d128      	bne.n	8008658 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	0151      	lsls	r1, r2, #5
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	440a      	add	r2, r1
 800861c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008620:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008624:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	78db      	ldrb	r3, [r3, #3]
 800862a:	2b03      	cmp	r3, #3
 800862c:	d003      	beq.n	8008636 <USB_EPClearStall+0x4c>
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	78db      	ldrb	r3, [r3, #3]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d138      	bne.n	80086a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	440a      	add	r2, r1
 800864c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	e027      	b.n	80086a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	0151      	lsls	r1, r2, #5
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	440a      	add	r2, r1
 800866e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008676:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	78db      	ldrb	r3, [r3, #3]
 800867c:	2b03      	cmp	r3, #3
 800867e:	d003      	beq.n	8008688 <USB_EPClearStall+0x9e>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	78db      	ldrb	r3, [r3, #3]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d10f      	bne.n	80086a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	0151      	lsls	r1, r2, #5
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	440a      	add	r2, r1
 800869e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b085      	sub	sp, #20
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	460b      	mov	r3, r1
 80086c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80086d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	78fb      	ldrb	r3, [r7, #3]
 80086e4:	011b      	lsls	r3, r3, #4
 80086e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80086ea:	68f9      	ldr	r1, [r7, #12]
 80086ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086f0:	4313      	orrs	r3, r2
 80086f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008702:	b480      	push	{r7}
 8008704:	b085      	sub	sp, #20
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800871c:	f023 0303 	bic.w	r3, r3, #3
 8008720:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008730:	f023 0302 	bic.w	r3, r3, #2
 8008734:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800875e:	f023 0303 	bic.w	r3, r3, #3
 8008762:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008772:	f043 0302 	orr.w	r3, r3, #2
 8008776:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008786:	b480      	push	{r7}
 8008788:	b085      	sub	sp, #20
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4013      	ands	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800879e:	68fb      	ldr	r3, [r7, #12]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	4013      	ands	r3, r2
 80087ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	0c1b      	lsrs	r3, r3, #16
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	4013      	ands	r3, r2
 8008802:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	b29b      	uxth	r3, r3
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	4013      	ands	r3, r2
 8008840:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008842:	68bb      	ldr	r3, [r7, #8]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008850:	b480      	push	{r7}
 8008852:	b087      	sub	sp, #28
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008872:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008874:	78fb      	ldrb	r3, [r7, #3]
 8008876:	f003 030f 	and.w	r3, r3, #15
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	fa22 f303 	lsr.w	r3, r2, r3
 8008880:	01db      	lsls	r3, r3, #7
 8008882:	b2db      	uxtb	r3, r3
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4313      	orrs	r3, r2
 8008888:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800888a:	78fb      	ldrb	r3, [r7, #3]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	4413      	add	r3, r2
 8008892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4013      	ands	r3, r2
 800889c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800889e:	68bb      	ldr	r3, [r7, #8]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	f003 0301 	and.w	r3, r3, #1
}
 80088bc:	4618      	mov	r0, r3
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80088e6:	f023 0307 	bic.w	r3, r3, #7
 80088ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3714      	adds	r7, #20
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
	...

08008910 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	460b      	mov	r3, r1
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	333c      	adds	r3, #60	; 0x3c
 8008926:	3304      	adds	r3, #4
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	4a26      	ldr	r2, [pc, #152]	; (80089c8 <USB_EP0_OutStart+0xb8>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d90a      	bls.n	800894a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008944:	d101      	bne.n	800894a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	e037      	b.n	80089ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008950:	461a      	mov	r2, r3
 8008952:	2300      	movs	r3, #0
 8008954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008978:	f043 0318 	orr.w	r3, r3, #24
 800897c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800898c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008990:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008992:	7afb      	ldrb	r3, [r7, #11]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d10f      	bne.n	80089b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899e:	461a      	mov	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80089b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	371c      	adds	r7, #28
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	4f54300a 	.word	0x4f54300a

080089cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3301      	adds	r3, #1
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	4a13      	ldr	r2, [pc, #76]	; (8008a2c <USB_CoreReset+0x60>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d901      	bls.n	80089e8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e01a      	b.n	8008a1e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	daf3      	bge.n	80089d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	f043 0201 	orr.w	r2, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3301      	adds	r3, #1
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	4a09      	ldr	r2, [pc, #36]	; (8008a2c <USB_CoreReset+0x60>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d901      	bls.n	8008a10 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e006      	b.n	8008a1e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d0f1      	beq.n	8008a00 <USB_CoreReset+0x34>

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	00030d40 	.word	0x00030d40

08008a30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a40:	f003 f812 	bl	800ba68 <USBD_static_malloc>
 8008a44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d105      	bne.n	8008a58 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008a54:	2302      	movs	r3, #2
 8008a56:	e066      	b.n	8008b26 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	7c1b      	ldrb	r3, [r3, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d119      	bne.n	8008a9c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a6c:	2202      	movs	r2, #2
 8008a6e:	2181      	movs	r1, #129	; 0x81
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f002 fed6 	bl	800b822 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a80:	2202      	movs	r2, #2
 8008a82:	2101      	movs	r1, #1
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f002 fecc 	bl	800b822 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2210      	movs	r2, #16
 8008a96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008a9a:	e016      	b.n	8008aca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a9c:	2340      	movs	r3, #64	; 0x40
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	2181      	movs	r1, #129	; 0x81
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f002 febd 	bl	800b822 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008aae:	2340      	movs	r3, #64	; 0x40
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f002 feb4 	bl	800b822 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2210      	movs	r2, #16
 8008ac6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008aca:	2308      	movs	r3, #8
 8008acc:	2203      	movs	r2, #3
 8008ace:	2182      	movs	r1, #130	; 0x82
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f002 fea6 	bl	800b822 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	7c1b      	ldrb	r3, [r3, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d109      	bne.n	8008b14 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f002 ff77 	bl	800ba00 <USBD_LL_PrepareReceive>
 8008b12:	e007      	b.n	8008b24 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b1a:	2340      	movs	r3, #64	; 0x40
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f002 ff6e 	bl	800ba00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	460b      	mov	r3, r1
 8008b38:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008b3a:	2181      	movs	r1, #129	; 0x81
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f002 fe96 	bl	800b86e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008b48:	2101      	movs	r1, #1
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f002 fe8f 	bl	800b86e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008b58:	2182      	movs	r1, #130	; 0x82
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f002 fe87 	bl	800b86e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00e      	beq.n	8008b98 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f002 ff7a 	bl	800ba84 <USBD_static_free>
    pdev->pClassData = NULL;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e0af      	b.n	8008d2c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d03f      	beq.n	8008c58 <USBD_CDC_Setup+0xb4>
 8008bd8:	2b20      	cmp	r3, #32
 8008bda:	f040 809f 	bne.w	8008d1c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	88db      	ldrh	r3, [r3, #6]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d02e      	beq.n	8008c44 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	b25b      	sxtb	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	da16      	bge.n	8008c1e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008bfc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	88d2      	ldrh	r2, [r2, #6]
 8008c02:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	88db      	ldrh	r3, [r3, #6]
 8008c08:	2b07      	cmp	r3, #7
 8008c0a:	bf28      	it	cs
 8008c0c:	2307      	movcs	r3, #7
 8008c0e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	89fa      	ldrh	r2, [r7, #14]
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f001 fae9 	bl	800a1ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008c1c:	e085      	b.n	8008d2a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	785a      	ldrb	r2, [r3, #1]
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	88db      	ldrh	r3, [r3, #6]
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008c34:	6939      	ldr	r1, [r7, #16]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	88db      	ldrh	r3, [r3, #6]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 fb02 	bl	800a246 <USBD_CtlPrepareRx>
      break;
 8008c42:	e072      	b.n	8008d2a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	7850      	ldrb	r0, [r2, #1]
 8008c50:	2200      	movs	r2, #0
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	4798      	blx	r3
      break;
 8008c56:	e068      	b.n	8008d2a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	785b      	ldrb	r3, [r3, #1]
 8008c5c:	2b0b      	cmp	r3, #11
 8008c5e:	d852      	bhi.n	8008d06 <USBD_CDC_Setup+0x162>
 8008c60:	a201      	add	r2, pc, #4	; (adr r2, 8008c68 <USBD_CDC_Setup+0xc4>)
 8008c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c66:	bf00      	nop
 8008c68:	08008c99 	.word	0x08008c99
 8008c6c:	08008d15 	.word	0x08008d15
 8008c70:	08008d07 	.word	0x08008d07
 8008c74:	08008d07 	.word	0x08008d07
 8008c78:	08008d07 	.word	0x08008d07
 8008c7c:	08008d07 	.word	0x08008d07
 8008c80:	08008d07 	.word	0x08008d07
 8008c84:	08008d07 	.word	0x08008d07
 8008c88:	08008d07 	.word	0x08008d07
 8008c8c:	08008d07 	.word	0x08008d07
 8008c90:	08008cc3 	.word	0x08008cc3
 8008c94:	08008ced 	.word	0x08008ced
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d107      	bne.n	8008cb4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ca4:	f107 030a 	add.w	r3, r7, #10
 8008ca8:	2202      	movs	r2, #2
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 fa9e 	bl	800a1ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cb2:	e032      	b.n	8008d1a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f001 fa28 	bl	800a10c <USBD_CtlError>
            ret = USBD_FAIL;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	75fb      	strb	r3, [r7, #23]
          break;
 8008cc0:	e02b      	b.n	8008d1a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d107      	bne.n	8008cde <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008cce:	f107 030d 	add.w	r3, r7, #13
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f001 fa89 	bl	800a1ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cdc:	e01d      	b.n	8008d1a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 fa13 	bl	800a10c <USBD_CtlError>
            ret = USBD_FAIL;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	75fb      	strb	r3, [r7, #23]
          break;
 8008cea:	e016      	b.n	8008d1a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d00f      	beq.n	8008d18 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 fa06 	bl	800a10c <USBD_CtlError>
            ret = USBD_FAIL;
 8008d00:	2303      	movs	r3, #3
 8008d02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d04:	e008      	b.n	8008d18 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f001 f9ff 	bl	800a10c <USBD_CtlError>
          ret = USBD_FAIL;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	75fb      	strb	r3, [r7, #23]
          break;
 8008d12:	e002      	b.n	8008d1a <USBD_CDC_Setup+0x176>
          break;
 8008d14:	bf00      	nop
 8008d16:	e008      	b.n	8008d2a <USBD_CDC_Setup+0x186>
          break;
 8008d18:	bf00      	nop
      }
      break;
 8008d1a:	e006      	b.n	8008d2a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 f9f4 	bl	800a10c <USBD_CtlError>
      ret = USBD_FAIL;
 8008d24:	2303      	movs	r3, #3
 8008d26:	75fb      	strb	r3, [r7, #23]
      break;
 8008d28:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3718      	adds	r7, #24
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e04f      	b.n	8008df6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	6879      	ldr	r1, [r7, #4]
 8008d62:	4613      	mov	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	3318      	adds	r3, #24
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d029      	beq.n	8008dc8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008d74:	78fa      	ldrb	r2, [r7, #3]
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	3318      	adds	r3, #24
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	78f9      	ldrb	r1, [r7, #3]
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	1a5b      	subs	r3, r3, r1
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4403      	add	r3, r0
 8008d94:	3344      	adds	r3, #68	; 0x44
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d9c:	fb03 f301 	mul.w	r3, r3, r1
 8008da0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d110      	bne.n	8008dc8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008da6:	78fa      	ldrb	r2, [r7, #3]
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	440b      	add	r3, r1
 8008db4:	3318      	adds	r3, #24
 8008db6:	2200      	movs	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008dba:	78f9      	ldrb	r1, [r7, #3]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f002 fdfc 	bl	800b9be <USBD_LL_Transmit>
 8008dc6:	e015      	b.n	8008df4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008df0:	78fa      	ldrb	r2, [r7, #3]
 8008df2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e015      	b.n	8008e4c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f002 fe0c 	bl	800ba42 <USBD_LL_GetRxDataSize>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e46:	4611      	mov	r1, r2
 8008e48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e01b      	b.n	8008ea6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d015      	beq.n	8008ea4 <USBD_CDC_EP0_RxReady+0x50>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e7e:	2bff      	cmp	r3, #255	; 0xff
 8008e80:	d010      	beq.n	8008ea4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008e90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e98:	b292      	uxth	r2, r2
 8008e9a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	22ff      	movs	r2, #255	; 0xff
 8008ea0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2243      	movs	r2, #67	; 0x43
 8008ebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008ebe:	4b03      	ldr	r3, [pc, #12]	; (8008ecc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	20000090 	.word	0x20000090

08008ed0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2243      	movs	r2, #67	; 0x43
 8008edc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008ede:	4b03      	ldr	r3, [pc, #12]	; (8008eec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	2000004c 	.word	0x2000004c

08008ef0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2243      	movs	r2, #67	; 0x43
 8008efc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008efe:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	200000d4 	.word	0x200000d4

08008f10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	220a      	movs	r2, #10
 8008f1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008f1e:	4b03      	ldr	r3, [pc, #12]	; (8008f2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	20000008 	.word	0x20000008

08008f30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e004      	b.n	8008f4e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b087      	sub	sp, #28
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	60b9      	str	r1, [r7, #8]
 8008f64:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f6c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e008      	b.n	8008f8a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	371c      	adds	r7, #28
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b085      	sub	sp, #20
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fa6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e004      	b.n	8008fbc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e016      	b.n	8009014 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	7c1b      	ldrb	r3, [r3, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d109      	bne.n	8009002 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f002 fd00 	bl	800ba00 <USBD_LL_PrepareReceive>
 8009000:	e007      	b.n	8009012 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009008:	2340      	movs	r3, #64	; 0x40
 800900a:	2101      	movs	r1, #1
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f002 fcf7 	bl	800ba00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	4613      	mov	r3, r2
 8009028:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009030:	2303      	movs	r3, #3
 8009032:	e01f      	b.n	8009074 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	79fa      	ldrb	r2, [r7, #7]
 8009066:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f002 fb73 	bl	800b754 <USBD_LL_Init>
 800906e:	4603      	mov	r3, r0
 8009070:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009072:	7dfb      	ldrb	r3, [r7, #23]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009086:	2300      	movs	r3, #0
 8009088:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009090:	2303      	movs	r3, #3
 8009092:	e016      	b.n	80090c2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00b      	beq.n	80090c0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b0:	f107 020e 	add.w	r2, r7, #14
 80090b4:	4610      	mov	r0, r2
 80090b6:	4798      	blx	r3
 80090b8:	4602      	mov	r2, r0
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f002 fb8a 	bl	800b7ec <USBD_LL_Start>
 80090d8:	4603      	mov	r3, r0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	460b      	mov	r3, r1
 8009102:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009104:	2303      	movs	r3, #3
 8009106:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800910e:	2b00      	cmp	r3, #0
 8009110:	d009      	beq.n	8009126 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	78fa      	ldrb	r2, [r7, #3]
 800911c:	4611      	mov	r1, r2
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	4798      	blx	r3
 8009122:	4603      	mov	r3, r0
 8009124:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009142:	2b00      	cmp	r3, #0
 8009144:	d007      	beq.n	8009156 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	78fa      	ldrb	r2, [r7, #3]
 8009150:	4611      	mov	r1, r2
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	4798      	blx	r3
  }

  return USBD_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 ff90 	bl	800a098 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009186:	461a      	mov	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009194:	f003 031f 	and.w	r3, r3, #31
 8009198:	2b02      	cmp	r3, #2
 800919a:	d01a      	beq.n	80091d2 <USBD_LL_SetupStage+0x72>
 800919c:	2b02      	cmp	r3, #2
 800919e:	d822      	bhi.n	80091e6 <USBD_LL_SetupStage+0x86>
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <USBD_LL_SetupStage+0x4a>
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d00a      	beq.n	80091be <USBD_LL_SetupStage+0x5e>
 80091a8:	e01d      	b.n	80091e6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fa62 	bl	800967c <USBD_StdDevReq>
 80091b8:	4603      	mov	r3, r0
 80091ba:	73fb      	strb	r3, [r7, #15]
      break;
 80091bc:	e020      	b.n	8009200 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fac6 	bl	8009758 <USBD_StdItfReq>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]
      break;
 80091d0:	e016      	b.n	8009200 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fb05 	bl	80097ea <USBD_StdEPReq>
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]
      break;
 80091e4:	e00c      	b.n	8009200 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f002 fb59 	bl	800b8ac <USBD_LL_StallEP>
 80091fa:	4603      	mov	r3, r0
 80091fc:	73fb      	strb	r3, [r7, #15]
      break;
 80091fe:	bf00      	nop
  }

  return ret;
 8009200:	7bfb      	ldrb	r3, [r7, #15]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b086      	sub	sp, #24
 800920e:	af00      	add	r7, sp, #0
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	460b      	mov	r3, r1
 8009214:	607a      	str	r2, [r7, #4]
 8009216:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d138      	bne.n	8009290 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009224:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800922c:	2b03      	cmp	r3, #3
 800922e:	d14a      	bne.n	80092c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	429a      	cmp	r2, r3
 800923a:	d913      	bls.n	8009264 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	1ad2      	subs	r2, r2, r3
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	68da      	ldr	r2, [r3, #12]
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	4293      	cmp	r3, r2
 8009254:	bf28      	it	cs
 8009256:	4613      	movcs	r3, r2
 8009258:	461a      	mov	r2, r3
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f001 f80f 	bl	800a280 <USBD_CtlContinueRx>
 8009262:	e030      	b.n	80092c6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b03      	cmp	r3, #3
 800926e:	d10b      	bne.n	8009288 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d005      	beq.n	8009288 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f001 f80a 	bl	800a2a2 <USBD_CtlSendStatus>
 800928e:	e01a      	b.n	80092c6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b03      	cmp	r3, #3
 800929a:	d114      	bne.n	80092c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00e      	beq.n	80092c6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	7afa      	ldrb	r2, [r7, #11]
 80092b2:	4611      	mov	r1, r2
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	4798      	blx	r3
 80092b8:	4603      	mov	r3, r0
 80092ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
 80092c4:	e000      	b.n	80092c8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	460b      	mov	r3, r1
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d16b      	bne.n	80093bc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3314      	adds	r3, #20
 80092e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d156      	bne.n	80093a2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	689a      	ldr	r2, [r3, #8]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d914      	bls.n	800932a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	1ad2      	subs	r2, r2, r3
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	461a      	mov	r2, r3
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 ff84 	bl	800a224 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800931c:	2300      	movs	r3, #0
 800931e:	2200      	movs	r2, #0
 8009320:	2100      	movs	r1, #0
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f002 fb6c 	bl	800ba00 <USBD_LL_PrepareReceive>
 8009328:	e03b      	b.n	80093a2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	68da      	ldr	r2, [r3, #12]
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	429a      	cmp	r2, r3
 8009334:	d11c      	bne.n	8009370 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	685a      	ldr	r2, [r3, #4]
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800933e:	429a      	cmp	r2, r3
 8009340:	d316      	bcc.n	8009370 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800934c:	429a      	cmp	r2, r3
 800934e:	d20f      	bcs.n	8009370 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009350:	2200      	movs	r2, #0
 8009352:	2100      	movs	r1, #0
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 ff65 	bl	800a224 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009362:	2300      	movs	r3, #0
 8009364:	2200      	movs	r2, #0
 8009366:	2100      	movs	r1, #0
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f002 fb49 	bl	800ba00 <USBD_LL_PrepareReceive>
 800936e:	e018      	b.n	80093a2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b03      	cmp	r3, #3
 800937a:	d10b      	bne.n	8009394 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009394:	2180      	movs	r1, #128	; 0x80
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f002 fa88 	bl	800b8ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 ff93 	bl	800a2c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d122      	bne.n	80093f2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f7ff fe98 	bl	80090e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80093ba:	e01a      	b.n	80093f2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b03      	cmp	r3, #3
 80093c6:	d114      	bne.n	80093f2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00e      	beq.n	80093f2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	7afa      	ldrb	r2, [r7, #11]
 80093de:	4611      	mov	r1, r2
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	4798      	blx	r3
 80093e4:	4603      	mov	r3, r0
 80093e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	e000      	b.n	80093f4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800942c:	2303      	movs	r3, #3
 800942e:	e02f      	b.n	8009490 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00f      	beq.n	800945a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d009      	beq.n	800945a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	6852      	ldr	r2, [r2, #4]
 8009452:	b2d2      	uxtb	r2, r2
 8009454:	4611      	mov	r1, r2
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800945a:	2340      	movs	r3, #64	; 0x40
 800945c:	2200      	movs	r2, #0
 800945e:	2100      	movs	r1, #0
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f002 f9de 	bl	800b822 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2240      	movs	r2, #64	; 0x40
 8009472:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009476:	2340      	movs	r3, #64	; 0x40
 8009478:	2200      	movs	r2, #0
 800947a:	2180      	movs	r1, #128	; 0x80
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f002 f9d0 	bl	800b822 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2240      	movs	r2, #64	; 0x40
 800948c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	460b      	mov	r3, r1
 80094a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	78fa      	ldrb	r2, [r7, #3]
 80094a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2204      	movs	r2, #4
 80094d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d106      	bne.n	8009506 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009526:	2303      	movs	r3, #3
 8009528:	e012      	b.n	8009550 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b03      	cmp	r3, #3
 8009534:	d10b      	bne.n	800954e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d005      	beq.n	800954e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800956e:	2303      	movs	r3, #3
 8009570:	e014      	b.n	800959c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b03      	cmp	r3, #3
 800957c:	d10d      	bne.n	800959a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d007      	beq.n	800959a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	78fa      	ldrb	r2, [r7, #3]
 8009594:	4611      	mov	r1, r2
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e014      	b.n	80095e8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	d10d      	bne.n	80095e6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d007      	beq.n	80095e6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	78fa      	ldrb	r2, [r7, #3]
 80095e0:	4611      	mov	r1, r2
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b082      	sub	sp, #8
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961c:	2b00      	cmp	r3, #0
 800961e:	d009      	beq.n	8009634 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	6852      	ldr	r2, [r2, #4]
 800962c:	b2d2      	uxtb	r2, r2
 800962e:	4611      	mov	r1, r2
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	4798      	blx	r3
  }

  return USBD_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800963e:	b480      	push	{r7}
 8009640:	b087      	sub	sp, #28
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	3301      	adds	r3, #1
 8009654:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800965c:	8a3b      	ldrh	r3, [r7, #16]
 800965e:	021b      	lsls	r3, r3, #8
 8009660:	b21a      	sxth	r2, r3
 8009662:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009666:	4313      	orrs	r3, r2
 8009668:	b21b      	sxth	r3, r3
 800966a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800966c:	89fb      	ldrh	r3, [r7, #14]
}
 800966e:	4618      	mov	r0, r3
 8009670:	371c      	adds	r7, #28
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
	...

0800967c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009692:	2b40      	cmp	r3, #64	; 0x40
 8009694:	d005      	beq.n	80096a2 <USBD_StdDevReq+0x26>
 8009696:	2b40      	cmp	r3, #64	; 0x40
 8009698:	d853      	bhi.n	8009742 <USBD_StdDevReq+0xc6>
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00b      	beq.n	80096b6 <USBD_StdDevReq+0x3a>
 800969e:	2b20      	cmp	r3, #32
 80096a0:	d14f      	bne.n	8009742 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	4798      	blx	r3
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]
      break;
 80096b4:	e04a      	b.n	800974c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	785b      	ldrb	r3, [r3, #1]
 80096ba:	2b09      	cmp	r3, #9
 80096bc:	d83b      	bhi.n	8009736 <USBD_StdDevReq+0xba>
 80096be:	a201      	add	r2, pc, #4	; (adr r2, 80096c4 <USBD_StdDevReq+0x48>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	08009719 	.word	0x08009719
 80096c8:	0800972d 	.word	0x0800972d
 80096cc:	08009737 	.word	0x08009737
 80096d0:	08009723 	.word	0x08009723
 80096d4:	08009737 	.word	0x08009737
 80096d8:	080096f7 	.word	0x080096f7
 80096dc:	080096ed 	.word	0x080096ed
 80096e0:	08009737 	.word	0x08009737
 80096e4:	0800970f 	.word	0x0800970f
 80096e8:	08009701 	.word	0x08009701
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f9de 	bl	8009ab0 <USBD_GetDescriptor>
          break;
 80096f4:	e024      	b.n	8009740 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fb43 	bl	8009d84 <USBD_SetAddress>
          break;
 80096fe:	e01f      	b.n	8009740 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fb82 	bl	8009e0c <USBD_SetConfig>
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]
          break;
 800970c:	e018      	b.n	8009740 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fc21 	bl	8009f58 <USBD_GetConfig>
          break;
 8009716:	e013      	b.n	8009740 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fc52 	bl	8009fc4 <USBD_GetStatus>
          break;
 8009720:	e00e      	b.n	8009740 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fc81 	bl	800a02c <USBD_SetFeature>
          break;
 800972a:	e009      	b.n	8009740 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fc90 	bl	800a054 <USBD_ClrFeature>
          break;
 8009734:	e004      	b.n	8009740 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fce7 	bl	800a10c <USBD_CtlError>
          break;
 800973e:	bf00      	nop
      }
      break;
 8009740:	e004      	b.n	800974c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fce1 	bl	800a10c <USBD_CtlError>
      break;
 800974a:	bf00      	nop
  }

  return ret;
 800974c:	7bfb      	ldrb	r3, [r7, #15]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop

08009758 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800976e:	2b40      	cmp	r3, #64	; 0x40
 8009770:	d005      	beq.n	800977e <USBD_StdItfReq+0x26>
 8009772:	2b40      	cmp	r3, #64	; 0x40
 8009774:	d82f      	bhi.n	80097d6 <USBD_StdItfReq+0x7e>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <USBD_StdItfReq+0x26>
 800977a:	2b20      	cmp	r3, #32
 800977c:	d12b      	bne.n	80097d6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009784:	b2db      	uxtb	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	2b02      	cmp	r3, #2
 800978a:	d81d      	bhi.n	80097c8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	889b      	ldrh	r3, [r3, #4]
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b01      	cmp	r3, #1
 8009794:	d813      	bhi.n	80097be <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	4798      	blx	r3
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	88db      	ldrh	r3, [r3, #6]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d110      	bne.n	80097d2 <USBD_StdItfReq+0x7a>
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10d      	bne.n	80097d2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fd73 	bl	800a2a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097bc:	e009      	b.n	80097d2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fca3 	bl	800a10c <USBD_CtlError>
          break;
 80097c6:	e004      	b.n	80097d2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fc9e 	bl	800a10c <USBD_CtlError>
          break;
 80097d0:	e000      	b.n	80097d4 <USBD_StdItfReq+0x7c>
          break;
 80097d2:	bf00      	nop
      }
      break;
 80097d4:	e004      	b.n	80097e0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fc97 	bl	800a10c <USBD_CtlError>
      break;
 80097de:	bf00      	nop
  }

  return ret;
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	889b      	ldrh	r3, [r3, #4]
 80097fc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009806:	2b40      	cmp	r3, #64	; 0x40
 8009808:	d007      	beq.n	800981a <USBD_StdEPReq+0x30>
 800980a:	2b40      	cmp	r3, #64	; 0x40
 800980c:	f200 8145 	bhi.w	8009a9a <USBD_StdEPReq+0x2b0>
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00c      	beq.n	800982e <USBD_StdEPReq+0x44>
 8009814:	2b20      	cmp	r3, #32
 8009816:	f040 8140 	bne.w	8009a9a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	4798      	blx	r3
 8009828:	4603      	mov	r3, r0
 800982a:	73fb      	strb	r3, [r7, #15]
      break;
 800982c:	e13a      	b.n	8009aa4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	785b      	ldrb	r3, [r3, #1]
 8009832:	2b03      	cmp	r3, #3
 8009834:	d007      	beq.n	8009846 <USBD_StdEPReq+0x5c>
 8009836:	2b03      	cmp	r3, #3
 8009838:	f300 8129 	bgt.w	8009a8e <USBD_StdEPReq+0x2a4>
 800983c:	2b00      	cmp	r3, #0
 800983e:	d07f      	beq.n	8009940 <USBD_StdEPReq+0x156>
 8009840:	2b01      	cmp	r3, #1
 8009842:	d03c      	beq.n	80098be <USBD_StdEPReq+0xd4>
 8009844:	e123      	b.n	8009a8e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b02      	cmp	r3, #2
 8009850:	d002      	beq.n	8009858 <USBD_StdEPReq+0x6e>
 8009852:	2b03      	cmp	r3, #3
 8009854:	d016      	beq.n	8009884 <USBD_StdEPReq+0x9a>
 8009856:	e02c      	b.n	80098b2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009858:	7bbb      	ldrb	r3, [r7, #14]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00d      	beq.n	800987a <USBD_StdEPReq+0x90>
 800985e:	7bbb      	ldrb	r3, [r7, #14]
 8009860:	2b80      	cmp	r3, #128	; 0x80
 8009862:	d00a      	beq.n	800987a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f002 f81f 	bl	800b8ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800986e:	2180      	movs	r1, #128	; 0x80
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f002 f81b 	bl	800b8ac <USBD_LL_StallEP>
 8009876:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009878:	e020      	b.n	80098bc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fc45 	bl	800a10c <USBD_CtlError>
              break;
 8009882:	e01b      	b.n	80098bc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	885b      	ldrh	r3, [r3, #2]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10e      	bne.n	80098aa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00b      	beq.n	80098aa <USBD_StdEPReq+0xc0>
 8009892:	7bbb      	ldrb	r3, [r7, #14]
 8009894:	2b80      	cmp	r3, #128	; 0x80
 8009896:	d008      	beq.n	80098aa <USBD_StdEPReq+0xc0>
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	88db      	ldrh	r3, [r3, #6]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d104      	bne.n	80098aa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f002 f801 	bl	800b8ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fcf9 	bl	800a2a2 <USBD_CtlSendStatus>

              break;
 80098b0:	e004      	b.n	80098bc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fc29 	bl	800a10c <USBD_CtlError>
              break;
 80098ba:	bf00      	nop
          }
          break;
 80098bc:	e0ec      	b.n	8009a98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d002      	beq.n	80098d0 <USBD_StdEPReq+0xe6>
 80098ca:	2b03      	cmp	r3, #3
 80098cc:	d016      	beq.n	80098fc <USBD_StdEPReq+0x112>
 80098ce:	e030      	b.n	8009932 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00d      	beq.n	80098f2 <USBD_StdEPReq+0x108>
 80098d6:	7bbb      	ldrb	r3, [r7, #14]
 80098d8:	2b80      	cmp	r3, #128	; 0x80
 80098da:	d00a      	beq.n	80098f2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f001 ffe3 	bl	800b8ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098e6:	2180      	movs	r1, #128	; 0x80
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f001 ffdf 	bl	800b8ac <USBD_LL_StallEP>
 80098ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098f0:	e025      	b.n	800993e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fc09 	bl	800a10c <USBD_CtlError>
              break;
 80098fa:	e020      	b.n	800993e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	885b      	ldrh	r3, [r3, #2]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d11b      	bne.n	800993c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800990a:	2b00      	cmp	r3, #0
 800990c:	d004      	beq.n	8009918 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f001 ffe9 	bl	800b8ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fcc2 	bl	800a2a2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	4798      	blx	r3
 800992c:	4603      	mov	r3, r0
 800992e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009930:	e004      	b.n	800993c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fbe9 	bl	800a10c <USBD_CtlError>
              break;
 800993a:	e000      	b.n	800993e <USBD_StdEPReq+0x154>
              break;
 800993c:	bf00      	nop
          }
          break;
 800993e:	e0ab      	b.n	8009a98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b02      	cmp	r3, #2
 800994a:	d002      	beq.n	8009952 <USBD_StdEPReq+0x168>
 800994c:	2b03      	cmp	r3, #3
 800994e:	d032      	beq.n	80099b6 <USBD_StdEPReq+0x1cc>
 8009950:	e097      	b.n	8009a82 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d007      	beq.n	8009968 <USBD_StdEPReq+0x17e>
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	2b80      	cmp	r3, #128	; 0x80
 800995c:	d004      	beq.n	8009968 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fbd3 	bl	800a10c <USBD_CtlError>
                break;
 8009966:	e091      	b.n	8009a8c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800996c:	2b00      	cmp	r3, #0
 800996e:	da0b      	bge.n	8009988 <USBD_StdEPReq+0x19e>
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	3310      	adds	r3, #16
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	4413      	add	r3, r2
 8009984:	3304      	adds	r3, #4
 8009986:	e00b      	b.n	80099a0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009988:	7bbb      	ldrb	r3, [r7, #14]
 800998a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800998e:	4613      	mov	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	4413      	add	r3, r2
 800999e:	3304      	adds	r3, #4
 80099a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	2202      	movs	r2, #2
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fc1d 	bl	800a1ee <USBD_CtlSendData>
              break;
 80099b4:	e06a      	b.n	8009a8c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80099b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	da11      	bge.n	80099e2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	f003 020f 	and.w	r2, r3, #15
 80099c4:	6879      	ldr	r1, [r7, #4]
 80099c6:	4613      	mov	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	440b      	add	r3, r1
 80099d0:	3324      	adds	r3, #36	; 0x24
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d117      	bne.n	8009a08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fb96 	bl	800a10c <USBD_CtlError>
                  break;
 80099e0:	e054      	b.n	8009a8c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	f003 020f 	and.w	r2, r3, #15
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	440b      	add	r3, r1
 80099f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099f8:	881b      	ldrh	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d104      	bne.n	8009a08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fb83 	bl	800a10c <USBD_CtlError>
                  break;
 8009a06:	e041      	b.n	8009a8c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	da0b      	bge.n	8009a28 <USBD_StdEPReq+0x23e>
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
 8009a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a16:	4613      	mov	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	3310      	adds	r3, #16
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	4413      	add	r3, r2
 8009a24:	3304      	adds	r3, #4
 8009a26:	e00b      	b.n	8009a40 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	3304      	adds	r3, #4
 8009a40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a42:	7bbb      	ldrb	r3, [r7, #14]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d002      	beq.n	8009a4e <USBD_StdEPReq+0x264>
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
 8009a4a:	2b80      	cmp	r3, #128	; 0x80
 8009a4c:	d103      	bne.n	8009a56 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e00e      	b.n	8009a74 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f001 ff64 	bl	800b928 <USBD_LL_IsStallEP>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d003      	beq.n	8009a6e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	e002      	b.n	8009a74 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2200      	movs	r2, #0
 8009a72:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2202      	movs	r2, #2
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fbb7 	bl	800a1ee <USBD_CtlSendData>
              break;
 8009a80:	e004      	b.n	8009a8c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009a82:	6839      	ldr	r1, [r7, #0]
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fb41 	bl	800a10c <USBD_CtlError>
              break;
 8009a8a:	bf00      	nop
          }
          break;
 8009a8c:	e004      	b.n	8009a98 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fb3b 	bl	800a10c <USBD_CtlError>
          break;
 8009a96:	bf00      	nop
      }
      break;
 8009a98:	e004      	b.n	8009aa4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fb35 	bl	800a10c <USBD_CtlError>
      break;
 8009aa2:	bf00      	nop
  }

  return ret;
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	885b      	ldrh	r3, [r3, #2]
 8009aca:	0a1b      	lsrs	r3, r3, #8
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	2b06      	cmp	r3, #6
 8009ad2:	f200 8128 	bhi.w	8009d26 <USBD_GetDescriptor+0x276>
 8009ad6:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <USBD_GetDescriptor+0x2c>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009af9 	.word	0x08009af9
 8009ae0:	08009b11 	.word	0x08009b11
 8009ae4:	08009b51 	.word	0x08009b51
 8009ae8:	08009d27 	.word	0x08009d27
 8009aec:	08009d27 	.word	0x08009d27
 8009af0:	08009cc7 	.word	0x08009cc7
 8009af4:	08009cf3 	.word	0x08009cf3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	7c12      	ldrb	r2, [r2, #16]
 8009b04:	f107 0108 	add.w	r1, r7, #8
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4798      	blx	r3
 8009b0c:	60f8      	str	r0, [r7, #12]
      break;
 8009b0e:	e112      	b.n	8009d36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7c1b      	ldrb	r3, [r3, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10d      	bne.n	8009b34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b20:	f107 0208 	add.w	r2, r7, #8
 8009b24:	4610      	mov	r0, r2
 8009b26:	4798      	blx	r3
 8009b28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	2202      	movs	r2, #2
 8009b30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b32:	e100      	b.n	8009d36 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3c:	f107 0208 	add.w	r2, r7, #8
 8009b40:	4610      	mov	r0, r2
 8009b42:	4798      	blx	r3
 8009b44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	701a      	strb	r2, [r3, #0]
      break;
 8009b4e:	e0f2      	b.n	8009d36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	885b      	ldrh	r3, [r3, #2]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b05      	cmp	r3, #5
 8009b58:	f200 80ac 	bhi.w	8009cb4 <USBD_GetDescriptor+0x204>
 8009b5c:	a201      	add	r2, pc, #4	; (adr r2, 8009b64 <USBD_GetDescriptor+0xb4>)
 8009b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b62:	bf00      	nop
 8009b64:	08009b7d 	.word	0x08009b7d
 8009b68:	08009bb1 	.word	0x08009bb1
 8009b6c:	08009be5 	.word	0x08009be5
 8009b70:	08009c19 	.word	0x08009c19
 8009b74:	08009c4d 	.word	0x08009c4d
 8009b78:	08009c81 	.word	0x08009c81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00b      	beq.n	8009ba0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	7c12      	ldrb	r2, [r2, #16]
 8009b94:	f107 0108 	add.w	r1, r7, #8
 8009b98:	4610      	mov	r0, r2
 8009b9a:	4798      	blx	r3
 8009b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b9e:	e091      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fab2 	bl	800a10c <USBD_CtlError>
            err++;
 8009ba8:	7afb      	ldrb	r3, [r7, #11]
 8009baa:	3301      	adds	r3, #1
 8009bac:	72fb      	strb	r3, [r7, #11]
          break;
 8009bae:	e089      	b.n	8009cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00b      	beq.n	8009bd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	7c12      	ldrb	r2, [r2, #16]
 8009bc8:	f107 0108 	add.w	r1, r7, #8
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4798      	blx	r3
 8009bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bd2:	e077      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fa98 	bl	800a10c <USBD_CtlError>
            err++;
 8009bdc:	7afb      	ldrb	r3, [r7, #11]
 8009bde:	3301      	adds	r3, #1
 8009be0:	72fb      	strb	r3, [r7, #11]
          break;
 8009be2:	e06f      	b.n	8009cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00b      	beq.n	8009c08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	7c12      	ldrb	r2, [r2, #16]
 8009bfc:	f107 0108 	add.w	r1, r7, #8
 8009c00:	4610      	mov	r0, r2
 8009c02:	4798      	blx	r3
 8009c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c06:	e05d      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fa7e 	bl	800a10c <USBD_CtlError>
            err++;
 8009c10:	7afb      	ldrb	r3, [r7, #11]
 8009c12:	3301      	adds	r3, #1
 8009c14:	72fb      	strb	r3, [r7, #11]
          break;
 8009c16:	e055      	b.n	8009cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00b      	beq.n	8009c3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	7c12      	ldrb	r2, [r2, #16]
 8009c30:	f107 0108 	add.w	r1, r7, #8
 8009c34:	4610      	mov	r0, r2
 8009c36:	4798      	blx	r3
 8009c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c3a:	e043      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fa64 	bl	800a10c <USBD_CtlError>
            err++;
 8009c44:	7afb      	ldrb	r3, [r7, #11]
 8009c46:	3301      	adds	r3, #1
 8009c48:	72fb      	strb	r3, [r7, #11]
          break;
 8009c4a:	e03b      	b.n	8009cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00b      	beq.n	8009c70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	7c12      	ldrb	r2, [r2, #16]
 8009c64:	f107 0108 	add.w	r1, r7, #8
 8009c68:	4610      	mov	r0, r2
 8009c6a:	4798      	blx	r3
 8009c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c6e:	e029      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa4a 	bl	800a10c <USBD_CtlError>
            err++;
 8009c78:	7afb      	ldrb	r3, [r7, #11]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c7e:	e021      	b.n	8009cc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00b      	beq.n	8009ca4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	7c12      	ldrb	r2, [r2, #16]
 8009c98:	f107 0108 	add.w	r1, r7, #8
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	4798      	blx	r3
 8009ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ca2:	e00f      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fa30 	bl	800a10c <USBD_CtlError>
            err++;
 8009cac:	7afb      	ldrb	r3, [r7, #11]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8009cb2:	e007      	b.n	8009cc4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fa28 	bl	800a10c <USBD_CtlError>
          err++;
 8009cbc:	7afb      	ldrb	r3, [r7, #11]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009cc2:	bf00      	nop
      }
      break;
 8009cc4:	e037      	b.n	8009d36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	7c1b      	ldrb	r3, [r3, #16]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d109      	bne.n	8009ce2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd6:	f107 0208 	add.w	r2, r7, #8
 8009cda:	4610      	mov	r0, r2
 8009cdc:	4798      	blx	r3
 8009cde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ce0:	e029      	b.n	8009d36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fa11 	bl	800a10c <USBD_CtlError>
        err++;
 8009cea:	7afb      	ldrb	r3, [r7, #11]
 8009cec:	3301      	adds	r3, #1
 8009cee:	72fb      	strb	r3, [r7, #11]
      break;
 8009cf0:	e021      	b.n	8009d36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	7c1b      	ldrb	r3, [r3, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10d      	bne.n	8009d16 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d02:	f107 0208 	add.w	r2, r7, #8
 8009d06:	4610      	mov	r0, r2
 8009d08:	4798      	blx	r3
 8009d0a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	2207      	movs	r2, #7
 8009d12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d14:	e00f      	b.n	8009d36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f9f7 	bl	800a10c <USBD_CtlError>
        err++;
 8009d1e:	7afb      	ldrb	r3, [r7, #11]
 8009d20:	3301      	adds	r3, #1
 8009d22:	72fb      	strb	r3, [r7, #11]
      break;
 8009d24:	e007      	b.n	8009d36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f9ef 	bl	800a10c <USBD_CtlError>
      err++;
 8009d2e:	7afb      	ldrb	r3, [r7, #11]
 8009d30:	3301      	adds	r3, #1
 8009d32:	72fb      	strb	r3, [r7, #11]
      break;
 8009d34:	bf00      	nop
  }

  if (err != 0U)
 8009d36:	7afb      	ldrb	r3, [r7, #11]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d11e      	bne.n	8009d7a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	88db      	ldrh	r3, [r3, #6]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d016      	beq.n	8009d72 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009d44:	893b      	ldrh	r3, [r7, #8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00e      	beq.n	8009d68 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	88da      	ldrh	r2, [r3, #6]
 8009d4e:	893b      	ldrh	r3, [r7, #8]
 8009d50:	4293      	cmp	r3, r2
 8009d52:	bf28      	it	cs
 8009d54:	4613      	movcs	r3, r2
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d5a:	893b      	ldrh	r3, [r7, #8]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	68f9      	ldr	r1, [r7, #12]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fa44 	bl	800a1ee <USBD_CtlSendData>
 8009d66:	e009      	b.n	8009d7c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f9ce 	bl	800a10c <USBD_CtlError>
 8009d70:	e004      	b.n	8009d7c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fa95 	bl	800a2a2 <USBD_CtlSendStatus>
 8009d78:	e000      	b.n	8009d7c <USBD_GetDescriptor+0x2cc>
    return;
 8009d7a:	bf00      	nop
  }
}
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop

08009d84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	889b      	ldrh	r3, [r3, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d131      	bne.n	8009dfa <USBD_SetAddress+0x76>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	88db      	ldrh	r3, [r3, #6]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d12d      	bne.n	8009dfa <USBD_SetAddress+0x76>
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	885b      	ldrh	r3, [r3, #2]
 8009da2:	2b7f      	cmp	r3, #127	; 0x7f
 8009da4:	d829      	bhi.n	8009dfa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	885b      	ldrh	r3, [r3, #2]
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009db0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	d104      	bne.n	8009dc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009dbe:	6839      	ldr	r1, [r7, #0]
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f9a3 	bl	800a10c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc6:	e01d      	b.n	8009e04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	7bfa      	ldrb	r2, [r7, #15]
 8009dcc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f001 fdd3 	bl	800b980 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fa61 	bl	800a2a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d004      	beq.n	8009df0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2202      	movs	r2, #2
 8009dea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dee:	e009      	b.n	8009e04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df8:	e004      	b.n	8009e04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f985 	bl	800a10c <USBD_CtlError>
  }
}
 8009e02:	bf00      	nop
 8009e04:	bf00      	nop
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	885b      	ldrh	r3, [r3, #2]
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	4b4c      	ldr	r3, [pc, #304]	; (8009f54 <USBD_SetConfig+0x148>)
 8009e22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e24:	4b4b      	ldr	r3, [pc, #300]	; (8009f54 <USBD_SetConfig+0x148>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d905      	bls.n	8009e38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f96c 	bl	800a10c <USBD_CtlError>
    return USBD_FAIL;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e088      	b.n	8009f4a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d002      	beq.n	8009e4a <USBD_SetConfig+0x3e>
 8009e44:	2b03      	cmp	r3, #3
 8009e46:	d025      	beq.n	8009e94 <USBD_SetConfig+0x88>
 8009e48:	e071      	b.n	8009f2e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009e4a:	4b42      	ldr	r3, [pc, #264]	; (8009f54 <USBD_SetConfig+0x148>)
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d01c      	beq.n	8009e8c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009e52:	4b40      	ldr	r3, [pc, #256]	; (8009f54 <USBD_SetConfig+0x148>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e5c:	4b3d      	ldr	r3, [pc, #244]	; (8009f54 <USBD_SetConfig+0x148>)
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7ff f948 	bl	80090f8 <USBD_SetClassConfig>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009e72:	6839      	ldr	r1, [r7, #0]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f949 	bl	800a10c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e7a:	e065      	b.n	8009f48 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fa10 	bl	800a2a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2203      	movs	r2, #3
 8009e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e8a:	e05d      	b.n	8009f48 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fa08 	bl	800a2a2 <USBD_CtlSendStatus>
      break;
 8009e92:	e059      	b.n	8009f48 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e94:	4b2f      	ldr	r3, [pc, #188]	; (8009f54 <USBD_SetConfig+0x148>)
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d112      	bne.n	8009ec2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009ea4:	4b2b      	ldr	r3, [pc, #172]	; (8009f54 <USBD_SetConfig+0x148>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009eae:	4b29      	ldr	r3, [pc, #164]	; (8009f54 <USBD_SetConfig+0x148>)
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7ff f93b 	bl	8009130 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f9f1 	bl	800a2a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ec0:	e042      	b.n	8009f48 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009ec2:	4b24      	ldr	r3, [pc, #144]	; (8009f54 <USBD_SetConfig+0x148>)
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d02a      	beq.n	8009f26 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7ff f929 	bl	8009130 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009ede:	4b1d      	ldr	r3, [pc, #116]	; (8009f54 <USBD_SetConfig+0x148>)
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ee8:	4b1a      	ldr	r3, [pc, #104]	; (8009f54 <USBD_SetConfig+0x148>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	4619      	mov	r1, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7ff f902 	bl	80090f8 <USBD_SetClassConfig>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00f      	beq.n	8009f1e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f903 	bl	800a10c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7ff f90e 	bl	8009130 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2202      	movs	r2, #2
 8009f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f1c:	e014      	b.n	8009f48 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f9bf 	bl	800a2a2 <USBD_CtlSendStatus>
      break;
 8009f24:	e010      	b.n	8009f48 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f9bb 	bl	800a2a2 <USBD_CtlSendStatus>
      break;
 8009f2c:	e00c      	b.n	8009f48 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f8eb 	bl	800a10c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f36:	4b07      	ldr	r3, [pc, #28]	; (8009f54 <USBD_SetConfig+0x148>)
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7ff f8f7 	bl	8009130 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009f42:	2303      	movs	r3, #3
 8009f44:	73fb      	strb	r3, [r7, #15]
      break;
 8009f46:	bf00      	nop
  }

  return ret;
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	2000019c 	.word	0x2000019c

08009f58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	88db      	ldrh	r3, [r3, #6]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d004      	beq.n	8009f74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f8cd 	bl	800a10c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f72:	e023      	b.n	8009fbc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	dc02      	bgt.n	8009f86 <USBD_GetConfig+0x2e>
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	dc03      	bgt.n	8009f8c <USBD_GetConfig+0x34>
 8009f84:	e015      	b.n	8009fb2 <USBD_GetConfig+0x5a>
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d00b      	beq.n	8009fa2 <USBD_GetConfig+0x4a>
 8009f8a:	e012      	b.n	8009fb2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	3308      	adds	r3, #8
 8009f96:	2201      	movs	r2, #1
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f927 	bl	800a1ee <USBD_CtlSendData>
        break;
 8009fa0:	e00c      	b.n	8009fbc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f91f 	bl	800a1ee <USBD_CtlSendData>
        break;
 8009fb0:	e004      	b.n	8009fbc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 f8a9 	bl	800a10c <USBD_CtlError>
        break;
 8009fba:	bf00      	nop
}
 8009fbc:	bf00      	nop
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d81e      	bhi.n	800a01a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	88db      	ldrh	r3, [r3, #6]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d004      	beq.n	8009fee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f890 	bl	800a10c <USBD_CtlError>
        break;
 8009fec:	e01a      	b.n	800a024 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d005      	beq.n	800a00a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	f043 0202 	orr.w	r2, r3, #2
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	330c      	adds	r3, #12
 800a00e:	2202      	movs	r2, #2
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f8eb 	bl	800a1ee <USBD_CtlSendData>
      break;
 800a018:	e004      	b.n	800a024 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f875 	bl	800a10c <USBD_CtlError>
      break;
 800a022:	bf00      	nop
  }
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	885b      	ldrh	r3, [r3, #2]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d106      	bne.n	800a04c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f92b 	bl	800a2a2 <USBD_CtlSendStatus>
  }
}
 800a04c:	bf00      	nop
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a064:	b2db      	uxtb	r3, r3
 800a066:	3b01      	subs	r3, #1
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d80b      	bhi.n	800a084 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	885b      	ldrh	r3, [r3, #2]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d10c      	bne.n	800a08e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f910 	bl	800a2a2 <USBD_CtlSendStatus>
      }
      break;
 800a082:	e004      	b.n	800a08e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f840 	bl	800a10c <USBD_CtlError>
      break;
 800a08c:	e000      	b.n	800a090 <USBD_ClrFeature+0x3c>
      break;
 800a08e:	bf00      	nop
  }
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	781a      	ldrb	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	781a      	ldrb	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f7ff fabb 	bl	800963e <SWAPBYTE>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f7ff faae 	bl	800963e <SWAPBYTE>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f7ff faa1 	bl	800963e <SWAPBYTE>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	461a      	mov	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	80da      	strh	r2, [r3, #6]
}
 800a104:	bf00      	nop
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a116:	2180      	movs	r1, #128	; 0x80
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 fbc7 	bl	800b8ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a11e:	2100      	movs	r1, #0
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f001 fbc3 	bl	800b8ac <USBD_LL_StallEP>
}
 800a126:	bf00      	nop
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b086      	sub	sp, #24
 800a132:	af00      	add	r7, sp, #0
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	60b9      	str	r1, [r7, #8]
 800a138:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d036      	beq.n	800a1b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a148:	6938      	ldr	r0, [r7, #16]
 800a14a:	f000 f836 	bl	800a1ba <USBD_GetLen>
 800a14e:	4603      	mov	r3, r0
 800a150:	3301      	adds	r3, #1
 800a152:	b29b      	uxth	r3, r3
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	b29a      	uxth	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	4413      	add	r3, r2
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	7812      	ldrb	r2, [r2, #0]
 800a166:	701a      	strb	r2, [r3, #0]
  idx++;
 800a168:	7dfb      	ldrb	r3, [r7, #23]
 800a16a:	3301      	adds	r3, #1
 800a16c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	4413      	add	r3, r2
 800a174:	2203      	movs	r2, #3
 800a176:	701a      	strb	r2, [r3, #0]
  idx++;
 800a178:	7dfb      	ldrb	r3, [r7, #23]
 800a17a:	3301      	adds	r3, #1
 800a17c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a17e:	e013      	b.n	800a1a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a180:	7dfb      	ldrb	r3, [r7, #23]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	4413      	add	r3, r2
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	7812      	ldrb	r2, [r2, #0]
 800a18a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	3301      	adds	r3, #1
 800a190:	613b      	str	r3, [r7, #16]
    idx++;
 800a192:	7dfb      	ldrb	r3, [r7, #23]
 800a194:	3301      	adds	r3, #1
 800a196:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a198:	7dfb      	ldrb	r3, [r7, #23]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	4413      	add	r3, r2
 800a19e:	2200      	movs	r2, #0
 800a1a0:	701a      	strb	r2, [r3, #0]
    idx++;
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1e7      	bne.n	800a180 <USBD_GetString+0x52>
 800a1b0:	e000      	b.n	800a1b4 <USBD_GetString+0x86>
    return;
 800a1b2:	bf00      	nop
  }
}
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b085      	sub	sp, #20
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a1ca:	e005      	b.n	800a1d8 <USBD_GetLen+0x1e>
  {
    len++;
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1f5      	bne.n	800a1cc <USBD_GetLen+0x12>
  }

  return len;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2202      	movs	r2, #2
 800a1fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	2100      	movs	r1, #0
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f001 fbd2 	bl	800b9be <USBD_LL_Transmit>

  return USBD_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	2100      	movs	r1, #0
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f001 fbc1 	bl	800b9be <USBD_LL_Transmit>

  return USBD_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	60f8      	str	r0, [r7, #12]
 800a24e:	60b9      	str	r1, [r7, #8]
 800a250:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2203      	movs	r2, #3
 800a256:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	2100      	movs	r1, #0
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f001 fbc5 	bl	800ba00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	2100      	movs	r1, #0
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f001 fbb4 	bl	800ba00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2204      	movs	r2, #4
 800a2ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f001 fb80 	bl	800b9be <USBD_LL_Transmit>

  return USBD_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2205      	movs	r2, #5
 800a2d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2d8:	2300      	movs	r3, #0
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2100      	movs	r1, #0
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f001 fb8e 	bl	800ba00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
	...

0800a2f0 <ApplicationPerform>:


/* Interfaced functions */

void ApplicationPerform()
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0

	switch(sApplicationBase.eApplicationState)
 800a2f4:	4b17      	ldr	r3, [pc, #92]	; (800a354 <ApplicationPerform+0x64>)
 800a2f6:	7e5b      	ldrb	r3, [r3, #25]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b03      	cmp	r3, #3
 800a2fc:	d822      	bhi.n	800a344 <ApplicationPerform+0x54>
 800a2fe:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <ApplicationPerform+0x14>)
 800a300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a304:	0800a315 	.word	0x0800a315
 800a308:	0800a323 	.word	0x0800a323
 800a30c:	0800a33f 	.word	0x0800a33f
 800a310:	0800a34d 	.word	0x0800a34d
	{
	case eApp_EntryState:
		OperateLED_A(eLED_On);
 800a314:	2000      	movs	r0, #0
 800a316:	f7f6 f8db 	bl	80004d0 <OperateLED_A>
		AppStateChangeRequest(eApp_Initialization);
 800a31a:	2001      	movs	r0, #1
 800a31c:	f000 f8a6 	bl	800a46c <AppStateChangeRequest>
		break;
 800a320:	e015      	b.n	800a34e <ApplicationPerform+0x5e>

	case eApp_Initialization:
		AppEnableResetTaskTimers();
 800a322:	f000 f8ef 	bl	800a504 <AppEnableResetTaskTimers>
		TempCollect_Initialize();
 800a326:	f000 fa9f 	bl	800a868 <TempCollect_Initialize>
		DataHandler_Initialize();
 800a32a:	f000 f92f 	bl	800a58c <DataHandler_Initialize>
		TurnAllSensorOn();
 800a32e:	f7f6 f931 	bl	8000594 <TurnAllSensorOn>
		TurnOnSynchronousEvent();
 800a332:	f000 f923 	bl	800a57c <TurnOnSynchronousEvent>
		AppStateChangeRequest(eApp_Perform);
 800a336:	2002      	movs	r0, #2
 800a338:	f000 f898 	bl	800a46c <AppStateChangeRequest>
		break;
 800a33c:	e007      	b.n	800a34e <ApplicationPerform+0x5e>

	case eApp_Perform:
		AsynchronousTaskScheduler();
 800a33e:	f000 f867 	bl	800a410 <AsynchronousTaskScheduler>
		break;
 800a342:	e004      	b.n	800a34e <ApplicationPerform+0x5e>

	case eApp_Shutdown:
		break;

	default:
		AssertError(AppError_AppDefaultStateEntryError);
 800a344:	2010      	movs	r0, #16
 800a346:	f000 f905 	bl	800a554 <AssertError>
		break;
 800a34a:	e000      	b.n	800a34e <ApplicationPerform+0x5e>
		break;
 800a34c:	bf00      	nop
	}

}
 800a34e:	bf00      	nop
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	200001a0 	.word	0x200001a0

0800a358 <AsynchronousTaskTimerUpdate>:

void AsynchronousTaskTimerUpdate()
{
 800a358:	b480      	push	{r7}
 800a35a:	af00      	add	r7, sp, #0
	if(sApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag)
 800a35c:	4b20      	ldr	r3, [pc, #128]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d006      	beq.n	800a374 <AsynchronousTaskTimerUpdate+0x1c>
	{
		sApplicationBase.sAsyncTimers.s1000ms.u16Counter++;
 800a366:	4b1e      	ldr	r3, [pc, #120]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a368:	885b      	ldrh	r3, [r3, #2]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	3301      	adds	r3, #1
 800a36e:	b29a      	uxth	r2, r3
 800a370:	4b1b      	ldr	r3, [pc, #108]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a372:	805a      	strh	r2, [r3, #2]
	}
	if(sApplicationBase.sAsyncTimers.s100ms.bEnabledFlag)
 800a374:	4b1a      	ldr	r3, [pc, #104]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a376:	791b      	ldrb	r3, [r3, #4]
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d006      	beq.n	800a38c <AsynchronousTaskTimerUpdate+0x34>
	{
		sApplicationBase.sAsyncTimers.s100ms.u16Counter++;
 800a37e:	4b18      	ldr	r3, [pc, #96]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a380:	88db      	ldrh	r3, [r3, #6]
 800a382:	b29b      	uxth	r3, r3
 800a384:	3301      	adds	r3, #1
 800a386:	b29a      	uxth	r2, r3
 800a388:	4b15      	ldr	r3, [pc, #84]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a38a:	80da      	strh	r2, [r3, #6]
	}
	if(sApplicationBase.sAsyncTimers.s10ms.bEnabledFlag)
 800a38c:	4b14      	ldr	r3, [pc, #80]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a38e:	7a1b      	ldrb	r3, [r3, #8]
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b00      	cmp	r3, #0
 800a394:	d006      	beq.n	800a3a4 <AsynchronousTaskTimerUpdate+0x4c>
	{
		sApplicationBase.sAsyncTimers.s10ms.u16Counter++;
 800a396:	4b12      	ldr	r3, [pc, #72]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a398:	895b      	ldrh	r3, [r3, #10]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	3301      	adds	r3, #1
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	4b0f      	ldr	r3, [pc, #60]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a3a2:	815a      	strh	r2, [r3, #10]
	}
	if(sApplicationBase.sAsyncTimers.s1ms.bEnabledFlag)
 800a3a4:	4b0e      	ldr	r3, [pc, #56]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a3a6:	7b1b      	ldrb	r3, [r3, #12]
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d006      	beq.n	800a3bc <AsynchronousTaskTimerUpdate+0x64>
	{
		sApplicationBase.sAsyncTimers.s1ms.u16Counter++;
 800a3ae:	4b0c      	ldr	r3, [pc, #48]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a3b0:	89db      	ldrh	r3, [r3, #14]
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a3ba:	81da      	strh	r2, [r3, #14]
	}
	if(sApplicationBase.sAsyncTimers.s500us.bEnabledFlag)
 800a3bc:	4b08      	ldr	r3, [pc, #32]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a3be:	7c1b      	ldrb	r3, [r3, #16]
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d006      	beq.n	800a3d4 <AsynchronousTaskTimerUpdate+0x7c>
	{
		sApplicationBase.sAsyncTimers.s500us.u16Counter++;
 800a3c6:	4b06      	ldr	r3, [pc, #24]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a3c8:	8a5b      	ldrh	r3, [r3, #18]
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	4b03      	ldr	r3, [pc, #12]	; (800a3e0 <AsynchronousTaskTimerUpdate+0x88>)
 800a3d2:	825a      	strh	r2, [r3, #18]
	}

}
 800a3d4:	bf00      	nop
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	200001a0 	.word	0x200001a0

0800a3e4 <AsynchronousTask_10ms>:

/* Internal functions */
void AsynchronousTask_10ms()
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	af00      	add	r7, sp, #0
	TempCollect_Operate();
 800a3e8:	f000 f96a 	bl	800a6c0 <TempCollect_Operate>
}
 800a3ec:	bf00      	nop
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <AsynchronousTask_100ms>:

void AsynchronousTask_100ms()
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	af00      	add	r7, sp, #0

}
 800a3f4:	bf00      	nop
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <AsynchronousTask_1000ms>:

void AsynchronousTask_1000ms()
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	af00      	add	r7, sp, #0
	ToggleLED_B();
 800a402:	f7f6 f881 	bl	8000508 <ToggleLED_B>
	DataHandler_Operate();
 800a406:	f000 f939 	bl	800a67c <DataHandler_Operate>
}
 800a40a:	bf00      	nop
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <AsynchronousTaskScheduler>:

void AsynchronousTaskScheduler()
{
 800a410:	b580      	push	{r7, lr}
 800a412:	af00      	add	r7, sp, #0
	if(sApplicationBase.sAsyncTimers.s1000ms.u16Counter >= dAsynchronousTaskPeriod1000ms)
 800a414:	4b14      	ldr	r3, [pc, #80]	; (800a468 <AsynchronousTaskScheduler+0x58>)
 800a416:	885b      	ldrh	r3, [r3, #2]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a41e:	d304      	bcc.n	800a42a <AsynchronousTaskScheduler+0x1a>
	{
		AsynchronousTask_1000ms();
 800a420:	f7ff ffed 	bl	800a3fe <AsynchronousTask_1000ms>
		sApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800a424:	4b10      	ldr	r3, [pc, #64]	; (800a468 <AsynchronousTaskScheduler+0x58>)
 800a426:	2200      	movs	r2, #0
 800a428:	805a      	strh	r2, [r3, #2]
	}

	if(sApplicationBase.sAsyncTimers.s100ms.u16Counter >= dAsynchronousTaskPeriod100ms)
 800a42a:	4b0f      	ldr	r3, [pc, #60]	; (800a468 <AsynchronousTaskScheduler+0x58>)
 800a42c:	88db      	ldrh	r3, [r3, #6]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	2b63      	cmp	r3, #99	; 0x63
 800a432:	d904      	bls.n	800a43e <AsynchronousTaskScheduler+0x2e>
	{
		AsynchronousTask_100ms();
 800a434:	f7ff ffdc 	bl	800a3f0 <AsynchronousTask_100ms>
		sApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800a438:	4b0b      	ldr	r3, [pc, #44]	; (800a468 <AsynchronousTaskScheduler+0x58>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	80da      	strh	r2, [r3, #6]
	}

	if(sApplicationBase.sAsyncTimers.s10ms.u16Counter >= dAsynchronousTaskPeriod10ms)
 800a43e:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <AsynchronousTaskScheduler+0x58>)
 800a440:	895b      	ldrh	r3, [r3, #10]
 800a442:	b29b      	uxth	r3, r3
 800a444:	2b09      	cmp	r3, #9
 800a446:	d904      	bls.n	800a452 <AsynchronousTaskScheduler+0x42>
	{
		AsynchronousTask_10ms();
 800a448:	f7ff ffcc 	bl	800a3e4 <AsynchronousTask_10ms>
		sApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800a44c:	4b06      	ldr	r3, [pc, #24]	; (800a468 <AsynchronousTaskScheduler+0x58>)
 800a44e:	2200      	movs	r2, #0
 800a450:	815a      	strh	r2, [r3, #10]
	}

	if(sApplicationBase.sAsyncTimers.s1ms.u16Counter >= dAsynchronousTaskPeriod1ms)
 800a452:	4b05      	ldr	r3, [pc, #20]	; (800a468 <AsynchronousTaskScheduler+0x58>)
 800a454:	89db      	ldrh	r3, [r3, #14]
 800a456:	b29b      	uxth	r3, r3
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <AsynchronousTaskScheduler+0x52>
	{
//		AsynchronousTask_1ms();
		sApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800a45c:	4b02      	ldr	r3, [pc, #8]	; (800a468 <AsynchronousTaskScheduler+0x58>)
 800a45e:	2200      	movs	r2, #0
 800a460:	81da      	strh	r2, [r3, #14]
	}

}
 800a462:	bf00      	nop
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	200001a0 	.word	0x200001a0

0800a46c <AppStateChangeRequest>:

void AppStateChangeRequest( ApplicationState_t eNewState)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	71fb      	strb	r3, [r7, #7]
	switch(sApplicationBase.eApplicationState)
 800a476:	4b22      	ldr	r3, [pc, #136]	; (800a500 <AppStateChangeRequest+0x94>)
 800a478:	7e5b      	ldrb	r3, [r3, #25]
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d837      	bhi.n	800a4f0 <AppStateChangeRequest+0x84>
 800a480:	a201      	add	r2, pc, #4	; (adr r2, 800a488 <AppStateChangeRequest+0x1c>)
 800a482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a486:	bf00      	nop
 800a488:	0800a499 	.word	0x0800a499
 800a48c:	0800a4af 	.word	0x0800a4af
 800a490:	0800a4c5 	.word	0x0800a4c5
 800a494:	0800a4e9 	.word	0x0800a4e9
	{
	case eApp_EntryState:
		if(eNewState == eApp_Initialization)
 800a498:	79fb      	ldrb	r3, [r7, #7]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d103      	bne.n	800a4a6 <AppStateChangeRequest+0x3a>
		{
			sApplicationBase.eApplicationState = eApp_Initialization;
 800a49e:	4b18      	ldr	r3, [pc, #96]	; (800a500 <AppStateChangeRequest+0x94>)
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a4a4:	e028      	b.n	800a4f8 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a4a6:	2020      	movs	r0, #32
 800a4a8:	f000 f854 	bl	800a554 <AssertError>
		break;
 800a4ac:	e024      	b.n	800a4f8 <AppStateChangeRequest+0x8c>

	case eApp_Initialization:
		if(eNewState == eApp_Perform)
 800a4ae:	79fb      	ldrb	r3, [r7, #7]
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d103      	bne.n	800a4bc <AppStateChangeRequest+0x50>
		{
			sApplicationBase.eApplicationState = eApp_Perform;
 800a4b4:	4b12      	ldr	r3, [pc, #72]	; (800a500 <AppStateChangeRequest+0x94>)
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a4ba:	e01d      	b.n	800a4f8 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a4bc:	2020      	movs	r0, #32
 800a4be:	f000 f849 	bl	800a554 <AssertError>
		break;
 800a4c2:	e019      	b.n	800a4f8 <AppStateChangeRequest+0x8c>

	case eApp_Perform:
		if(eNewState == eApp_Initialization)
 800a4c4:	79fb      	ldrb	r3, [r7, #7]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d103      	bne.n	800a4d2 <AppStateChangeRequest+0x66>
		{
			sApplicationBase.eApplicationState = eApp_Initialization;
 800a4ca:	4b0d      	ldr	r3, [pc, #52]	; (800a500 <AppStateChangeRequest+0x94>)
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	765a      	strb	r2, [r3, #25]
		}
		else
		{
			AssertError(AppError_WrongStateTransition);
		}
		break;
 800a4d0:	e012      	b.n	800a4f8 <AppStateChangeRequest+0x8c>
		else if(eNewState == eApp_Shutdown)
 800a4d2:	79fb      	ldrb	r3, [r7, #7]
 800a4d4:	2b03      	cmp	r3, #3
 800a4d6:	d103      	bne.n	800a4e0 <AppStateChangeRequest+0x74>
			sApplicationBase.eApplicationState = eApp_Shutdown;
 800a4d8:	4b09      	ldr	r3, [pc, #36]	; (800a500 <AppStateChangeRequest+0x94>)
 800a4da:	2203      	movs	r2, #3
 800a4dc:	765a      	strb	r2, [r3, #25]
		break;
 800a4de:	e00b      	b.n	800a4f8 <AppStateChangeRequest+0x8c>
			AssertError(AppError_WrongStateTransition);
 800a4e0:	2020      	movs	r0, #32
 800a4e2:	f000 f837 	bl	800a554 <AssertError>
		break;
 800a4e6:	e007      	b.n	800a4f8 <AppStateChangeRequest+0x8c>

	case eApp_Shutdown:
		AssertError(AppError_WrongStateTransition);
 800a4e8:	2020      	movs	r0, #32
 800a4ea:	f000 f833 	bl	800a554 <AssertError>
		break;
 800a4ee:	e003      	b.n	800a4f8 <AppStateChangeRequest+0x8c>

	default:
		AssertError(AppError_WrongStateTransition);
 800a4f0:	2020      	movs	r0, #32
 800a4f2:	f000 f82f 	bl	800a554 <AssertError>
		break;
 800a4f6:	bf00      	nop
	}

}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	200001a0 	.word	0x200001a0

0800a504 <AppEnableResetTaskTimers>:

void AppEnableResetTaskTimers()
{
 800a504:	b480      	push	{r7}
 800a506:	af00      	add	r7, sp, #0
	sApplicationBase.sAsyncTimers.s1000ms.bEnabledFlag = true;
 800a508:	4b11      	ldr	r3, [pc, #68]	; (800a550 <AppEnableResetTaskTimers+0x4c>)
 800a50a:	2201      	movs	r2, #1
 800a50c:	701a      	strb	r2, [r3, #0]
	sApplicationBase.sAsyncTimers.s100ms.bEnabledFlag = true;
 800a50e:	4b10      	ldr	r3, [pc, #64]	; (800a550 <AppEnableResetTaskTimers+0x4c>)
 800a510:	2201      	movs	r2, #1
 800a512:	711a      	strb	r2, [r3, #4]
	sApplicationBase.sAsyncTimers.s10ms.bEnabledFlag = true;
 800a514:	4b0e      	ldr	r3, [pc, #56]	; (800a550 <AppEnableResetTaskTimers+0x4c>)
 800a516:	2201      	movs	r2, #1
 800a518:	721a      	strb	r2, [r3, #8]
	sApplicationBase.sAsyncTimers.s1ms.bEnabledFlag = true;
 800a51a:	4b0d      	ldr	r3, [pc, #52]	; (800a550 <AppEnableResetTaskTimers+0x4c>)
 800a51c:	2201      	movs	r2, #1
 800a51e:	731a      	strb	r2, [r3, #12]
	sApplicationBase.sAsyncTimers.s500us.bEnabledFlag = true;
 800a520:	4b0b      	ldr	r3, [pc, #44]	; (800a550 <AppEnableResetTaskTimers+0x4c>)
 800a522:	2201      	movs	r2, #1
 800a524:	741a      	strb	r2, [r3, #16]

	sApplicationBase.sAsyncTimers.s1000ms.u16Counter = 0;
 800a526:	4b0a      	ldr	r3, [pc, #40]	; (800a550 <AppEnableResetTaskTimers+0x4c>)
 800a528:	2200      	movs	r2, #0
 800a52a:	805a      	strh	r2, [r3, #2]
	sApplicationBase.sAsyncTimers.s100ms.u16Counter = 0;
 800a52c:	4b08      	ldr	r3, [pc, #32]	; (800a550 <AppEnableResetTaskTimers+0x4c>)
 800a52e:	2200      	movs	r2, #0
 800a530:	80da      	strh	r2, [r3, #6]
	sApplicationBase.sAsyncTimers.s10ms.u16Counter = 0;
 800a532:	4b07      	ldr	r3, [pc, #28]	; (800a550 <AppEnableResetTaskTimers+0x4c>)
 800a534:	2200      	movs	r2, #0
 800a536:	815a      	strh	r2, [r3, #10]
	sApplicationBase.sAsyncTimers.s1ms.u16Counter = 0;
 800a538:	4b05      	ldr	r3, [pc, #20]	; (800a550 <AppEnableResetTaskTimers+0x4c>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	81da      	strh	r2, [r3, #14]
	sApplicationBase.sAsyncTimers.s500us.u16Counter = 0;
 800a53e:	4b04      	ldr	r3, [pc, #16]	; (800a550 <AppEnableResetTaskTimers+0x4c>)
 800a540:	2200      	movs	r2, #0
 800a542:	825a      	strh	r2, [r3, #18]
}
 800a544:	bf00      	nop
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	200001a0 	.word	0x200001a0

0800a554 <AssertError>:

void AssertError( AppErrorList_t eAppError )
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	4603      	mov	r3, r0
 800a55c:	80fb      	strh	r3, [r7, #6]
	sApplicationBase.u32ErrorReg |= (uint32_t)eAppError;
 800a55e:	4b06      	ldr	r3, [pc, #24]	; (800a578 <AssertError+0x24>)
 800a560:	695a      	ldr	r2, [r3, #20]
 800a562:	88fb      	ldrh	r3, [r7, #6]
 800a564:	4313      	orrs	r3, r2
 800a566:	4a04      	ldr	r2, [pc, #16]	; (800a578 <AssertError+0x24>)
 800a568:	6153      	str	r3, [r2, #20]
}
 800a56a:	bf00      	nop
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	200001a0 	.word	0x200001a0

0800a57c <TurnOnSynchronousEvent>:

void TurnOnSynchronousEvent()
{
 800a57c:	b480      	push	{r7}
 800a57e:	af00      	add	r7, sp, #0

}
 800a580:	bf00      	nop
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
	...

0800a58c <DataHandler_Initialize>:
}DataHandler_t;

static DataHandler_t kDataHandler;

void DataHandler_Initialize()
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
	DataHandler_Reset();
 800a590:	f000 f808 	bl	800a5a4 <DataHandler_Reset>
	kDataHandler.bEnabled = true;
 800a594:	4b02      	ldr	r3, [pc, #8]	; (800a5a0 <DataHandler_Initialize+0x14>)
 800a596:	2201      	movs	r2, #1
 800a598:	701a      	strb	r2, [r3, #0]

}
 800a59a:	bf00      	nop
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	200001bc 	.word	0x200001bc

0800a5a4 <DataHandler_Reset>:
void DataHandler_Reset()
{
 800a5a4:	b490      	push	{r4, r7}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
	kDataHandler.u8ActiveMemoryPage = 0;
 800a5aa:	4b33      	ldr	r3, [pc, #204]	; (800a678 <DataHandler_Reset+0xd4>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	kDataHandler.u8LastMemoryPage = 0;
 800a5b2:	4b31      	ldr	r3, [pc, #196]	; (800a678 <DataHandler_Reset+0xd4>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
	kDataHandler.u8WidthPointer = 0;
 800a5ba:	4b2f      	ldr	r3, [pc, #188]	; (800a678 <DataHandler_Reset+0xd4>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
	kDataHandler.u8LengthPointer = 0;
 800a5c2:	4b2d      	ldr	r3, [pc, #180]	; (800a678 <DataHandler_Reset+0xd4>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
	kDataHandler.bPageFilled = false;
 800a5ca:	4b2b      	ldr	r3, [pc, #172]	; (800a678 <DataHandler_Reset+0xd4>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	71fb      	strb	r3, [r7, #7]
 800a5d6:	e046      	b.n	800a666 <DataHandler_Reset+0xc2>
	{
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800a5d8:	2300      	movs	r3, #0
 800a5da:	71bb      	strb	r3, [r7, #6]
 800a5dc:	e03d      	b.n	800a65a <DataHandler_Reset+0xb6>
		{
			kDataHandler.kMeasurementMemory[u8PageIdx].bAlreadySent = false;
 800a5de:	79fa      	ldrb	r2, [r7, #7]
 800a5e0:	4925      	ldr	r1, [pc, #148]	; (800a678 <DataHandler_Reset+0xd4>)
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	019b      	lsls	r3, r3, #6
 800a5e6:	4413      	add	r3, r2
 800a5e8:	00db      	lsls	r3, r3, #3
 800a5ea:	440b      	add	r3, r1
 800a5ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaved = false;
 800a5f4:	79fa      	ldrb	r2, [r7, #7]
 800a5f6:	4920      	ldr	r1, [pc, #128]	; (800a678 <DataHandler_Reset+0xd4>)
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	019b      	lsls	r3, r3, #6
 800a5fc:	4413      	add	r3, r2
 800a5fe:	00db      	lsls	r3, r3, #3
 800a600:	440b      	add	r3, r1
 800a602:	f203 2309 	addw	r3, r3, #521	; 0x209
 800a606:	2200      	movs	r2, #0
 800a608:	701a      	strb	r2, [r3, #0]
			kDataHandler.kMeasurementMemory[u8PageIdx].bHardSaveRequest = false;
 800a60a:	79fa      	ldrb	r2, [r7, #7]
 800a60c:	491a      	ldr	r1, [pc, #104]	; (800a678 <DataHandler_Reset+0xd4>)
 800a60e:	4613      	mov	r3, r2
 800a610:	019b      	lsls	r3, r3, #6
 800a612:	4413      	add	r3, r2
 800a614:	00db      	lsls	r3, r3, #3
 800a616:	440b      	add	r3, r1
 800a618:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800a61c:	2200      	movs	r2, #0
 800a61e:	701a      	strb	r2, [r3, #0]

			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800a620:	2300      	movs	r3, #0
 800a622:	717b      	strb	r3, [r7, #5]
 800a624:	e013      	b.n	800a64e <DataHandler_Reset+0xaa>
			{
				kDataHandler.kMeasurementMemory[u8PageIdx].fMeasurementArray[u8LengthIdx][u8WidthIdx] = 0;
 800a626:	79fa      	ldrb	r2, [r7, #7]
 800a628:	79bb      	ldrb	r3, [r7, #6]
 800a62a:	7979      	ldrb	r1, [r7, #5]
 800a62c:	4c12      	ldr	r4, [pc, #72]	; (800a678 <DataHandler_Reset+0xd4>)
 800a62e:	0118      	lsls	r0, r3, #4
 800a630:	4613      	mov	r3, r2
 800a632:	019b      	lsls	r3, r3, #6
 800a634:	4413      	add	r3, r2
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	4403      	add	r3, r0
 800a63a:	440b      	add	r3, r1
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4423      	add	r3, r4
 800a640:	3308      	adds	r3, #8
 800a642:	f04f 0200 	mov.w	r2, #0
 800a646:	601a      	str	r2, [r3, #0]
			for(uint8_t u8WidthIdx = 0; u8WidthIdx < dMemoryWidth; u8WidthIdx++)
 800a648:	797b      	ldrb	r3, [r7, #5]
 800a64a:	3301      	adds	r3, #1
 800a64c:	717b      	strb	r3, [r7, #5]
 800a64e:	797b      	ldrb	r3, [r7, #5]
 800a650:	2b0f      	cmp	r3, #15
 800a652:	d9e8      	bls.n	800a626 <DataHandler_Reset+0x82>
		for(uint8_t u8LengthIdx = 0; u8LengthIdx < dMemoryLength; u8LengthIdx++)
 800a654:	79bb      	ldrb	r3, [r7, #6]
 800a656:	3301      	adds	r3, #1
 800a658:	71bb      	strb	r3, [r7, #6]
 800a65a:	79bb      	ldrb	r3, [r7, #6]
 800a65c:	2b07      	cmp	r3, #7
 800a65e:	d9be      	bls.n	800a5de <DataHandler_Reset+0x3a>
	for(uint8_t u8PageIdx = 0; u8PageIdx < dMemoryPagesCount; u8PageIdx++)
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	3301      	adds	r3, #1
 800a664:	71fb      	strb	r3, [r7, #7]
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d9b5      	bls.n	800a5d8 <DataHandler_Reset+0x34>
			}
		}
	}

}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bc90      	pop	{r4, r7}
 800a676:	4770      	bx	lr
 800a678:	200001bc 	.word	0x200001bc

0800a67c <DataHandler_Operate>:
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}

void DataHandler_Operate()
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	af00      	add	r7, sp, #0
	if( kDataHandler.bEnabled )
 800a680:	4b0e      	ldr	r3, [pc, #56]	; (800a6bc <DataHandler_Operate+0x40>)
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d013      	beq.n	800a6b0 <DataHandler_Operate+0x34>
	{

		if( kDataHandler.bPageFilled )
 800a688:	4b0c      	ldr	r3, [pc, #48]	; (800a6bc <DataHandler_Operate+0x40>)
 800a68a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d012      	beq.n	800a6b8 <DataHandler_Operate+0x3c>
		{
			kDataHandler.kMeasurementMemory[kDataHandler.u8LastMemoryPage].bHardSaveRequest = true;
 800a692:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <DataHandler_Operate+0x40>)
 800a694:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800a698:	4619      	mov	r1, r3
 800a69a:	4a08      	ldr	r2, [pc, #32]	; (800a6bc <DataHandler_Operate+0x40>)
 800a69c:	460b      	mov	r3, r1
 800a69e:	019b      	lsls	r3, r3, #6
 800a6a0:	440b      	add	r3, r1
 800a6a2:	00db      	lsls	r3, r3, #3
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f203 230a 	addw	r3, r3, #522	; 0x20a
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
	}
}
 800a6ae:	e003      	b.n	800a6b8 <DataHandler_Operate+0x3c>
		AssertError(AppError_DataHandlerUninitialized); // Call to DataHandler procedure before initialization
 800a6b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a6b4:	f7ff ff4e 	bl	800a554 <AssertError>
}
 800a6b8:	bf00      	nop
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	200001bc 	.word	0x200001bc

0800a6c0 <TempCollect_Operate>:
	.bEnabledFlag = false,
	.eState = TempCollect_EntryState,
};

void TempCollect_Operate()
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	af00      	add	r7, sp, #0
	switch(kTemperatureData.eState)
 800a6c4:	4b65      	ldr	r3, [pc, #404]	; (800a85c <TempCollect_Operate+0x19c>)
 800a6c6:	79db      	ldrb	r3, [r3, #7]
 800a6c8:	2b05      	cmp	r3, #5
 800a6ca:	f200 80bc 	bhi.w	800a846 <TempCollect_Operate+0x186>
 800a6ce:	a201      	add	r2, pc, #4	; (adr r2, 800a6d4 <TempCollect_Operate+0x14>)
 800a6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d4:	0800a6ed 	.word	0x0800a6ed
 800a6d8:	0800a6f7 	.word	0x0800a6f7
 800a6dc:	0800a715 	.word	0x0800a715
 800a6e0:	0800a787 	.word	0x0800a787
 800a6e4:	0800a7ef 	.word	0x0800a7ef
 800a6e8:	0800a76f 	.word	0x0800a76f
	{
	case(TempCollect_EntryState):
		AssertError(AppError_TempCollectUninitialized); // Incorrect entry - before initialization
 800a6ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a6f0:	f7ff ff30 	bl	800a554 <AssertError>
		break;
 800a6f4:	e0af      	b.n	800a856 <TempCollect_Operate+0x196>
	case(TempCollect_Initialized):
		if(kTemperatureData.bScheduleMeasurement)
 800a6f6:	4b59      	ldr	r3, [pc, #356]	; (800a85c <TempCollect_Operate+0x19c>)
 800a6f8:	799b      	ldrb	r3, [r3, #6]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 80a8 	beq.w	800a850 <TempCollect_Operate+0x190>
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800a700:	4b56      	ldr	r3, [pc, #344]	; (800a85c <TempCollect_Operate+0x19c>)
 800a702:	2202      	movs	r2, #2
 800a704:	71da      	strb	r2, [r3, #7]
			kTemperatureData.u16ArrayASensorIndex = 0;
 800a706:	4b55      	ldr	r3, [pc, #340]	; (800a85c <TempCollect_Operate+0x19c>)
 800a708:	2200      	movs	r2, #0
 800a70a:	829a      	strh	r2, [r3, #20]
			kTemperatureData.u16ArrayBSensorIndex = 0;
 800a70c:	4b53      	ldr	r3, [pc, #332]	; (800a85c <TempCollect_Operate+0x19c>)
 800a70e:	2200      	movs	r2, #0
 800a710:	82da      	strh	r2, [r3, #22]
		}
		break;
 800a712:	e09d      	b.n	800a850 <TempCollect_Operate+0x190>
	case(TempCollect_TemperatureReadRequest):
		kTemperatureData.bScheduleMeasurement = false;
 800a714:	4b51      	ldr	r3, [pc, #324]	; (800a85c <TempCollect_Operate+0x19c>)
 800a716:	2200      	movs	r2, #0
 800a718:	719a      	strb	r2, [r3, #6]
		if(kTemperatureData.u16ArrayASensorIndex < MCP9808_I2CA_DeviceCount)
 800a71a:	4b50      	ldr	r3, [pc, #320]	; (800a85c <TempCollect_Operate+0x19c>)
 800a71c:	8a9b      	ldrh	r3, [r3, #20]
 800a71e:	2b07      	cmp	r3, #7
 800a720:	d80e      	bhi.n	800a740 <TempCollect_Operate+0x80>
		{
			/*
			 * By placing "ready" flag clearing here this app will not get stuck
			 * if the sensor number on each array branch would be not equal
			 */
			kTemperatureData.bStateReady[0] = false;
 800a722:	4b4e      	ldr	r3, [pc, #312]	; (800a85c <TempCollect_Operate+0x19c>)
 800a724:	2200      	movs	r2, #0
 800a726:	729a      	strb	r2, [r3, #10]
			MCP9808_Read(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800a728:	4b4c      	ldr	r3, [pc, #304]	; (800a85c <TempCollect_Operate+0x19c>)
 800a72a:	8a9b      	ldrh	r3, [r3, #20]
 800a72c:	461a      	mov	r2, r3
 800a72e:	4613      	mov	r3, r2
 800a730:	005b      	lsls	r3, r3, #1
 800a732:	4413      	add	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4a4a      	ldr	r2, [pc, #296]	; (800a860 <TempCollect_Operate+0x1a0>)
 800a738:	4413      	add	r3, r2
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7f5 ff34 	bl	80005a8 <MCP9808_Read>
		}
		if(kTemperatureData.u16ArrayBSensorIndex < MCP9808_I2CB_DeviceCount)
 800a740:	4b46      	ldr	r3, [pc, #280]	; (800a85c <TempCollect_Operate+0x19c>)
 800a742:	8adb      	ldrh	r3, [r3, #22]
 800a744:	2b07      	cmp	r3, #7
 800a746:	d80e      	bhi.n	800a766 <TempCollect_Operate+0xa6>
		{
			kTemperatureData.bStateReady[1] = false;
 800a748:	4b44      	ldr	r3, [pc, #272]	; (800a85c <TempCollect_Operate+0x19c>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	72da      	strb	r2, [r3, #11]
			MCP9808_Read(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800a74e:	4b43      	ldr	r3, [pc, #268]	; (800a85c <TempCollect_Operate+0x19c>)
 800a750:	8adb      	ldrh	r3, [r3, #22]
 800a752:	461a      	mov	r2, r3
 800a754:	4613      	mov	r3, r2
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	4413      	add	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4a41      	ldr	r2, [pc, #260]	; (800a864 <TempCollect_Operate+0x1a4>)
 800a75e:	4413      	add	r3, r2
 800a760:	4618      	mov	r0, r3
 800a762:	f7f5 ff21 	bl	80005a8 <MCP9808_Read>
		}
		kTemperatureData.eState = TempCollect_Waiting;
 800a766:	4b3d      	ldr	r3, [pc, #244]	; (800a85c <TempCollect_Operate+0x19c>)
 800a768:	2205      	movs	r2, #5
 800a76a:	71da      	strb	r2, [r3, #7]
		break;
 800a76c:	e073      	b.n	800a856 <TempCollect_Operate+0x196>
	case(TempCollect_Waiting):
		if(kTemperatureData.bStateReady[0] && kTemperatureData.bStateReady[1])
 800a76e:	4b3b      	ldr	r3, [pc, #236]	; (800a85c <TempCollect_Operate+0x19c>)
 800a770:	7a9b      	ldrb	r3, [r3, #10]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d06e      	beq.n	800a854 <TempCollect_Operate+0x194>
 800a776:	4b39      	ldr	r3, [pc, #228]	; (800a85c <TempCollect_Operate+0x19c>)
 800a778:	7adb      	ldrb	r3, [r3, #11]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d06a      	beq.n	800a854 <TempCollect_Operate+0x194>
		{
			kTemperatureData.eState = TempCollect_ProcessData;
 800a77e:	4b37      	ldr	r3, [pc, #220]	; (800a85c <TempCollect_Operate+0x19c>)
 800a780:	2203      	movs	r2, #3
 800a782:	71da      	strb	r2, [r3, #7]
		}
		break;
 800a784:	e066      	b.n	800a854 <TempCollect_Operate+0x194>
	case(TempCollect_ProcessData):
		if( !kTemperatureData.bReadFinished[0] )
 800a786:	4b35      	ldr	r3, [pc, #212]	; (800a85c <TempCollect_Operate+0x19c>)
 800a788:	7a1b      	ldrb	r3, [r3, #8]
 800a78a:	f083 0301 	eor.w	r3, r3, #1
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b00      	cmp	r3, #0
 800a792:	d010      	beq.n	800a7b6 <TempCollect_Operate+0xf6>
		{
			kTemperatureData.fConvertedTemperature[0] = MCP9808_DecodeTemperature(&kaSensorArrayDataA[kTemperatureData.u16ArrayASensorIndex]);
 800a794:	4b31      	ldr	r3, [pc, #196]	; (800a85c <TempCollect_Operate+0x19c>)
 800a796:	8a9b      	ldrh	r3, [r3, #20]
 800a798:	461a      	mov	r2, r3
 800a79a:	4613      	mov	r3, r2
 800a79c:	005b      	lsls	r3, r3, #1
 800a79e:	4413      	add	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4a2f      	ldr	r2, [pc, #188]	; (800a860 <TempCollect_Operate+0x1a0>)
 800a7a4:	4413      	add	r3, r2
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7f5 ff14 	bl	80005d4 <MCP9808_DecodeTemperature>
 800a7ac:	eef0 7a40 	vmov.f32	s15, s0
 800a7b0:	4b2a      	ldr	r3, [pc, #168]	; (800a85c <TempCollect_Operate+0x19c>)
 800a7b2:	edc3 7a03 	vstr	s15, [r3, #12]
		}
		if( !kTemperatureData.bReadFinished[0] )
 800a7b6:	4b29      	ldr	r3, [pc, #164]	; (800a85c <TempCollect_Operate+0x19c>)
 800a7b8:	7a1b      	ldrb	r3, [r3, #8]
 800a7ba:	f083 0301 	eor.w	r3, r3, #1
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d010      	beq.n	800a7e6 <TempCollect_Operate+0x126>
		{
			kTemperatureData.fConvertedTemperature[1] = MCP9808_DecodeTemperature(&kaSensorArrayDataB[kTemperatureData.u16ArrayBSensorIndex]);
 800a7c4:	4b25      	ldr	r3, [pc, #148]	; (800a85c <TempCollect_Operate+0x19c>)
 800a7c6:	8adb      	ldrh	r3, [r3, #22]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	4413      	add	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4a24      	ldr	r2, [pc, #144]	; (800a864 <TempCollect_Operate+0x1a4>)
 800a7d4:	4413      	add	r3, r2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7f5 fefc 	bl	80005d4 <MCP9808_DecodeTemperature>
 800a7dc:	eef0 7a40 	vmov.f32	s15, s0
 800a7e0:	4b1e      	ldr	r3, [pc, #120]	; (800a85c <TempCollect_Operate+0x19c>)
 800a7e2:	edc3 7a04 	vstr	s15, [r3, #16]
		}

		kTemperatureData.eState = TempCollect_ArmNewReading;
 800a7e6:	4b1d      	ldr	r3, [pc, #116]	; (800a85c <TempCollect_Operate+0x19c>)
 800a7e8:	2204      	movs	r2, #4
 800a7ea:	71da      	strb	r2, [r3, #7]
		break;
 800a7ec:	e033      	b.n	800a856 <TempCollect_Operate+0x196>

	case(TempCollect_ArmNewReading):
		if( kTemperatureData.u16ArrayASensorIndex >= MCP9808_I2CA_DeviceCount)
 800a7ee:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <TempCollect_Operate+0x19c>)
 800a7f0:	8a9b      	ldrh	r3, [r3, #20]
 800a7f2:	2b07      	cmp	r3, #7
 800a7f4:	d903      	bls.n	800a7fe <TempCollect_Operate+0x13e>
		{
			kTemperatureData.bReadFinished[0] = true;
 800a7f6:	4b19      	ldr	r3, [pc, #100]	; (800a85c <TempCollect_Operate+0x19c>)
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	721a      	strb	r2, [r3, #8]
 800a7fc:	e005      	b.n	800a80a <TempCollect_Operate+0x14a>
		}
		else
		{
			kTemperatureData.u16ArrayASensorIndex++;
 800a7fe:	4b17      	ldr	r3, [pc, #92]	; (800a85c <TempCollect_Operate+0x19c>)
 800a800:	8a9b      	ldrh	r3, [r3, #20]
 800a802:	3301      	adds	r3, #1
 800a804:	b29a      	uxth	r2, r3
 800a806:	4b15      	ldr	r3, [pc, #84]	; (800a85c <TempCollect_Operate+0x19c>)
 800a808:	829a      	strh	r2, [r3, #20]
		}

		if( kTemperatureData.u16ArrayBSensorIndex >= MCP9808_I2CB_DeviceCount)
 800a80a:	4b14      	ldr	r3, [pc, #80]	; (800a85c <TempCollect_Operate+0x19c>)
 800a80c:	8adb      	ldrh	r3, [r3, #22]
 800a80e:	2b07      	cmp	r3, #7
 800a810:	d903      	bls.n	800a81a <TempCollect_Operate+0x15a>
		{
			kTemperatureData.bReadFinished[1] = true;
 800a812:	4b12      	ldr	r3, [pc, #72]	; (800a85c <TempCollect_Operate+0x19c>)
 800a814:	2201      	movs	r2, #1
 800a816:	725a      	strb	r2, [r3, #9]
 800a818:	e005      	b.n	800a826 <TempCollect_Operate+0x166>
		}
		else
		{
			kTemperatureData.u16ArrayBSensorIndex++;
 800a81a:	4b10      	ldr	r3, [pc, #64]	; (800a85c <TempCollect_Operate+0x19c>)
 800a81c:	8adb      	ldrh	r3, [r3, #22]
 800a81e:	3301      	adds	r3, #1
 800a820:	b29a      	uxth	r2, r3
 800a822:	4b0e      	ldr	r3, [pc, #56]	; (800a85c <TempCollect_Operate+0x19c>)
 800a824:	82da      	strh	r2, [r3, #22]
		}

		if ( kTemperatureData.bReadFinished[0] && kTemperatureData.bReadFinished[1] )
 800a826:	4b0d      	ldr	r3, [pc, #52]	; (800a85c <TempCollect_Operate+0x19c>)
 800a828:	7a1b      	ldrb	r3, [r3, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d007      	beq.n	800a83e <TempCollect_Operate+0x17e>
 800a82e:	4b0b      	ldr	r3, [pc, #44]	; (800a85c <TempCollect_Operate+0x19c>)
 800a830:	7a5b      	ldrb	r3, [r3, #9]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <TempCollect_Operate+0x17e>
		{
			kTemperatureData.eState = TempCollect_Initialized;
 800a836:	4b09      	ldr	r3, [pc, #36]	; (800a85c <TempCollect_Operate+0x19c>)
 800a838:	2201      	movs	r2, #1
 800a83a:	71da      	strb	r2, [r3, #7]
		}
		else
		{
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
		}
		break;
 800a83c:	e00b      	b.n	800a856 <TempCollect_Operate+0x196>
			kTemperatureData.eState = TempCollect_TemperatureReadRequest;
 800a83e:	4b07      	ldr	r3, [pc, #28]	; (800a85c <TempCollect_Operate+0x19c>)
 800a840:	2202      	movs	r2, #2
 800a842:	71da      	strb	r2, [r3, #7]
		break;
 800a844:	e007      	b.n	800a856 <TempCollect_Operate+0x196>
	default:
		AssertError(AppError_TempCollectDefaultState); // Incorrect entry
 800a846:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a84a:	f7ff fe83 	bl	800a554 <AssertError>
	break;
 800a84e:	e002      	b.n	800a856 <TempCollect_Operate+0x196>
		break;
 800a850:	bf00      	nop
 800a852:	e000      	b.n	800a856 <TempCollect_Operate+0x196>
		break;
 800a854:	bf00      	nop
	}
}
 800a856:	bf00      	nop
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	200005d8 	.word	0x200005d8
 800a860:	20000810 	.word	0x20000810
 800a864:	20000870 	.word	0x20000870

0800a868 <TempCollect_Initialize>:

void TempCollect_Initialize()
{
 800a868:	b480      	push	{r7}
 800a86a:	af00      	add	r7, sp, #0
	kTemperatureData.eState = TempCollect_Initialized;
 800a86c:	4b05      	ldr	r3, [pc, #20]	; (800a884 <TempCollect_Initialize+0x1c>)
 800a86e:	2201      	movs	r2, #1
 800a870:	71da      	strb	r2, [r3, #7]
	kTemperatureData.bEnabledFlag = true;
 800a872:	4b04      	ldr	r3, [pc, #16]	; (800a884 <TempCollect_Initialize+0x1c>)
 800a874:	2201      	movs	r2, #1
 800a876:	715a      	strb	r2, [r3, #5]
}
 800a878:	bf00      	nop
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	200005d8 	.word	0x200005d8

0800a888 <TempCollect_ScheduleMeasurement>:
void TempCollect_RetrieveResult(TemperatureData_t *sTemperatureData);

/* Interrupt callback functions */

void TempCollect_ScheduleMeasurement()
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	af00      	add	r7, sp, #0
	if(kTemperatureData.bScheduleMeasurement)
 800a88c:	4b06      	ldr	r3, [pc, #24]	; (800a8a8 <TempCollect_ScheduleMeasurement+0x20>)
 800a88e:	799b      	ldrb	r3, [r3, #6]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d004      	beq.n	800a89e <TempCollect_ScheduleMeasurement+0x16>
	{
		AssertError(AppError_TempCollectRequestOverlap); // Overlap of requests;
 800a894:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a898:	f7ff fe5c 	bl	800a554 <AssertError>
	}
	else
	{
		kTemperatureData.bScheduleMeasurement = true;
	}
}
 800a89c:	e002      	b.n	800a8a4 <TempCollect_ScheduleMeasurement+0x1c>
		kTemperatureData.bScheduleMeasurement = true;
 800a89e:	4b02      	ldr	r3, [pc, #8]	; (800a8a8 <TempCollect_ScheduleMeasurement+0x20>)
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	719a      	strb	r2, [r3, #6]
}
 800a8a4:	bf00      	nop
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	200005d8 	.word	0x200005d8

0800a8ac <TempCollect_I2CA_Done>:

void TempCollect_I2CA_Done()
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[0] = true;
 800a8b0:	4b03      	ldr	r3, [pc, #12]	; (800a8c0 <TempCollect_I2CA_Done+0x14>)
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	729a      	strb	r2, [r3, #10]
}
 800a8b6:	bf00      	nop
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	200005d8 	.word	0x200005d8

0800a8c4 <TempCollect_I2CB_Done>:
void TempCollect_I2CB_Done()
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	af00      	add	r7, sp, #0
	kTemperatureData.bStateReady[1] = true;
 800a8c8:	4b03      	ldr	r3, [pc, #12]	; (800a8d8 <TempCollect_I2CB_Done+0x14>)
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	72da      	strb	r2, [r3, #11]
}
 800a8ce:	bf00      	nop
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	200005d8 	.word	0x200005d8

0800a8dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a8e0:	f7f5 fea2 	bl	8000628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a8e4:	f000 f828 	bl	800a938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a8e8:	f000 fa00 	bl	800acec <MX_GPIO_Init>
  MX_DMA_Init();
 800a8ec:	f000 f9de 	bl	800acac <MX_DMA_Init>
  MX_RTC_Init();
 800a8f0:	f000 f8ea 	bl	800aac8 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800a8f4:	f000 f90e 	bl	800ab14 <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 800a8f8:	f000 f88a 	bl	800aa10 <MX_I2C1_Init>
  MX_I2C2_Init();
 800a8fc:	f000 f8b6 	bl	800aa6c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800a900:	f000 f9aa 	bl	800ac58 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800a904:	f000 fd0c 	bl	800b320 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800a908:	f000 f934 	bl	800ab74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 800a90c:	2201      	movs	r2, #1
 800a90e:	2101      	movs	r1, #1
 800a910:	4808      	ldr	r0, [pc, #32]	; (800a934 <main+0x58>)
 800a912:	f7f6 fccf 	bl	80012b4 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 800a916:	2201      	movs	r2, #1
 800a918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a91c:	4805      	ldr	r0, [pc, #20]	; (800a934 <main+0x58>)
 800a91e:	f7f6 fcc9 	bl	80012b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 800a922:	2201      	movs	r2, #1
 800a924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a928:	4802      	ldr	r0, [pc, #8]	; (800a934 <main+0x58>)
 800a92a:	f7f6 fcc3 	bl	80012b4 <HAL_GPIO_WritePin>

  while (1)
  {
	  ApplicationPerform();
 800a92e:	f7ff fcdf 	bl	800a2f0 <ApplicationPerform>
 800a932:	e7fc      	b.n	800a92e <main+0x52>
 800a934:	40020800 	.word	0x40020800

0800a938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b094      	sub	sp, #80	; 0x50
 800a93c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a93e:	f107 0320 	add.w	r3, r7, #32
 800a942:	2230      	movs	r2, #48	; 0x30
 800a944:	2100      	movs	r1, #0
 800a946:	4618      	mov	r0, r3
 800a948:	f001 fa30 	bl	800bdac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a94c:	f107 030c 	add.w	r3, r7, #12
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	605a      	str	r2, [r3, #4]
 800a956:	609a      	str	r2, [r3, #8]
 800a958:	60da      	str	r2, [r3, #12]
 800a95a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a95c:	2300      	movs	r3, #0
 800a95e:	60bb      	str	r3, [r7, #8]
 800a960:	4b29      	ldr	r3, [pc, #164]	; (800aa08 <SystemClock_Config+0xd0>)
 800a962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a964:	4a28      	ldr	r2, [pc, #160]	; (800aa08 <SystemClock_Config+0xd0>)
 800a966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a96a:	6413      	str	r3, [r2, #64]	; 0x40
 800a96c:	4b26      	ldr	r3, [pc, #152]	; (800aa08 <SystemClock_Config+0xd0>)
 800a96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a974:	60bb      	str	r3, [r7, #8]
 800a976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a978:	2300      	movs	r3, #0
 800a97a:	607b      	str	r3, [r7, #4]
 800a97c:	4b23      	ldr	r3, [pc, #140]	; (800aa0c <SystemClock_Config+0xd4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a22      	ldr	r2, [pc, #136]	; (800aa0c <SystemClock_Config+0xd4>)
 800a982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a986:	6013      	str	r3, [r2, #0]
 800a988:	4b20      	ldr	r3, [pc, #128]	; (800aa0c <SystemClock_Config+0xd4>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a990:	607b      	str	r3, [r7, #4]
 800a992:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800a994:	2305      	movs	r3, #5
 800a996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a9a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800a9ac:	230c      	movs	r3, #12
 800a9ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800a9b0:	2348      	movs	r3, #72	; 0x48
 800a9b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a9bc:	f107 0320 	add.w	r3, r7, #32
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7f9 fbeb 	bl	800419c <HAL_RCC_OscConfig>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800a9cc:	f000 fa10 	bl	800adf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a9d0:	230f      	movs	r3, #15
 800a9d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a9dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a9e6:	f107 030c 	add.w	r3, r7, #12
 800a9ea:	2102      	movs	r1, #2
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7f9 fe4b 	bl	8004688 <HAL_RCC_ClockConfig>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800a9f8:	f000 f9fa 	bl	800adf0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800a9fc:	f7f9 ff2a 	bl	8004854 <HAL_RCC_EnableCSS>
}
 800aa00:	bf00      	nop
 800aa02:	3750      	adds	r7, #80	; 0x50
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	40023800 	.word	0x40023800
 800aa0c:	40007000 	.word	0x40007000

0800aa10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800aa14:	4b12      	ldr	r3, [pc, #72]	; (800aa60 <MX_I2C1_Init+0x50>)
 800aa16:	4a13      	ldr	r2, [pc, #76]	; (800aa64 <MX_I2C1_Init+0x54>)
 800aa18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800aa1a:	4b11      	ldr	r3, [pc, #68]	; (800aa60 <MX_I2C1_Init+0x50>)
 800aa1c:	4a12      	ldr	r2, [pc, #72]	; (800aa68 <MX_I2C1_Init+0x58>)
 800aa1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800aa20:	4b0f      	ldr	r3, [pc, #60]	; (800aa60 <MX_I2C1_Init+0x50>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800aa26:	4b0e      	ldr	r3, [pc, #56]	; (800aa60 <MX_I2C1_Init+0x50>)
 800aa28:	2200      	movs	r2, #0
 800aa2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800aa2c:	4b0c      	ldr	r3, [pc, #48]	; (800aa60 <MX_I2C1_Init+0x50>)
 800aa2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800aa32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800aa34:	4b0a      	ldr	r3, [pc, #40]	; (800aa60 <MX_I2C1_Init+0x50>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800aa3a:	4b09      	ldr	r3, [pc, #36]	; (800aa60 <MX_I2C1_Init+0x50>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800aa40:	4b07      	ldr	r3, [pc, #28]	; (800aa60 <MX_I2C1_Init+0x50>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800aa46:	4b06      	ldr	r3, [pc, #24]	; (800aa60 <MX_I2C1_Init+0x50>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800aa4c:	4804      	ldr	r0, [pc, #16]	; (800aa60 <MX_I2C1_Init+0x50>)
 800aa4e:	f7f6 fc65 	bl	800131c <HAL_I2C_Init>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d001      	beq.n	800aa5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800aa58:	f000 f9ca 	bl	800adf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800aa5c:	bf00      	nop
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	20000934 	.word	0x20000934
 800aa64:	40005400 	.word	0x40005400
 800aa68:	000186a0 	.word	0x000186a0

0800aa6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800aa70:	4b12      	ldr	r3, [pc, #72]	; (800aabc <MX_I2C2_Init+0x50>)
 800aa72:	4a13      	ldr	r2, [pc, #76]	; (800aac0 <MX_I2C2_Init+0x54>)
 800aa74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800aa76:	4b11      	ldr	r3, [pc, #68]	; (800aabc <MX_I2C2_Init+0x50>)
 800aa78:	4a12      	ldr	r2, [pc, #72]	; (800aac4 <MX_I2C2_Init+0x58>)
 800aa7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800aa7c:	4b0f      	ldr	r3, [pc, #60]	; (800aabc <MX_I2C2_Init+0x50>)
 800aa7e:	2200      	movs	r2, #0
 800aa80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800aa82:	4b0e      	ldr	r3, [pc, #56]	; (800aabc <MX_I2C2_Init+0x50>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800aa88:	4b0c      	ldr	r3, [pc, #48]	; (800aabc <MX_I2C2_Init+0x50>)
 800aa8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800aa8e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800aa90:	4b0a      	ldr	r3, [pc, #40]	; (800aabc <MX_I2C2_Init+0x50>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800aa96:	4b09      	ldr	r3, [pc, #36]	; (800aabc <MX_I2C2_Init+0x50>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800aa9c:	4b07      	ldr	r3, [pc, #28]	; (800aabc <MX_I2C2_Init+0x50>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800aaa2:	4b06      	ldr	r3, [pc, #24]	; (800aabc <MX_I2C2_Init+0x50>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800aaa8:	4804      	ldr	r0, [pc, #16]	; (800aabc <MX_I2C2_Init+0x50>)
 800aaaa:	f7f6 fc37 	bl	800131c <HAL_I2C_Init>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800aab4:	f000 f99c 	bl	800adf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800aab8:	bf00      	nop
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	20000988 	.word	0x20000988
 800aac0:	40005800 	.word	0x40005800
 800aac4:	000186a0 	.word	0x000186a0

0800aac8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800aacc:	4b0f      	ldr	r3, [pc, #60]	; (800ab0c <MX_RTC_Init+0x44>)
 800aace:	4a10      	ldr	r2, [pc, #64]	; (800ab10 <MX_RTC_Init+0x48>)
 800aad0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800aad2:	4b0e      	ldr	r3, [pc, #56]	; (800ab0c <MX_RTC_Init+0x44>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800aad8:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <MX_RTC_Init+0x44>)
 800aada:	227f      	movs	r2, #127	; 0x7f
 800aadc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800aade:	4b0b      	ldr	r3, [pc, #44]	; (800ab0c <MX_RTC_Init+0x44>)
 800aae0:	22ff      	movs	r2, #255	; 0xff
 800aae2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800aae4:	4b09      	ldr	r3, [pc, #36]	; (800ab0c <MX_RTC_Init+0x44>)
 800aae6:	2200      	movs	r2, #0
 800aae8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800aaea:	4b08      	ldr	r3, [pc, #32]	; (800ab0c <MX_RTC_Init+0x44>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800aaf0:	4b06      	ldr	r3, [pc, #24]	; (800ab0c <MX_RTC_Init+0x44>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800aaf6:	4805      	ldr	r0, [pc, #20]	; (800ab0c <MX_RTC_Init+0x44>)
 800aaf8:	f7fa f8ae 	bl	8004c58 <HAL_RTC_Init>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800ab02:	f000 f975 	bl	800adf0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800ab06:	bf00      	nop
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000a20 	.word	0x20000a20
 800ab10:	40002800 	.word	0x40002800

0800ab14 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800ab18:	4b14      	ldr	r3, [pc, #80]	; (800ab6c <MX_SDIO_SD_Init+0x58>)
 800ab1a:	4a15      	ldr	r2, [pc, #84]	; (800ab70 <MX_SDIO_SD_Init+0x5c>)
 800ab1c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800ab1e:	4b13      	ldr	r3, [pc, #76]	; (800ab6c <MX_SDIO_SD_Init+0x58>)
 800ab20:	2200      	movs	r2, #0
 800ab22:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800ab24:	4b11      	ldr	r3, [pc, #68]	; (800ab6c <MX_SDIO_SD_Init+0x58>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ab2a:	4b10      	ldr	r3, [pc, #64]	; (800ab6c <MX_SDIO_SD_Init+0x58>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800ab30:	4b0e      	ldr	r3, [pc, #56]	; (800ab6c <MX_SDIO_SD_Init+0x58>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ab36:	4b0d      	ldr	r3, [pc, #52]	; (800ab6c <MX_SDIO_SD_Init+0x58>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800ab3c:	4b0b      	ldr	r3, [pc, #44]	; (800ab6c <MX_SDIO_SD_Init+0x58>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800ab42:	480a      	ldr	r0, [pc, #40]	; (800ab6c <MX_SDIO_SD_Init+0x58>)
 800ab44:	f7fa f96d 	bl	8004e22 <HAL_SD_Init>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800ab4e:	f000 f94f 	bl	800adf0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ab52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab56:	4805      	ldr	r0, [pc, #20]	; (800ab6c <MX_SDIO_SD_Init+0x58>)
 800ab58:	f7fa fbb6 	bl	80052c8 <HAL_SD_ConfigWideBusOperation>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800ab62:	f000 f945 	bl	800adf0 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800ab66:	bf00      	nop
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20000a40 	.word	0x20000a40
 800ab70:	40012c00 	.word	0x40012c00

0800ab74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08e      	sub	sp, #56	; 0x38
 800ab78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ab7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab7e:	2200      	movs	r2, #0
 800ab80:	601a      	str	r2, [r3, #0]
 800ab82:	605a      	str	r2, [r3, #4]
 800ab84:	609a      	str	r2, [r3, #8]
 800ab86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab88:	f107 0320 	add.w	r3, r7, #32
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ab92:	1d3b      	adds	r3, r7, #4
 800ab94:	2200      	movs	r2, #0
 800ab96:	601a      	str	r2, [r3, #0]
 800ab98:	605a      	str	r2, [r3, #4]
 800ab9a:	609a      	str	r2, [r3, #8]
 800ab9c:	60da      	str	r2, [r3, #12]
 800ab9e:	611a      	str	r2, [r3, #16]
 800aba0:	615a      	str	r2, [r3, #20]
 800aba2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800aba4:	4b2b      	ldr	r3, [pc, #172]	; (800ac54 <MX_TIM2_Init+0xe0>)
 800aba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800abaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800abac:	4b29      	ldr	r3, [pc, #164]	; (800ac54 <MX_TIM2_Init+0xe0>)
 800abae:	2248      	movs	r2, #72	; 0x48
 800abb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abb2:	4b28      	ldr	r3, [pc, #160]	; (800ac54 <MX_TIM2_Init+0xe0>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000;
 800abb8:	4b26      	ldr	r3, [pc, #152]	; (800ac54 <MX_TIM2_Init+0xe0>)
 800abba:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800abbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800abc0:	4b24      	ldr	r3, [pc, #144]	; (800ac54 <MX_TIM2_Init+0xe0>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800abc6:	4b23      	ldr	r3, [pc, #140]	; (800ac54 <MX_TIM2_Init+0xe0>)
 800abc8:	2280      	movs	r2, #128	; 0x80
 800abca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800abcc:	4821      	ldr	r0, [pc, #132]	; (800ac54 <MX_TIM2_Init+0xe0>)
 800abce:	f7fa fed8 	bl	8005982 <HAL_TIM_Base_Init>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800abd8:	f000 f90a 	bl	800adf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800abdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abe0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800abe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800abe6:	4619      	mov	r1, r3
 800abe8:	481a      	ldr	r0, [pc, #104]	; (800ac54 <MX_TIM2_Init+0xe0>)
 800abea:	f7fb f8d7 	bl	8005d9c <HAL_TIM_ConfigClockSource>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800abf4:	f000 f8fc 	bl	800adf0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800abf8:	4816      	ldr	r0, [pc, #88]	; (800ac54 <MX_TIM2_Init+0xe0>)
 800abfa:	f7fa ff11 	bl	8005a20 <HAL_TIM_OC_Init>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800ac04:	f000 f8f4 	bl	800adf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ac10:	f107 0320 	add.w	r3, r7, #32
 800ac14:	4619      	mov	r1, r3
 800ac16:	480f      	ldr	r0, [pc, #60]	; (800ac54 <MX_TIM2_Init+0xe0>)
 800ac18:	f7fb fc60 	bl	80064dc <HAL_TIMEx_MasterConfigSynchronization>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800ac22:	f000 f8e5 	bl	800adf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800ac26:	2300      	movs	r3, #0
 800ac28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ac32:	2300      	movs	r3, #0
 800ac34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ac36:	1d3b      	adds	r3, r7, #4
 800ac38:	2200      	movs	r2, #0
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4805      	ldr	r0, [pc, #20]	; (800ac54 <MX_TIM2_Init+0xe0>)
 800ac3e:	f7fb f851 	bl	8005ce4 <HAL_TIM_OC_ConfigChannel>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800ac48:	f000 f8d2 	bl	800adf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800ac4c:	bf00      	nop
 800ac4e:	3738      	adds	r7, #56	; 0x38
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20000ac4 	.word	0x20000ac4

0800ac58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ac5c:	4b11      	ldr	r3, [pc, #68]	; (800aca4 <MX_USART1_UART_Init+0x4c>)
 800ac5e:	4a12      	ldr	r2, [pc, #72]	; (800aca8 <MX_USART1_UART_Init+0x50>)
 800ac60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ac62:	4b10      	ldr	r3, [pc, #64]	; (800aca4 <MX_USART1_UART_Init+0x4c>)
 800ac64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ac68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ac6a:	4b0e      	ldr	r3, [pc, #56]	; (800aca4 <MX_USART1_UART_Init+0x4c>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ac70:	4b0c      	ldr	r3, [pc, #48]	; (800aca4 <MX_USART1_UART_Init+0x4c>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ac76:	4b0b      	ldr	r3, [pc, #44]	; (800aca4 <MX_USART1_UART_Init+0x4c>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ac7c:	4b09      	ldr	r3, [pc, #36]	; (800aca4 <MX_USART1_UART_Init+0x4c>)
 800ac7e:	220c      	movs	r2, #12
 800ac80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ac82:	4b08      	ldr	r3, [pc, #32]	; (800aca4 <MX_USART1_UART_Init+0x4c>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ac88:	4b06      	ldr	r3, [pc, #24]	; (800aca4 <MX_USART1_UART_Init+0x4c>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ac8e:	4805      	ldr	r0, [pc, #20]	; (800aca4 <MX_USART1_UART_Init+0x4c>)
 800ac90:	f7fb fca6 	bl	80065e0 <HAL_UART_Init>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800ac9a:	f000 f8a9 	bl	800adf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ac9e:	bf00      	nop
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	200009dc 	.word	0x200009dc
 800aca8:	40011000 	.word	0x40011000

0800acac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800acb2:	2300      	movs	r3, #0
 800acb4:	607b      	str	r3, [r7, #4]
 800acb6:	4b0c      	ldr	r3, [pc, #48]	; (800ace8 <MX_DMA_Init+0x3c>)
 800acb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acba:	4a0b      	ldr	r2, [pc, #44]	; (800ace8 <MX_DMA_Init+0x3c>)
 800acbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800acc0:	6313      	str	r3, [r2, #48]	; 0x30
 800acc2:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <MX_DMA_Init+0x3c>)
 800acc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800acca:	607b      	str	r3, [r7, #4]
 800accc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800acce:	2200      	movs	r2, #0
 800acd0:	2100      	movs	r1, #0
 800acd2:	200c      	movs	r0, #12
 800acd4:	f7f5 fe19 	bl	800090a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800acd8:	200c      	movs	r0, #12
 800acda:	f7f5 fe32 	bl	8000942 <HAL_NVIC_EnableIRQ>

}
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	40023800 	.word	0x40023800

0800acec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08a      	sub	sp, #40	; 0x28
 800acf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acf2:	f107 0314 	add.w	r3, r7, #20
 800acf6:	2200      	movs	r2, #0
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	605a      	str	r2, [r3, #4]
 800acfc:	609a      	str	r2, [r3, #8]
 800acfe:	60da      	str	r2, [r3, #12]
 800ad00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad02:	2300      	movs	r3, #0
 800ad04:	613b      	str	r3, [r7, #16]
 800ad06:	4b37      	ldr	r3, [pc, #220]	; (800ade4 <MX_GPIO_Init+0xf8>)
 800ad08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0a:	4a36      	ldr	r2, [pc, #216]	; (800ade4 <MX_GPIO_Init+0xf8>)
 800ad0c:	f043 0304 	orr.w	r3, r3, #4
 800ad10:	6313      	str	r3, [r2, #48]	; 0x30
 800ad12:	4b34      	ldr	r3, [pc, #208]	; (800ade4 <MX_GPIO_Init+0xf8>)
 800ad14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	613b      	str	r3, [r7, #16]
 800ad1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
 800ad22:	4b30      	ldr	r3, [pc, #192]	; (800ade4 <MX_GPIO_Init+0xf8>)
 800ad24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad26:	4a2f      	ldr	r2, [pc, #188]	; (800ade4 <MX_GPIO_Init+0xf8>)
 800ad28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad2e:	4b2d      	ldr	r3, [pc, #180]	; (800ade4 <MX_GPIO_Init+0xf8>)
 800ad30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad36:	60fb      	str	r3, [r7, #12]
 800ad38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60bb      	str	r3, [r7, #8]
 800ad3e:	4b29      	ldr	r3, [pc, #164]	; (800ade4 <MX_GPIO_Init+0xf8>)
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	4a28      	ldr	r2, [pc, #160]	; (800ade4 <MX_GPIO_Init+0xf8>)
 800ad44:	f043 0301 	orr.w	r3, r3, #1
 800ad48:	6313      	str	r3, [r2, #48]	; 0x30
 800ad4a:	4b26      	ldr	r3, [pc, #152]	; (800ade4 <MX_GPIO_Init+0xf8>)
 800ad4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	60bb      	str	r3, [r7, #8]
 800ad54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad56:	2300      	movs	r3, #0
 800ad58:	607b      	str	r3, [r7, #4]
 800ad5a:	4b22      	ldr	r3, [pc, #136]	; (800ade4 <MX_GPIO_Init+0xf8>)
 800ad5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5e:	4a21      	ldr	r2, [pc, #132]	; (800ade4 <MX_GPIO_Init+0xf8>)
 800ad60:	f043 0302 	orr.w	r3, r3, #2
 800ad64:	6313      	str	r3, [r2, #48]	; 0x30
 800ad66:	4b1f      	ldr	r3, [pc, #124]	; (800ade4 <MX_GPIO_Init+0xf8>)
 800ad68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6a:	f003 0302 	and.w	r3, r3, #2
 800ad6e:	607b      	str	r3, [r7, #4]
 800ad70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800ad72:	2200      	movs	r2, #0
 800ad74:	f243 010f 	movw	r1, #12303	; 0x300f
 800ad78:	481b      	ldr	r0, [pc, #108]	; (800ade8 <MX_GPIO_Init+0xfc>)
 800ad7a:	f7f6 fa9b 	bl	80012b4 <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800ad7e:	2200      	movs	r2, #0
 800ad80:	2107      	movs	r1, #7
 800ad82:	481a      	ldr	r0, [pc, #104]	; (800adec <MX_GPIO_Init+0x100>)
 800ad84:	f7f6 fa96 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800ad88:	f243 030f 	movw	r3, #12303	; 0x300f
 800ad8c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad92:	2300      	movs	r3, #0
 800ad94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad96:	2300      	movs	r3, #0
 800ad98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ad9a:	f107 0314 	add.w	r3, r7, #20
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4811      	ldr	r0, [pc, #68]	; (800ade8 <MX_GPIO_Init+0xfc>)
 800ada2:	f7f6 f903 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800ada6:	2307      	movs	r3, #7
 800ada8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800adaa:	2301      	movs	r3, #1
 800adac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adb2:	2300      	movs	r3, #0
 800adb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adb6:	f107 0314 	add.w	r3, r7, #20
 800adba:	4619      	mov	r1, r3
 800adbc:	480b      	ldr	r0, [pc, #44]	; (800adec <MX_GPIO_Init+0x100>)
 800adbe:	f7f6 f8f5 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800adc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800adc8:	2300      	movs	r3, #0
 800adca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adcc:	2300      	movs	r3, #0
 800adce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800add0:	f107 0314 	add.w	r3, r7, #20
 800add4:	4619      	mov	r1, r3
 800add6:	4805      	ldr	r0, [pc, #20]	; (800adec <MX_GPIO_Init+0x100>)
 800add8:	f7f6 f8e8 	bl	8000fac <HAL_GPIO_Init>

}
 800addc:	bf00      	nop
 800adde:	3728      	adds	r7, #40	; 0x28
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	40023800 	.word	0x40023800
 800ade8:	40020800 	.word	0x40020800
 800adec:	40020000 	.word	0x40020000

0800adf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800adf0:	b480      	push	{r7}
 800adf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800adf4:	b672      	cpsid	i
}
 800adf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800adf8:	e7fe      	b.n	800adf8 <Error_Handler+0x8>
	...

0800adfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ae02:	2300      	movs	r3, #0
 800ae04:	607b      	str	r3, [r7, #4]
 800ae06:	4b10      	ldr	r3, [pc, #64]	; (800ae48 <HAL_MspInit+0x4c>)
 800ae08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae0a:	4a0f      	ldr	r2, [pc, #60]	; (800ae48 <HAL_MspInit+0x4c>)
 800ae0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae10:	6453      	str	r3, [r2, #68]	; 0x44
 800ae12:	4b0d      	ldr	r3, [pc, #52]	; (800ae48 <HAL_MspInit+0x4c>)
 800ae14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae1a:	607b      	str	r3, [r7, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae1e:	2300      	movs	r3, #0
 800ae20:	603b      	str	r3, [r7, #0]
 800ae22:	4b09      	ldr	r3, [pc, #36]	; (800ae48 <HAL_MspInit+0x4c>)
 800ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae26:	4a08      	ldr	r2, [pc, #32]	; (800ae48 <HAL_MspInit+0x4c>)
 800ae28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae2c:	6413      	str	r3, [r2, #64]	; 0x40
 800ae2e:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <HAL_MspInit+0x4c>)
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ae3a:	bf00      	nop
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	40023800 	.word	0x40023800

0800ae4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08c      	sub	sp, #48	; 0x30
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae54:	f107 031c 	add.w	r3, r7, #28
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]
 800ae5c:	605a      	str	r2, [r3, #4]
 800ae5e:	609a      	str	r2, [r3, #8]
 800ae60:	60da      	str	r2, [r3, #12]
 800ae62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a59      	ldr	r2, [pc, #356]	; (800afd0 <HAL_I2C_MspInit+0x184>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d162      	bne.n	800af34 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae6e:	2300      	movs	r3, #0
 800ae70:	61bb      	str	r3, [r7, #24]
 800ae72:	4b58      	ldr	r3, [pc, #352]	; (800afd4 <HAL_I2C_MspInit+0x188>)
 800ae74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae76:	4a57      	ldr	r2, [pc, #348]	; (800afd4 <HAL_I2C_MspInit+0x188>)
 800ae78:	f043 0302 	orr.w	r3, r3, #2
 800ae7c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae7e:	4b55      	ldr	r3, [pc, #340]	; (800afd4 <HAL_I2C_MspInit+0x188>)
 800ae80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae82:	f003 0302 	and.w	r3, r3, #2
 800ae86:	61bb      	str	r3, [r7, #24]
 800ae88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ae8a:	23c0      	movs	r3, #192	; 0xc0
 800ae8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ae8e:	2312      	movs	r3, #18
 800ae90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae92:	2301      	movs	r3, #1
 800ae94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae96:	2303      	movs	r3, #3
 800ae98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ae9a:	2304      	movs	r3, #4
 800ae9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae9e:	f107 031c 	add.w	r3, r7, #28
 800aea2:	4619      	mov	r1, r3
 800aea4:	484c      	ldr	r0, [pc, #304]	; (800afd8 <HAL_I2C_MspInit+0x18c>)
 800aea6:	f7f6 f881 	bl	8000fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800aeaa:	2300      	movs	r3, #0
 800aeac:	617b      	str	r3, [r7, #20]
 800aeae:	4b49      	ldr	r3, [pc, #292]	; (800afd4 <HAL_I2C_MspInit+0x188>)
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb2:	4a48      	ldr	r2, [pc, #288]	; (800afd4 <HAL_I2C_MspInit+0x188>)
 800aeb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aeb8:	6413      	str	r3, [r2, #64]	; 0x40
 800aeba:	4b46      	ldr	r3, [pc, #280]	; (800afd4 <HAL_I2C_MspInit+0x188>)
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aec2:	617b      	str	r3, [r7, #20]
 800aec4:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800aec6:	4b45      	ldr	r3, [pc, #276]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800aec8:	4a45      	ldr	r2, [pc, #276]	; (800afe0 <HAL_I2C_MspInit+0x194>)
 800aeca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800aecc:	4b43      	ldr	r3, [pc, #268]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800aece:	2200      	movs	r2, #0
 800aed0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aed2:	4b42      	ldr	r3, [pc, #264]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800aed4:	2240      	movs	r2, #64	; 0x40
 800aed6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aed8:	4b40      	ldr	r3, [pc, #256]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aede:	4b3f      	ldr	r3, [pc, #252]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800aee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aee4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aee6:	4b3d      	ldr	r3, [pc, #244]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aeec:	4b3b      	ldr	r3, [pc, #236]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800aef2:	4b3a      	ldr	r3, [pc, #232]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800aef8:	4b38      	ldr	r3, [pc, #224]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800aefa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aefe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800af00:	4b36      	ldr	r3, [pc, #216]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800af02:	2200      	movs	r2, #0
 800af04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800af06:	4835      	ldr	r0, [pc, #212]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800af08:	f7f5 fd36 	bl	8000978 <HAL_DMA_Init>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d001      	beq.n	800af16 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800af12:	f7ff ff6d 	bl	800adf0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a30      	ldr	r2, [pc, #192]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800af1a:	635a      	str	r2, [r3, #52]	; 0x34
 800af1c:	4a2f      	ldr	r2, [pc, #188]	; (800afdc <HAL_I2C_MspInit+0x190>)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800af22:	2200      	movs	r2, #0
 800af24:	2100      	movs	r1, #0
 800af26:	201f      	movs	r0, #31
 800af28:	f7f5 fcef 	bl	800090a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800af2c:	201f      	movs	r0, #31
 800af2e:	f7f5 fd08 	bl	8000942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800af32:	e049      	b.n	800afc8 <HAL_I2C_MspInit+0x17c>
  else if(hi2c->Instance==I2C2)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a2a      	ldr	r2, [pc, #168]	; (800afe4 <HAL_I2C_MspInit+0x198>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d144      	bne.n	800afc8 <HAL_I2C_MspInit+0x17c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af3e:	2300      	movs	r3, #0
 800af40:	613b      	str	r3, [r7, #16]
 800af42:	4b24      	ldr	r3, [pc, #144]	; (800afd4 <HAL_I2C_MspInit+0x188>)
 800af44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af46:	4a23      	ldr	r2, [pc, #140]	; (800afd4 <HAL_I2C_MspInit+0x188>)
 800af48:	f043 0302 	orr.w	r3, r3, #2
 800af4c:	6313      	str	r3, [r2, #48]	; 0x30
 800af4e:	4b21      	ldr	r3, [pc, #132]	; (800afd4 <HAL_I2C_MspInit+0x188>)
 800af50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af52:	f003 0302 	and.w	r3, r3, #2
 800af56:	613b      	str	r3, [r7, #16]
 800af58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800af5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800af60:	2312      	movs	r3, #18
 800af62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800af64:	2301      	movs	r3, #1
 800af66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af68:	2303      	movs	r3, #3
 800af6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800af6c:	2304      	movs	r3, #4
 800af6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af70:	f107 031c 	add.w	r3, r7, #28
 800af74:	4619      	mov	r1, r3
 800af76:	4818      	ldr	r0, [pc, #96]	; (800afd8 <HAL_I2C_MspInit+0x18c>)
 800af78:	f7f6 f818 	bl	8000fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800af7c:	2308      	movs	r3, #8
 800af7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800af80:	2312      	movs	r3, #18
 800af82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800af84:	2301      	movs	r3, #1
 800af86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af88:	2303      	movs	r3, #3
 800af8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800af8c:	2309      	movs	r3, #9
 800af8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af90:	f107 031c 	add.w	r3, r7, #28
 800af94:	4619      	mov	r1, r3
 800af96:	4810      	ldr	r0, [pc, #64]	; (800afd8 <HAL_I2C_MspInit+0x18c>)
 800af98:	f7f6 f808 	bl	8000fac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800af9c:	2300      	movs	r3, #0
 800af9e:	60fb      	str	r3, [r7, #12]
 800afa0:	4b0c      	ldr	r3, [pc, #48]	; (800afd4 <HAL_I2C_MspInit+0x188>)
 800afa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa4:	4a0b      	ldr	r2, [pc, #44]	; (800afd4 <HAL_I2C_MspInit+0x188>)
 800afa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800afaa:	6413      	str	r3, [r2, #64]	; 0x40
 800afac:	4b09      	ldr	r3, [pc, #36]	; (800afd4 <HAL_I2C_MspInit+0x188>)
 800afae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afb4:	60fb      	str	r3, [r7, #12]
 800afb6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800afb8:	2200      	movs	r2, #0
 800afba:	2100      	movs	r1, #0
 800afbc:	2021      	movs	r0, #33	; 0x21
 800afbe:	f7f5 fca4 	bl	800090a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800afc2:	2021      	movs	r0, #33	; 0x21
 800afc4:	f7f5 fcbd 	bl	8000942 <HAL_NVIC_EnableIRQ>
}
 800afc8:	bf00      	nop
 800afca:	3730      	adds	r7, #48	; 0x30
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	40005400 	.word	0x40005400
 800afd4:	40023800 	.word	0x40023800
 800afd8:	40020400 	.word	0x40020400
 800afdc:	200008d4 	.word	0x200008d4
 800afe0:	40026028 	.word	0x40026028
 800afe4:	40005800 	.word	0x40005800

0800afe8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aff0:	f107 0308 	add.w	r3, r7, #8
 800aff4:	2200      	movs	r2, #0
 800aff6:	601a      	str	r2, [r3, #0]
 800aff8:	605a      	str	r2, [r3, #4]
 800affa:	609a      	str	r2, [r3, #8]
 800affc:	60da      	str	r2, [r3, #12]
 800affe:	611a      	str	r2, [r3, #16]
 800b000:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a0c      	ldr	r2, [pc, #48]	; (800b038 <HAL_RTC_MspInit+0x50>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d111      	bne.n	800b030 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b00c:	2302      	movs	r3, #2
 800b00e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b010:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b014:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b016:	f107 0308 	add.w	r3, r7, #8
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7f9 fd2c 	bl	8004a78 <HAL_RCCEx_PeriphCLKConfig>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800b026:	f7ff fee3 	bl	800adf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b02a:	4b04      	ldr	r3, [pc, #16]	; (800b03c <HAL_RTC_MspInit+0x54>)
 800b02c:	2201      	movs	r2, #1
 800b02e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b030:	bf00      	nop
 800b032:	3720      	adds	r7, #32
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	40002800 	.word	0x40002800
 800b03c:	42470e3c 	.word	0x42470e3c

0800b040 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08c      	sub	sp, #48	; 0x30
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b048:	f107 031c 	add.w	r3, r7, #28
 800b04c:	2200      	movs	r2, #0
 800b04e:	601a      	str	r2, [r3, #0]
 800b050:	605a      	str	r2, [r3, #4]
 800b052:	609a      	str	r2, [r3, #8]
 800b054:	60da      	str	r2, [r3, #12]
 800b056:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a38      	ldr	r2, [pc, #224]	; (800b140 <HAL_SD_MspInit+0x100>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d169      	bne.n	800b136 <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800b062:	2300      	movs	r3, #0
 800b064:	61bb      	str	r3, [r7, #24]
 800b066:	4b37      	ldr	r3, [pc, #220]	; (800b144 <HAL_SD_MspInit+0x104>)
 800b068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b06a:	4a36      	ldr	r2, [pc, #216]	; (800b144 <HAL_SD_MspInit+0x104>)
 800b06c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b070:	6453      	str	r3, [r2, #68]	; 0x44
 800b072:	4b34      	ldr	r3, [pc, #208]	; (800b144 <HAL_SD_MspInit+0x104>)
 800b074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b07a:	61bb      	str	r3, [r7, #24]
 800b07c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b07e:	2300      	movs	r3, #0
 800b080:	617b      	str	r3, [r7, #20]
 800b082:	4b30      	ldr	r3, [pc, #192]	; (800b144 <HAL_SD_MspInit+0x104>)
 800b084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b086:	4a2f      	ldr	r2, [pc, #188]	; (800b144 <HAL_SD_MspInit+0x104>)
 800b088:	f043 0301 	orr.w	r3, r3, #1
 800b08c:	6313      	str	r3, [r2, #48]	; 0x30
 800b08e:	4b2d      	ldr	r3, [pc, #180]	; (800b144 <HAL_SD_MspInit+0x104>)
 800b090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	617b      	str	r3, [r7, #20]
 800b098:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b09a:	2300      	movs	r3, #0
 800b09c:	613b      	str	r3, [r7, #16]
 800b09e:	4b29      	ldr	r3, [pc, #164]	; (800b144 <HAL_SD_MspInit+0x104>)
 800b0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a2:	4a28      	ldr	r2, [pc, #160]	; (800b144 <HAL_SD_MspInit+0x104>)
 800b0a4:	f043 0302 	orr.w	r3, r3, #2
 800b0a8:	6313      	str	r3, [r2, #48]	; 0x30
 800b0aa:	4b26      	ldr	r3, [pc, #152]	; (800b144 <HAL_SD_MspInit+0x104>)
 800b0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ae:	f003 0302 	and.w	r3, r3, #2
 800b0b2:	613b      	str	r3, [r7, #16]
 800b0b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	4b22      	ldr	r3, [pc, #136]	; (800b144 <HAL_SD_MspInit+0x104>)
 800b0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0be:	4a21      	ldr	r2, [pc, #132]	; (800b144 <HAL_SD_MspInit+0x104>)
 800b0c0:	f043 0304 	orr.w	r3, r3, #4
 800b0c4:	6313      	str	r3, [r2, #48]	; 0x30
 800b0c6:	4b1f      	ldr	r3, [pc, #124]	; (800b144 <HAL_SD_MspInit+0x104>)
 800b0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ca:	f003 0304 	and.w	r3, r3, #4
 800b0ce:	60fb      	str	r3, [r7, #12]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b0d2:	2340      	movs	r3, #64	; 0x40
 800b0d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0d6:	2302      	movs	r3, #2
 800b0d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b0e2:	230c      	movs	r3, #12
 800b0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b0e6:	f107 031c 	add.w	r3, r7, #28
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	4816      	ldr	r0, [pc, #88]	; (800b148 <HAL_SD_MspInit+0x108>)
 800b0ee:	f7f5 ff5d 	bl	8000fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b0f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b100:	2303      	movs	r3, #3
 800b102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b104:	230c      	movs	r3, #12
 800b106:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b108:	f107 031c 	add.w	r3, r7, #28
 800b10c:	4619      	mov	r1, r3
 800b10e:	480f      	ldr	r0, [pc, #60]	; (800b14c <HAL_SD_MspInit+0x10c>)
 800b110:	f7f5 ff4c 	bl	8000fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800b114:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800b118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b11a:	2302      	movs	r3, #2
 800b11c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b11e:	2300      	movs	r3, #0
 800b120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b122:	2303      	movs	r3, #3
 800b124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b126:	230c      	movs	r3, #12
 800b128:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b12a:	f107 031c 	add.w	r3, r7, #28
 800b12e:	4619      	mov	r1, r3
 800b130:	4807      	ldr	r0, [pc, #28]	; (800b150 <HAL_SD_MspInit+0x110>)
 800b132:	f7f5 ff3b 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800b136:	bf00      	nop
 800b138:	3730      	adds	r7, #48	; 0x30
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	40012c00 	.word	0x40012c00
 800b144:	40023800 	.word	0x40023800
 800b148:	40020000 	.word	0x40020000
 800b14c:	40020400 	.word	0x40020400
 800b150:	40020800 	.word	0x40020800

0800b154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b164:	d115      	bne.n	800b192 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]
 800b16a:	4b0c      	ldr	r3, [pc, #48]	; (800b19c <HAL_TIM_Base_MspInit+0x48>)
 800b16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16e:	4a0b      	ldr	r2, [pc, #44]	; (800b19c <HAL_TIM_Base_MspInit+0x48>)
 800b170:	f043 0301 	orr.w	r3, r3, #1
 800b174:	6413      	str	r3, [r2, #64]	; 0x40
 800b176:	4b09      	ldr	r3, [pc, #36]	; (800b19c <HAL_TIM_Base_MspInit+0x48>)
 800b178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17a:	f003 0301 	and.w	r3, r3, #1
 800b17e:	60fb      	str	r3, [r7, #12]
 800b180:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800b182:	2200      	movs	r2, #0
 800b184:	2100      	movs	r1, #0
 800b186:	201c      	movs	r0, #28
 800b188:	f7f5 fbbf 	bl	800090a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800b18c:	201c      	movs	r0, #28
 800b18e:	f7f5 fbd8 	bl	8000942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b192:	bf00      	nop
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	40023800 	.word	0x40023800

0800b1a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08a      	sub	sp, #40	; 0x28
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1a8:	f107 0314 	add.w	r3, r7, #20
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	605a      	str	r2, [r3, #4]
 800b1b2:	609a      	str	r2, [r3, #8]
 800b1b4:	60da      	str	r2, [r3, #12]
 800b1b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a19      	ldr	r2, [pc, #100]	; (800b224 <HAL_UART_MspInit+0x84>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d12c      	bne.n	800b21c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	613b      	str	r3, [r7, #16]
 800b1c6:	4b18      	ldr	r3, [pc, #96]	; (800b228 <HAL_UART_MspInit+0x88>)
 800b1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ca:	4a17      	ldr	r2, [pc, #92]	; (800b228 <HAL_UART_MspInit+0x88>)
 800b1cc:	f043 0310 	orr.w	r3, r3, #16
 800b1d0:	6453      	str	r3, [r2, #68]	; 0x44
 800b1d2:	4b15      	ldr	r3, [pc, #84]	; (800b228 <HAL_UART_MspInit+0x88>)
 800b1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1d6:	f003 0310 	and.w	r3, r3, #16
 800b1da:	613b      	str	r3, [r7, #16]
 800b1dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60fb      	str	r3, [r7, #12]
 800b1e2:	4b11      	ldr	r3, [pc, #68]	; (800b228 <HAL_UART_MspInit+0x88>)
 800b1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e6:	4a10      	ldr	r2, [pc, #64]	; (800b228 <HAL_UART_MspInit+0x88>)
 800b1e8:	f043 0301 	orr.w	r3, r3, #1
 800b1ec:	6313      	str	r3, [r2, #48]	; 0x30
 800b1ee:	4b0e      	ldr	r3, [pc, #56]	; (800b228 <HAL_UART_MspInit+0x88>)
 800b1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	60fb      	str	r3, [r7, #12]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800b1fa:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800b1fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b200:	2302      	movs	r3, #2
 800b202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b204:	2300      	movs	r3, #0
 800b206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b208:	2303      	movs	r3, #3
 800b20a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b20c:	2307      	movs	r3, #7
 800b20e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b210:	f107 0314 	add.w	r3, r7, #20
 800b214:	4619      	mov	r1, r3
 800b216:	4805      	ldr	r0, [pc, #20]	; (800b22c <HAL_UART_MspInit+0x8c>)
 800b218:	f7f5 fec8 	bl	8000fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b21c:	bf00      	nop
 800b21e:	3728      	adds	r7, #40	; 0x28
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	40011000 	.word	0x40011000
 800b228:	40023800 	.word	0x40023800
 800b22c:	40020000 	.word	0x40020000

0800b230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800b234:	f7f9 fc04 	bl	8004a40 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b238:	e7fe      	b.n	800b238 <NMI_Handler+0x8>

0800b23a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b23a:	b480      	push	{r7}
 800b23c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b23e:	e7fe      	b.n	800b23e <HardFault_Handler+0x4>

0800b240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b240:	b480      	push	{r7}
 800b242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b244:	e7fe      	b.n	800b244 <MemManage_Handler+0x4>

0800b246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b246:	b480      	push	{r7}
 800b248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b24a:	e7fe      	b.n	800b24a <BusFault_Handler+0x4>

0800b24c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b24c:	b480      	push	{r7}
 800b24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b250:	e7fe      	b.n	800b250 <UsageFault_Handler+0x4>

0800b252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b252:	b480      	push	{r7}
 800b254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b256:	bf00      	nop
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b260:	b480      	push	{r7}
 800b262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b264:	bf00      	nop
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr

0800b26e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b26e:	b480      	push	{r7}
 800b270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b272:	bf00      	nop
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    AsynchronousTaskTimerUpdate();
 800b280:	f7ff f86a 	bl	800a358 <AsynchronousTaskTimerUpdate>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b284:	f7f5 fa22 	bl	80006cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b288:	bf00      	nop
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800b290:	4802      	ldr	r0, [pc, #8]	; (800b29c <DMA1_Stream1_IRQHandler+0x10>)
 800b292:	f7f5 fc41 	bl	8000b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b296:	bf00      	nop
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	200008d4 	.word	0x200008d4

0800b2a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800b2a4:	4803      	ldr	r0, [pc, #12]	; (800b2b4 <TIM2_IRQHandler+0x14>)
 800b2a6:	f7fa fc14 	bl	8005ad2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  TempCollect_ScheduleMeasurement();
 800b2aa:	f7ff faed 	bl	800a888 <TempCollect_ScheduleMeasurement>

  /* USER CODE END TIM2_IRQn 1 */
}
 800b2ae:	bf00      	nop
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000ac4 	.word	0x20000ac4

0800b2b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	TempCollect_I2CA_Done();
 800b2bc:	f7ff faf6 	bl	800a8ac <TempCollect_I2CA_Done>

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800b2c0:	4802      	ldr	r0, [pc, #8]	; (800b2cc <I2C1_EV_IRQHandler+0x14>)
 800b2c2:	f7f6 fa2d 	bl	8001720 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800b2c6:	bf00      	nop
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20000934 	.word	0x20000934

0800b2d0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	TempCollect_I2CB_Done();
 800b2d4:	f7ff faf6 	bl	800a8c4 <TempCollect_I2CB_Done>

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800b2d8:	4802      	ldr	r0, [pc, #8]	; (800b2e4 <I2C2_EV_IRQHandler+0x14>)
 800b2da:	f7f6 fa21 	bl	8001720 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800b2de:	bf00      	nop
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20000988 	.word	0x20000988

0800b2e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b2ec:	4802      	ldr	r0, [pc, #8]	; (800b2f8 <OTG_FS_IRQHandler+0x10>)
 800b2ee:	f7f7 ff22 	bl	8003136 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b2f2:	bf00      	nop
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	20001ddc 	.word	0x20001ddc

0800b2fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b300:	4b06      	ldr	r3, [pc, #24]	; (800b31c <SystemInit+0x20>)
 800b302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b306:	4a05      	ldr	r2, [pc, #20]	; (800b31c <SystemInit+0x20>)
 800b308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b30c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b310:	bf00      	nop
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	e000ed00 	.word	0xe000ed00

0800b320 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b324:	2200      	movs	r2, #0
 800b326:	4912      	ldr	r1, [pc, #72]	; (800b370 <MX_USB_DEVICE_Init+0x50>)
 800b328:	4812      	ldr	r0, [pc, #72]	; (800b374 <MX_USB_DEVICE_Init+0x54>)
 800b32a:	f7fd fe77 	bl	800901c <USBD_Init>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b334:	f7ff fd5c 	bl	800adf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b338:	490f      	ldr	r1, [pc, #60]	; (800b378 <MX_USB_DEVICE_Init+0x58>)
 800b33a:	480e      	ldr	r0, [pc, #56]	; (800b374 <MX_USB_DEVICE_Init+0x54>)
 800b33c:	f7fd fe9e 	bl	800907c <USBD_RegisterClass>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b346:	f7ff fd53 	bl	800adf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b34a:	490c      	ldr	r1, [pc, #48]	; (800b37c <MX_USB_DEVICE_Init+0x5c>)
 800b34c:	4809      	ldr	r0, [pc, #36]	; (800b374 <MX_USB_DEVICE_Init+0x54>)
 800b34e:	f7fd fdef 	bl	8008f30 <USBD_CDC_RegisterInterface>
 800b352:	4603      	mov	r3, r0
 800b354:	2b00      	cmp	r3, #0
 800b356:	d001      	beq.n	800b35c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b358:	f7ff fd4a 	bl	800adf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b35c:	4805      	ldr	r0, [pc, #20]	; (800b374 <MX_USB_DEVICE_Init+0x54>)
 800b35e:	f7fd feb4 	bl	80090ca <USBD_Start>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b368:	f7ff fd42 	bl	800adf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b36c:	bf00      	nop
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	20000130 	.word	0x20000130
 800b374:	20000b0c 	.word	0x20000b0c
 800b378:	20000014 	.word	0x20000014
 800b37c:	2000011c 	.word	0x2000011c

0800b380 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b384:	2200      	movs	r2, #0
 800b386:	4905      	ldr	r1, [pc, #20]	; (800b39c <CDC_Init_FS+0x1c>)
 800b388:	4805      	ldr	r0, [pc, #20]	; (800b3a0 <CDC_Init_FS+0x20>)
 800b38a:	f7fd fde6 	bl	8008f5a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b38e:	4905      	ldr	r1, [pc, #20]	; (800b3a4 <CDC_Init_FS+0x24>)
 800b390:	4803      	ldr	r0, [pc, #12]	; (800b3a0 <CDC_Init_FS+0x20>)
 800b392:	f7fd fe00 	bl	8008f96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b396:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b398:	4618      	mov	r0, r3
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	200015dc 	.word	0x200015dc
 800b3a0:	20000b0c 	.word	0x20000b0c
 800b3a4:	20000ddc 	.word	0x20000ddc

0800b3a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b3ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	4603      	mov	r3, r0
 800b3c0:	6039      	str	r1, [r7, #0]
 800b3c2:	71fb      	strb	r3, [r7, #7]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b3c8:	79fb      	ldrb	r3, [r7, #7]
 800b3ca:	2b23      	cmp	r3, #35	; 0x23
 800b3cc:	d84a      	bhi.n	800b464 <CDC_Control_FS+0xac>
 800b3ce:	a201      	add	r2, pc, #4	; (adr r2, 800b3d4 <CDC_Control_FS+0x1c>)
 800b3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d4:	0800b465 	.word	0x0800b465
 800b3d8:	0800b465 	.word	0x0800b465
 800b3dc:	0800b465 	.word	0x0800b465
 800b3e0:	0800b465 	.word	0x0800b465
 800b3e4:	0800b465 	.word	0x0800b465
 800b3e8:	0800b465 	.word	0x0800b465
 800b3ec:	0800b465 	.word	0x0800b465
 800b3f0:	0800b465 	.word	0x0800b465
 800b3f4:	0800b465 	.word	0x0800b465
 800b3f8:	0800b465 	.word	0x0800b465
 800b3fc:	0800b465 	.word	0x0800b465
 800b400:	0800b465 	.word	0x0800b465
 800b404:	0800b465 	.word	0x0800b465
 800b408:	0800b465 	.word	0x0800b465
 800b40c:	0800b465 	.word	0x0800b465
 800b410:	0800b465 	.word	0x0800b465
 800b414:	0800b465 	.word	0x0800b465
 800b418:	0800b465 	.word	0x0800b465
 800b41c:	0800b465 	.word	0x0800b465
 800b420:	0800b465 	.word	0x0800b465
 800b424:	0800b465 	.word	0x0800b465
 800b428:	0800b465 	.word	0x0800b465
 800b42c:	0800b465 	.word	0x0800b465
 800b430:	0800b465 	.word	0x0800b465
 800b434:	0800b465 	.word	0x0800b465
 800b438:	0800b465 	.word	0x0800b465
 800b43c:	0800b465 	.word	0x0800b465
 800b440:	0800b465 	.word	0x0800b465
 800b444:	0800b465 	.word	0x0800b465
 800b448:	0800b465 	.word	0x0800b465
 800b44c:	0800b465 	.word	0x0800b465
 800b450:	0800b465 	.word	0x0800b465
 800b454:	0800b465 	.word	0x0800b465
 800b458:	0800b465 	.word	0x0800b465
 800b45c:	0800b465 	.word	0x0800b465
 800b460:	0800b465 	.word	0x0800b465
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b464:	bf00      	nop
  }

  return (USBD_OK);
 800b466:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b468:	4618      	mov	r0, r3
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b47e:	6879      	ldr	r1, [r7, #4]
 800b480:	4805      	ldr	r0, [pc, #20]	; (800b498 <CDC_Receive_FS+0x24>)
 800b482:	f7fd fd88 	bl	8008f96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b486:	4804      	ldr	r0, [pc, #16]	; (800b498 <CDC_Receive_FS+0x24>)
 800b488:	f7fd fd9e 	bl	8008fc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b48c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	20000b0c 	.word	0x20000b0c

0800b49c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b087      	sub	sp, #28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b4ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	371c      	adds	r7, #28
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
	...

0800b4c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b08a      	sub	sp, #40	; 0x28
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4c8:	f107 0314 	add.w	r3, r7, #20
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	601a      	str	r2, [r3, #0]
 800b4d0:	605a      	str	r2, [r3, #4]
 800b4d2:	609a      	str	r2, [r3, #8]
 800b4d4:	60da      	str	r2, [r3, #12]
 800b4d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4e0:	d147      	bne.n	800b572 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	613b      	str	r3, [r7, #16]
 800b4e6:	4b25      	ldr	r3, [pc, #148]	; (800b57c <HAL_PCD_MspInit+0xbc>)
 800b4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ea:	4a24      	ldr	r2, [pc, #144]	; (800b57c <HAL_PCD_MspInit+0xbc>)
 800b4ec:	f043 0301 	orr.w	r3, r3, #1
 800b4f0:	6313      	str	r3, [r2, #48]	; 0x30
 800b4f2:	4b22      	ldr	r3, [pc, #136]	; (800b57c <HAL_PCD_MspInit+0xbc>)
 800b4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	613b      	str	r3, [r7, #16]
 800b4fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b4fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b504:	2300      	movs	r3, #0
 800b506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b508:	2300      	movs	r3, #0
 800b50a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b50c:	f107 0314 	add.w	r3, r7, #20
 800b510:	4619      	mov	r1, r3
 800b512:	481b      	ldr	r0, [pc, #108]	; (800b580 <HAL_PCD_MspInit+0xc0>)
 800b514:	f7f5 fd4a 	bl	8000fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b518:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b51c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b51e:	2302      	movs	r3, #2
 800b520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b522:	2300      	movs	r3, #0
 800b524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b526:	2303      	movs	r3, #3
 800b528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b52a:	230a      	movs	r3, #10
 800b52c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b52e:	f107 0314 	add.w	r3, r7, #20
 800b532:	4619      	mov	r1, r3
 800b534:	4812      	ldr	r0, [pc, #72]	; (800b580 <HAL_PCD_MspInit+0xc0>)
 800b536:	f7f5 fd39 	bl	8000fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b53a:	4b10      	ldr	r3, [pc, #64]	; (800b57c <HAL_PCD_MspInit+0xbc>)
 800b53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53e:	4a0f      	ldr	r2, [pc, #60]	; (800b57c <HAL_PCD_MspInit+0xbc>)
 800b540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b544:	6353      	str	r3, [r2, #52]	; 0x34
 800b546:	2300      	movs	r3, #0
 800b548:	60fb      	str	r3, [r7, #12]
 800b54a:	4b0c      	ldr	r3, [pc, #48]	; (800b57c <HAL_PCD_MspInit+0xbc>)
 800b54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b54e:	4a0b      	ldr	r2, [pc, #44]	; (800b57c <HAL_PCD_MspInit+0xbc>)
 800b550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b554:	6453      	str	r3, [r2, #68]	; 0x44
 800b556:	4b09      	ldr	r3, [pc, #36]	; (800b57c <HAL_PCD_MspInit+0xbc>)
 800b558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b55a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b55e:	60fb      	str	r3, [r7, #12]
 800b560:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b562:	2200      	movs	r2, #0
 800b564:	2100      	movs	r1, #0
 800b566:	2043      	movs	r0, #67	; 0x43
 800b568:	f7f5 f9cf 	bl	800090a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b56c:	2043      	movs	r0, #67	; 0x43
 800b56e:	f7f5 f9e8 	bl	8000942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b572:	bf00      	nop
 800b574:	3728      	adds	r7, #40	; 0x28
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	40023800 	.word	0x40023800
 800b580:	40020000 	.word	0x40020000

0800b584 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b598:	4619      	mov	r1, r3
 800b59a:	4610      	mov	r0, r2
 800b59c:	f7fd fde0 	bl	8009160 <USBD_LL_SetupStage>
}
 800b5a0:	bf00      	nop
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b5ba:	78fa      	ldrb	r2, [r7, #3]
 800b5bc:	6879      	ldr	r1, [r7, #4]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	00db      	lsls	r3, r3, #3
 800b5c2:	1a9b      	subs	r3, r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	440b      	add	r3, r1
 800b5c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	78fb      	ldrb	r3, [r7, #3]
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	f7fd fe1a 	bl	800920a <USBD_LL_DataOutStage>
}
 800b5d6:	bf00      	nop
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b082      	sub	sp, #8
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b5f0:	78fa      	ldrb	r2, [r7, #3]
 800b5f2:	6879      	ldr	r1, [r7, #4]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	00db      	lsls	r3, r3, #3
 800b5f8:	1a9b      	subs	r3, r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	440b      	add	r3, r1
 800b5fe:	3348      	adds	r3, #72	; 0x48
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	78fb      	ldrb	r3, [r7, #3]
 800b604:	4619      	mov	r1, r3
 800b606:	f7fd fe63 	bl	80092d0 <USBD_LL_DataInStage>
}
 800b60a:	bf00      	nop
 800b60c:	3708      	adds	r7, #8
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b082      	sub	sp, #8
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b620:	4618      	mov	r0, r3
 800b622:	f7fd ff77 	bl	8009514 <USBD_LL_SOF>
}
 800b626:	bf00      	nop
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b084      	sub	sp, #16
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b636:	2301      	movs	r3, #1
 800b638:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	2b02      	cmp	r3, #2
 800b640:	d001      	beq.n	800b646 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b642:	f7ff fbd5 	bl	800adf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b64c:	7bfa      	ldrb	r2, [r7, #15]
 800b64e:	4611      	mov	r1, r2
 800b650:	4618      	mov	r0, r3
 800b652:	f7fd ff21 	bl	8009498 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fd fecd 	bl	80093fc <USBD_LL_Reset>
}
 800b662:	bf00      	nop
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fd ff1c 	bl	80094b8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	6812      	ldr	r2, [r2, #0]
 800b68e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b692:	f043 0301 	orr.w	r3, r3, #1
 800b696:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a1b      	ldr	r3, [r3, #32]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6a0:	4b04      	ldr	r3, [pc, #16]	; (800b6b4 <HAL_PCD_SuspendCallback+0x48>)
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	4a03      	ldr	r2, [pc, #12]	; (800b6b4 <HAL_PCD_SuspendCallback+0x48>)
 800b6a6:	f043 0306 	orr.w	r3, r3, #6
 800b6aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b6ac:	bf00      	nop
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	e000ed00 	.word	0xe000ed00

0800b6b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fd ff0c 	bl	80094e4 <USBD_LL_Resume>
}
 800b6cc:	bf00      	nop
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6e6:	78fa      	ldrb	r2, [r7, #3]
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fd ff5a 	bl	80095a4 <USBD_LL_IsoOUTIncomplete>
}
 800b6f0:	bf00      	nop
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	460b      	mov	r3, r1
 800b702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b70a:	78fa      	ldrb	r2, [r7, #3]
 800b70c:	4611      	mov	r1, r2
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fd ff22 	bl	8009558 <USBD_LL_IsoINIncomplete>
}
 800b714:	bf00      	nop
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fd ff60 	bl	80095f0 <USBD_LL_DevConnected>
}
 800b730:	bf00      	nop
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b746:	4618      	mov	r0, r3
 800b748:	f7fd ff5d 	bl	8009606 <USBD_LL_DevDisconnected>
}
 800b74c:	bf00      	nop
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d13c      	bne.n	800b7de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b764:	4a20      	ldr	r2, [pc, #128]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a1e      	ldr	r2, [pc, #120]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b770:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b774:	4b1c      	ldr	r3, [pc, #112]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b77a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b77c:	4b1a      	ldr	r3, [pc, #104]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b77e:	2204      	movs	r2, #4
 800b780:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b782:	4b19      	ldr	r3, [pc, #100]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b784:	2202      	movs	r2, #2
 800b786:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b788:	4b17      	ldr	r3, [pc, #92]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b78e:	4b16      	ldr	r3, [pc, #88]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b790:	2202      	movs	r2, #2
 800b792:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b794:	4b14      	ldr	r3, [pc, #80]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b796:	2200      	movs	r2, #0
 800b798:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b79a:	4b13      	ldr	r3, [pc, #76]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b7a0:	4b11      	ldr	r3, [pc, #68]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b7a6:	4b10      	ldr	r3, [pc, #64]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b7ac:	4b0e      	ldr	r3, [pc, #56]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b7b2:	480d      	ldr	r0, [pc, #52]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b7b4:	f7f7 fb6f 	bl	8002e96 <HAL_PCD_Init>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b7be:	f7ff fb17 	bl	800adf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b7c2:	2180      	movs	r1, #128	; 0x80
 800b7c4:	4808      	ldr	r0, [pc, #32]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b7c6:	f7f8 fccc 	bl	8004162 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b7ca:	2240      	movs	r2, #64	; 0x40
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	4806      	ldr	r0, [pc, #24]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b7d0:	f7f8 fc80 	bl	80040d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b7d4:	2280      	movs	r2, #128	; 0x80
 800b7d6:	2101      	movs	r1, #1
 800b7d8:	4803      	ldr	r0, [pc, #12]	; (800b7e8 <USBD_LL_Init+0x94>)
 800b7da:	f7f8 fc7b 	bl	80040d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	20001ddc 	.word	0x20001ddc

0800b7ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b802:	4618      	mov	r0, r3
 800b804:	f7f7 fc64 	bl	80030d0 <HAL_PCD_Start>
 800b808:	4603      	mov	r3, r0
 800b80a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 f942 	bl	800ba98 <USBD_Get_USB_Status>
 800b814:	4603      	mov	r3, r0
 800b816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b818:	7bbb      	ldrb	r3, [r7, #14]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	4608      	mov	r0, r1
 800b82c:	4611      	mov	r1, r2
 800b82e:	461a      	mov	r2, r3
 800b830:	4603      	mov	r3, r0
 800b832:	70fb      	strb	r3, [r7, #3]
 800b834:	460b      	mov	r3, r1
 800b836:	70bb      	strb	r3, [r7, #2]
 800b838:	4613      	mov	r3, r2
 800b83a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b83c:	2300      	movs	r3, #0
 800b83e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b840:	2300      	movs	r3, #0
 800b842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b84a:	78bb      	ldrb	r3, [r7, #2]
 800b84c:	883a      	ldrh	r2, [r7, #0]
 800b84e:	78f9      	ldrb	r1, [r7, #3]
 800b850:	f7f8 f848 	bl	80038e4 <HAL_PCD_EP_Open>
 800b854:	4603      	mov	r3, r0
 800b856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b858:	7bfb      	ldrb	r3, [r7, #15]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f000 f91c 	bl	800ba98 <USBD_Get_USB_Status>
 800b860:	4603      	mov	r3, r0
 800b862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b864:	7bbb      	ldrb	r3, [r7, #14]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b084      	sub	sp, #16
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	460b      	mov	r3, r1
 800b878:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b87e:	2300      	movs	r3, #0
 800b880:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b888:	78fa      	ldrb	r2, [r7, #3]
 800b88a:	4611      	mov	r1, r2
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7f8 f891 	bl	80039b4 <HAL_PCD_EP_Close>
 800b892:	4603      	mov	r3, r0
 800b894:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b896:	7bfb      	ldrb	r3, [r7, #15]
 800b898:	4618      	mov	r0, r3
 800b89a:	f000 f8fd 	bl	800ba98 <USBD_Get_USB_Status>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8c6:	78fa      	ldrb	r2, [r7, #3]
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7f8 f969 	bl	8003ba2 <HAL_PCD_EP_SetStall>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 f8de 	bl	800ba98 <USBD_Get_USB_Status>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b084      	sub	sp, #16
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b904:	78fa      	ldrb	r2, [r7, #3]
 800b906:	4611      	mov	r1, r2
 800b908:	4618      	mov	r0, r3
 800b90a:	f7f8 f9ae 	bl	8003c6a <HAL_PCD_EP_ClrStall>
 800b90e:	4603      	mov	r3, r0
 800b910:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b912:	7bfb      	ldrb	r3, [r7, #15]
 800b914:	4618      	mov	r0, r3
 800b916:	f000 f8bf 	bl	800ba98 <USBD_Get_USB_Status>
 800b91a:	4603      	mov	r3, r0
 800b91c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b91e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b93a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b93c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b940:	2b00      	cmp	r3, #0
 800b942:	da0b      	bge.n	800b95c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b944:	78fb      	ldrb	r3, [r7, #3]
 800b946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b94a:	68f9      	ldr	r1, [r7, #12]
 800b94c:	4613      	mov	r3, r2
 800b94e:	00db      	lsls	r3, r3, #3
 800b950:	1a9b      	subs	r3, r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	440b      	add	r3, r1
 800b956:	333e      	adds	r3, #62	; 0x3e
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	e00b      	b.n	800b974 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b95c:	78fb      	ldrb	r3, [r7, #3]
 800b95e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b962:	68f9      	ldr	r1, [r7, #12]
 800b964:	4613      	mov	r3, r2
 800b966:	00db      	lsls	r3, r3, #3
 800b968:	1a9b      	subs	r3, r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	440b      	add	r3, r1
 800b96e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b972:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b974:	4618      	mov	r0, r3
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b99a:	78fa      	ldrb	r2, [r7, #3]
 800b99c:	4611      	mov	r1, r2
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7f7 ff7b 	bl	800389a <HAL_PCD_SetAddress>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f000 f874 	bl	800ba98 <USBD_Get_USB_Status>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b086      	sub	sp, #24
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	60f8      	str	r0, [r7, #12]
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	603b      	str	r3, [r7, #0]
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b9dc:	7af9      	ldrb	r1, [r7, #11]
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	f7f8 f894 	bl	8003b0e <HAL_PCD_EP_Transmit>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9ea:	7dfb      	ldrb	r3, [r7, #23]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f000 f853 	bl	800ba98 <USBD_Get_USB_Status>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3718      	adds	r7, #24
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	607a      	str	r2, [r7, #4]
 800ba0a:	603b      	str	r3, [r7, #0]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba1e:	7af9      	ldrb	r1, [r7, #11]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	f7f8 f810 	bl	8003a48 <HAL_PCD_EP_Receive>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f000 f832 	bl	800ba98 <USBD_Get_USB_Status>
 800ba34:	4603      	mov	r3, r0
 800ba36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba38:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3718      	adds	r7, #24
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b082      	sub	sp, #8
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba54:	78fa      	ldrb	r2, [r7, #3]
 800ba56:	4611      	mov	r1, r2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7f8 f840 	bl	8003ade <HAL_PCD_EP_GetRxCount>
 800ba5e:	4603      	mov	r3, r0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ba70:	4b03      	ldr	r3, [pc, #12]	; (800ba80 <USBD_static_malloc+0x18>)
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	370c      	adds	r7, #12
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	200005f0 	.word	0x200005f0

0800ba84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]

}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baa2:	2300      	movs	r3, #0
 800baa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800baa6:	79fb      	ldrb	r3, [r7, #7]
 800baa8:	2b03      	cmp	r3, #3
 800baaa:	d817      	bhi.n	800badc <USBD_Get_USB_Status+0x44>
 800baac:	a201      	add	r2, pc, #4	; (adr r2, 800bab4 <USBD_Get_USB_Status+0x1c>)
 800baae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab2:	bf00      	nop
 800bab4:	0800bac5 	.word	0x0800bac5
 800bab8:	0800bacb 	.word	0x0800bacb
 800babc:	0800bad1 	.word	0x0800bad1
 800bac0:	0800bad7 	.word	0x0800bad7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bac4:	2300      	movs	r3, #0
 800bac6:	73fb      	strb	r3, [r7, #15]
    break;
 800bac8:	e00b      	b.n	800bae2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800baca:	2303      	movs	r3, #3
 800bacc:	73fb      	strb	r3, [r7, #15]
    break;
 800bace:	e008      	b.n	800bae2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bad0:	2301      	movs	r3, #1
 800bad2:	73fb      	strb	r3, [r7, #15]
    break;
 800bad4:	e005      	b.n	800bae2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bad6:	2303      	movs	r3, #3
 800bad8:	73fb      	strb	r3, [r7, #15]
    break;
 800bada:	e002      	b.n	800bae2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800badc:	2303      	movs	r3, #3
 800bade:	73fb      	strb	r3, [r7, #15]
    break;
 800bae0:	bf00      	nop
  }
  return usb_status;
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	4603      	mov	r3, r0
 800baf8:	6039      	str	r1, [r7, #0]
 800bafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	2212      	movs	r2, #18
 800bb00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bb02:	4b03      	ldr	r3, [pc, #12]	; (800bb10 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	2000014c 	.word	0x2000014c

0800bb14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	6039      	str	r1, [r7, #0]
 800bb1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2204      	movs	r2, #4
 800bb24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb26:	4b03      	ldr	r3, [pc, #12]	; (800bb34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	20000160 	.word	0x20000160

0800bb38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	4603      	mov	r3, r0
 800bb40:	6039      	str	r1, [r7, #0]
 800bb42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb44:	79fb      	ldrb	r3, [r7, #7]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d105      	bne.n	800bb56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	4907      	ldr	r1, [pc, #28]	; (800bb6c <USBD_FS_ProductStrDescriptor+0x34>)
 800bb4e:	4808      	ldr	r0, [pc, #32]	; (800bb70 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb50:	f7fe faed 	bl	800a12e <USBD_GetString>
 800bb54:	e004      	b.n	800bb60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	4904      	ldr	r1, [pc, #16]	; (800bb6c <USBD_FS_ProductStrDescriptor+0x34>)
 800bb5a:	4805      	ldr	r0, [pc, #20]	; (800bb70 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb5c:	f7fe fae7 	bl	800a12e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb60:	4b02      	ldr	r3, [pc, #8]	; (800bb6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	200021e4 	.word	0x200021e4
 800bb70:	0800bdd4 	.word	0x0800bdd4

0800bb74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	6039      	str	r1, [r7, #0]
 800bb7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	4904      	ldr	r1, [pc, #16]	; (800bb94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb84:	4804      	ldr	r0, [pc, #16]	; (800bb98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb86:	f7fe fad2 	bl	800a12e <USBD_GetString>
  return USBD_StrDesc;
 800bb8a:	4b02      	ldr	r3, [pc, #8]	; (800bb94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	200021e4 	.word	0x200021e4
 800bb98:	0800bdec 	.word	0x0800bdec

0800bb9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	4603      	mov	r3, r0
 800bba4:	6039      	str	r1, [r7, #0]
 800bba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	221a      	movs	r2, #26
 800bbac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bbae:	f000 f843 	bl	800bc38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bbb2:	4b02      	ldr	r3, [pc, #8]	; (800bbbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	20000164 	.word	0x20000164

0800bbc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	6039      	str	r1, [r7, #0]
 800bbca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bbcc:	79fb      	ldrb	r3, [r7, #7]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d105      	bne.n	800bbde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	4907      	ldr	r1, [pc, #28]	; (800bbf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbd6:	4808      	ldr	r0, [pc, #32]	; (800bbf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbd8:	f7fe faa9 	bl	800a12e <USBD_GetString>
 800bbdc:	e004      	b.n	800bbe8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	4904      	ldr	r1, [pc, #16]	; (800bbf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbe2:	4805      	ldr	r0, [pc, #20]	; (800bbf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbe4:	f7fe faa3 	bl	800a12e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbe8:	4b02      	ldr	r3, [pc, #8]	; (800bbf4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	200021e4 	.word	0x200021e4
 800bbf8:	0800be00 	.word	0x0800be00

0800bbfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	4603      	mov	r3, r0
 800bc04:	6039      	str	r1, [r7, #0]
 800bc06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc08:	79fb      	ldrb	r3, [r7, #7]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d105      	bne.n	800bc1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	4907      	ldr	r1, [pc, #28]	; (800bc30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc12:	4808      	ldr	r0, [pc, #32]	; (800bc34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc14:	f7fe fa8b 	bl	800a12e <USBD_GetString>
 800bc18:	e004      	b.n	800bc24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	4904      	ldr	r1, [pc, #16]	; (800bc30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc1e:	4805      	ldr	r0, [pc, #20]	; (800bc34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc20:	f7fe fa85 	bl	800a12e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc24:	4b02      	ldr	r3, [pc, #8]	; (800bc30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3708      	adds	r7, #8
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	200021e4 	.word	0x200021e4
 800bc34:	0800be0c 	.word	0x0800be0c

0800bc38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc3e:	4b0f      	ldr	r3, [pc, #60]	; (800bc7c <Get_SerialNum+0x44>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc44:	4b0e      	ldr	r3, [pc, #56]	; (800bc80 <Get_SerialNum+0x48>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc4a:	4b0e      	ldr	r3, [pc, #56]	; (800bc84 <Get_SerialNum+0x4c>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4413      	add	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d009      	beq.n	800bc72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc5e:	2208      	movs	r2, #8
 800bc60:	4909      	ldr	r1, [pc, #36]	; (800bc88 <Get_SerialNum+0x50>)
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f000 f814 	bl	800bc90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc68:	2204      	movs	r2, #4
 800bc6a:	4908      	ldr	r1, [pc, #32]	; (800bc8c <Get_SerialNum+0x54>)
 800bc6c:	68b8      	ldr	r0, [r7, #8]
 800bc6e:	f000 f80f 	bl	800bc90 <IntToUnicode>
  }
}
 800bc72:	bf00      	nop
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	1fff7a10 	.word	0x1fff7a10
 800bc80:	1fff7a14 	.word	0x1fff7a14
 800bc84:	1fff7a18 	.word	0x1fff7a18
 800bc88:	20000166 	.word	0x20000166
 800bc8c:	20000176 	.word	0x20000176

0800bc90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b087      	sub	sp, #28
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bca2:	2300      	movs	r3, #0
 800bca4:	75fb      	strb	r3, [r7, #23]
 800bca6:	e027      	b.n	800bcf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	0f1b      	lsrs	r3, r3, #28
 800bcac:	2b09      	cmp	r3, #9
 800bcae:	d80b      	bhi.n	800bcc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	0f1b      	lsrs	r3, r3, #28
 800bcb4:	b2da      	uxtb	r2, r3
 800bcb6:	7dfb      	ldrb	r3, [r7, #23]
 800bcb8:	005b      	lsls	r3, r3, #1
 800bcba:	4619      	mov	r1, r3
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	440b      	add	r3, r1
 800bcc0:	3230      	adds	r2, #48	; 0x30
 800bcc2:	b2d2      	uxtb	r2, r2
 800bcc4:	701a      	strb	r2, [r3, #0]
 800bcc6:	e00a      	b.n	800bcde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	0f1b      	lsrs	r3, r3, #28
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	7dfb      	ldrb	r3, [r7, #23]
 800bcd0:	005b      	lsls	r3, r3, #1
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	440b      	add	r3, r1
 800bcd8:	3237      	adds	r2, #55	; 0x37
 800bcda:	b2d2      	uxtb	r2, r2
 800bcdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	011b      	lsls	r3, r3, #4
 800bce2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bce4:	7dfb      	ldrb	r3, [r7, #23]
 800bce6:	005b      	lsls	r3, r3, #1
 800bce8:	3301      	adds	r3, #1
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	4413      	add	r3, r2
 800bcee:	2200      	movs	r2, #0
 800bcf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bcf2:	7dfb      	ldrb	r3, [r7, #23]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	75fb      	strb	r3, [r7, #23]
 800bcf8:	7dfa      	ldrb	r2, [r7, #23]
 800bcfa:	79fb      	ldrb	r3, [r7, #7]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d3d3      	bcc.n	800bca8 <IntToUnicode+0x18>
  }
}
 800bd00:	bf00      	nop
 800bd02:	bf00      	nop
 800bd04:	371c      	adds	r7, #28
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
	...

0800bd10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800bd10:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bd48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800bd14:	480d      	ldr	r0, [pc, #52]	; (800bd4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800bd16:	490e      	ldr	r1, [pc, #56]	; (800bd50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800bd18:	4a0e      	ldr	r2, [pc, #56]	; (800bd54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800bd1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bd1c:	e002      	b.n	800bd24 <LoopCopyDataInit>

0800bd1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bd1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bd20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bd22:	3304      	adds	r3, #4

0800bd24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bd24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bd26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bd28:	d3f9      	bcc.n	800bd1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bd2a:	4a0b      	ldr	r2, [pc, #44]	; (800bd58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800bd2c:	4c0b      	ldr	r4, [pc, #44]	; (800bd5c <LoopFillZerobss+0x26>)
  movs r3, #0
 800bd2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bd30:	e001      	b.n	800bd36 <LoopFillZerobss>

0800bd32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bd32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bd34:	3204      	adds	r2, #4

0800bd36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bd36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bd38:	d3fb      	bcc.n	800bd32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bd3a:	f7ff fadf 	bl	800b2fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bd3e:	f000 f811 	bl	800bd64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bd42:	f7fe fdcb 	bl	800a8dc <main>
  bx  lr    
 800bd46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800bd48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800bd4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bd50:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800bd54:	0800be4c 	.word	0x0800be4c
  ldr r2, =_sbss
 800bd58:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800bd5c:	200023e4 	.word	0x200023e4

0800bd60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bd60:	e7fe      	b.n	800bd60 <ADC_IRQHandler>
	...

0800bd64 <__libc_init_array>:
 800bd64:	b570      	push	{r4, r5, r6, lr}
 800bd66:	4d0d      	ldr	r5, [pc, #52]	; (800bd9c <__libc_init_array+0x38>)
 800bd68:	4c0d      	ldr	r4, [pc, #52]	; (800bda0 <__libc_init_array+0x3c>)
 800bd6a:	1b64      	subs	r4, r4, r5
 800bd6c:	10a4      	asrs	r4, r4, #2
 800bd6e:	2600      	movs	r6, #0
 800bd70:	42a6      	cmp	r6, r4
 800bd72:	d109      	bne.n	800bd88 <__libc_init_array+0x24>
 800bd74:	4d0b      	ldr	r5, [pc, #44]	; (800bda4 <__libc_init_array+0x40>)
 800bd76:	4c0c      	ldr	r4, [pc, #48]	; (800bda8 <__libc_init_array+0x44>)
 800bd78:	f000 f820 	bl	800bdbc <_init>
 800bd7c:	1b64      	subs	r4, r4, r5
 800bd7e:	10a4      	asrs	r4, r4, #2
 800bd80:	2600      	movs	r6, #0
 800bd82:	42a6      	cmp	r6, r4
 800bd84:	d105      	bne.n	800bd92 <__libc_init_array+0x2e>
 800bd86:	bd70      	pop	{r4, r5, r6, pc}
 800bd88:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd8c:	4798      	blx	r3
 800bd8e:	3601      	adds	r6, #1
 800bd90:	e7ee      	b.n	800bd70 <__libc_init_array+0xc>
 800bd92:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd96:	4798      	blx	r3
 800bd98:	3601      	adds	r6, #1
 800bd9a:	e7f2      	b.n	800bd82 <__libc_init_array+0x1e>
 800bd9c:	0800be44 	.word	0x0800be44
 800bda0:	0800be44 	.word	0x0800be44
 800bda4:	0800be44 	.word	0x0800be44
 800bda8:	0800be48 	.word	0x0800be48

0800bdac <memset>:
 800bdac:	4402      	add	r2, r0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d100      	bne.n	800bdb6 <memset+0xa>
 800bdb4:	4770      	bx	lr
 800bdb6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdba:	e7f9      	b.n	800bdb0 <memset+0x4>

0800bdbc <_init>:
 800bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdbe:	bf00      	nop
 800bdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdc2:	bc08      	pop	{r3}
 800bdc4:	469e      	mov	lr, r3
 800bdc6:	4770      	bx	lr

0800bdc8 <_fini>:
 800bdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdca:	bf00      	nop
 800bdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdce:	bc08      	pop	{r3}
 800bdd0:	469e      	mov	lr, r3
 800bdd2:	4770      	bx	lr
