
Temperature Sensor Array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b07c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800b214  0800b214  0001b214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b27c  0800b27c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800b27c  0800b27c  0001b27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b284  0800b284  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b284  0800b284  0001b284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b288  0800b288  0001b288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800b28c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d3c  20000180  0800b40c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ebc  0800b40c  00021ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020177  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004089  00000000  00000000  00040327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  000443b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  000458a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b844  00000000  00000000  00046c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001beb6  00000000  00000000  00062484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000975ab  00000000  00000000  0007e33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001158e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057bc  00000000  00000000  00115938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b1fc 	.word	0x0800b1fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	0800b1fc 	.word	0x0800b1fc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MCP9808_CommunicateTaskI2C1>:


float MCP9808_ReadTemperature(I2C_HandleTypeDef hI2C_Transciever, uint8_t u8DeviceHWAddress);

void MCP9808_CommunicateTaskI2C1()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af04      	add	r7, sp, #16

	uint16_t u16FixedPointReading = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	80fb      	strh	r3, [r7, #6]


	switch(I2C1_Array.eState)
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <MCP9808_CommunicateTaskI2C1+0xb0>)
 80004dc:	7b9b      	ldrb	r3, [r3, #14]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d848      	bhi.n	8000574 <MCP9808_CommunicateTaskI2C1+0xa4>
 80004e2:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <MCP9808_CommunicateTaskI2C1+0x18>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	080004f9 	.word	0x080004f9
 80004ec:	08000501 	.word	0x08000501
 80004f0:	08000529 	.word	0x08000529
 80004f4:	08000575 	.word	0x08000575
	{
	case(MCP9808_Initialized):
			I2C1_Array.eState = MCP9808_TemperatureReadRequest;
 80004f8:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MCP9808_CommunicateTaskI2C1+0xb0>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	739a      	strb	r2, [r3, #14]
			break;
 80004fe:	e03a      	b.n	8000576 <MCP9808_CommunicateTaskI2C1+0xa6>
	case(MCP9808_TemperatureReadRequest):
//			HAL_I2C_Master_Transmit(&hI2C_Transciever, u8DeviceAddres, &u8Buffer, 2, 1000);
			HAL_I2C_Mem_Read(I2C1_Array.hTranscieverHandle, I2C1_Array.u8DeviceAddressList[0], MCP9808_AddressAmbientTemperature, 1, &I2C1_Array.u16RawTemperature, 2, 1000);
 8000500:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <MCP9808_CommunicateTaskI2C1+0xb0>)
 8000502:	6818      	ldr	r0, [r3, #0]
 8000504:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MCP9808_CommunicateTaskI2C1+0xb0>)
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	b299      	uxth	r1, r3
 800050a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050e:	9302      	str	r3, [sp, #8]
 8000510:	2302      	movs	r3, #2
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MCP9808_CommunicateTaskI2C1+0xb4>)
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2301      	movs	r3, #1
 800051a:	2205      	movs	r2, #5
 800051c:	f001 f81c 	bl	8001558 <HAL_I2C_Mem_Read>
			I2C1_Array.eState = MCP9808_TemperatureConversion;
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <MCP9808_CommunicateTaskI2C1+0xb0>)
 8000522:	2202      	movs	r2, #2
 8000524:	739a      	strb	r2, [r3, #14]
			break;
 8000526:	e026      	b.n	8000576 <MCP9808_CommunicateTaskI2C1+0xa6>
	case(MCP9808_TemperatureConversion):
			u16FixedPointReading = ((I2C1_Array.u16RawTemperature && 0x003F) << 8);
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MCP9808_CommunicateTaskI2C1+0xb0>)
 800052a:	8a1b      	ldrh	r3, [r3, #16]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <MCP9808_CommunicateTaskI2C1+0x66>
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	e000      	b.n	8000538 <MCP9808_CommunicateTaskI2C1+0x68>
 8000536:	2300      	movs	r3, #0
 8000538:	80fb      	strh	r3, [r7, #6]
			u16FixedPointReading += ((uint8_t)(I2C1_Array.u16RawTemperature && 0xFF00) >> 8);
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <MCP9808_CommunicateTaskI2C1+0xb0>)
 800053c:	8a1b      	ldrh	r3, [r3, #16]
 800053e:	2b00      	cmp	r3, #0
 8000540:	bf14      	ite	ne
 8000542:	2301      	movne	r3, #1
 8000544:	2300      	moveq	r3, #0
 8000546:	b2db      	uxtb	r3, r3
 8000548:	b2db      	uxtb	r3, r3
 800054a:	121b      	asrs	r3, r3, #8
 800054c:	b29a      	uxth	r2, r3
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	4413      	add	r3, r2
 8000552:	80fb      	strh	r3, [r7, #6]

			I2C1_Array.fConvertedTemperature = (float)(u16FixedPointReading) / 16;
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	ee07 3a90 	vmov	s15, r3
 800055a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800055e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MCP9808_CommunicateTaskI2C1+0xb0>)
 8000568:	edc3 7a05 	vstr	s15, [r3, #20]
			I2C1_Array.eState = MCP9808_TemperatureReadRequest;
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <MCP9808_CommunicateTaskI2C1+0xb0>)
 800056e:	2201      	movs	r2, #1
 8000570:	739a      	strb	r2, [r3, #14]
			break;
 8000572:	e000      	b.n	8000576 <MCP9808_CommunicateTaskI2C1+0xa6>
	case(MCP9808_Waiting):
			break;
	default:
	break;
 8000574:	bf00      	nop
	}

}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200003c0 	.word	0x200003c0
 8000584:	200003d0 	.word	0x200003d0

08000588 <MCP9808_InitCommunicationI2C1>:


void MCP9808_InitCommunicationI2C1(I2C_HandleTypeDef *hI2C_Transciever, uint8_t *u8DeviceAddressList, uint8_t u8DeviceCount)
{
 8000588:	b480      	push	{r7}
 800058a:	b087      	sub	sp, #28
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	4613      	mov	r3, r2
 8000594:	71fb      	strb	r3, [r7, #7]
	I2C1_Array.hTranscieverHandle = hI2C_Transciever;
 8000596:	4a10      	ldr	r2, [pc, #64]	; (80005d8 <MCP9808_InitCommunicationI2C1+0x50>)
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	6013      	str	r3, [r2, #0]
	for( uint8_t u8AddresIndex = 0; u8AddresIndex < u8DeviceCount; u8AddresIndex++ )
 800059c:	2300      	movs	r3, #0
 800059e:	75fb      	strb	r3, [r7, #23]
 80005a0:	e00d      	b.n	80005be <MCP9808_InitCommunicationI2C1+0x36>
	{
		I2C1_Array.u8DeviceAddressList[u8AddresIndex] = ((MCP9808_AddresLowerNibble << 4) + u8DeviceAddressList[u8AddresIndex]);
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	4413      	add	r3, r2
 80005a8:	781a      	ldrb	r2, [r3, #0]
 80005aa:	7dfb      	ldrb	r3, [r7, #23]
 80005ac:	3230      	adds	r2, #48	; 0x30
 80005ae:	b2d1      	uxtb	r1, r2
 80005b0:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <MCP9808_InitCommunicationI2C1+0x50>)
 80005b2:	4413      	add	r3, r2
 80005b4:	460a      	mov	r2, r1
 80005b6:	711a      	strb	r2, [r3, #4]
	for( uint8_t u8AddresIndex = 0; u8AddresIndex < u8DeviceCount; u8AddresIndex++ )
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	3301      	adds	r3, #1
 80005bc:	75fb      	strb	r3, [r7, #23]
 80005be:	7dfa      	ldrb	r2, [r7, #23]
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d3ed      	bcc.n	80005a2 <MCP9808_InitCommunicationI2C1+0x1a>
	}
	I2C1_Array.bEnabled = true;
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <MCP9808_InitCommunicationI2C1+0x50>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	735a      	strb	r2, [r3, #13]
}
 80005cc:	bf00      	nop
 80005ce:	371c      	adds	r7, #28
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	200003c0 	.word	0x200003c0

080005dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <HAL_Init+0x40>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0d      	ldr	r2, [pc, #52]	; (800061c <HAL_Init+0x40>)
 80005e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <HAL_Init+0x40>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <HAL_Init+0x40>)
 80005f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <HAL_Init+0x40>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_Init+0x40>)
 80005fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f94f 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 f808 	bl	8000620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000610:	f009 fe74 	bl	800a2fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023c00 	.word	0x40023c00

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_InitTick+0x54>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_InitTick+0x58>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	fbb3 f3f1 	udiv	r3, r3, r1
 800063a:	fbb2 f3f3 	udiv	r3, r2, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f967 	bl	8000912 <HAL_SYSTICK_Config>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	e00e      	b.n	800066c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b0f      	cmp	r3, #15
 8000652:	d80a      	bhi.n	800066a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000654:	2200      	movs	r2, #0
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	f04f 30ff 	mov.w	r0, #4294967295
 800065c:	f000 f92f 	bl	80008be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <HAL_InitTick+0x5c>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000666:	2300      	movs	r3, #0
 8000668:	e000      	b.n	800066c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000118 	.word	0x20000118
 8000678:	20000004 	.word	0x20000004
 800067c:	20000000 	.word	0x20000000

08000680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_IncTick+0x20>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_IncTick+0x24>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4413      	add	r3, r2
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <HAL_IncTick+0x24>)
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000004 	.word	0x20000004
 80006a4:	200003f0 	.word	0x200003f0

080006a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return uwTick;
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <HAL_GetTick+0x14>)
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	200003f0 	.word	0x200003f0

080006c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c8:	f7ff ffee 	bl	80006a8 <HAL_GetTick>
 80006cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d8:	d005      	beq.n	80006e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <HAL_Delay+0x44>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	461a      	mov	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4413      	add	r3, r2
 80006e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006e6:	bf00      	nop
 80006e8:	f7ff ffde 	bl	80006a8 <HAL_GetTick>
 80006ec:	4602      	mov	r2, r0
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d8f7      	bhi.n	80006e8 <HAL_Delay+0x28>
  {
  }
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000004 	.word	0x20000004

08000708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <__NVIC_SetPriorityGrouping+0x44>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073a:	4a04      	ldr	r2, [pc, #16]	; (800074c <__NVIC_SetPriorityGrouping+0x44>)
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	60d3      	str	r3, [r2, #12]
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <__NVIC_GetPriorityGrouping+0x18>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	f003 0307 	and.w	r3, r3, #7
}
 800075e:	4618      	mov	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	db0b      	blt.n	8000796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f003 021f 	and.w	r2, r3, #31
 8000784:	4907      	ldr	r1, [pc, #28]	; (80007a4 <__NVIC_EnableIRQ+0x38>)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	095b      	lsrs	r3, r3, #5
 800078c:	2001      	movs	r0, #1
 800078e:	fa00 f202 	lsl.w	r2, r0, r2
 8000792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000e100 	.word	0xe000e100

080007a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	db0a      	blt.n	80007d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	490c      	ldr	r1, [pc, #48]	; (80007f4 <__NVIC_SetPriority+0x4c>)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	0112      	lsls	r2, r2, #4
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	440b      	add	r3, r1
 80007cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d0:	e00a      	b.n	80007e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4908      	ldr	r1, [pc, #32]	; (80007f8 <__NVIC_SetPriority+0x50>)
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	3b04      	subs	r3, #4
 80007e0:	0112      	lsls	r2, r2, #4
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	761a      	strb	r2, [r3, #24]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000e100 	.word	0xe000e100
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b089      	sub	sp, #36	; 0x24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	f1c3 0307 	rsb	r3, r3, #7
 8000816:	2b04      	cmp	r3, #4
 8000818:	bf28      	it	cs
 800081a:	2304      	movcs	r3, #4
 800081c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3304      	adds	r3, #4
 8000822:	2b06      	cmp	r3, #6
 8000824:	d902      	bls.n	800082c <NVIC_EncodePriority+0x30>
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3b03      	subs	r3, #3
 800082a:	e000      	b.n	800082e <NVIC_EncodePriority+0x32>
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	f04f 32ff 	mov.w	r2, #4294967295
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43da      	mvns	r2, r3
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	401a      	ands	r2, r3
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000844:	f04f 31ff 	mov.w	r1, #4294967295
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	43d9      	mvns	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	4313      	orrs	r3, r2
         );
}
 8000856:	4618      	mov	r0, r3
 8000858:	3724      	adds	r7, #36	; 0x24
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
	...

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000874:	d301      	bcc.n	800087a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2301      	movs	r3, #1
 8000878:	e00f      	b.n	800089a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <SysTick_Config+0x40>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000882:	210f      	movs	r1, #15
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f7ff ff8e 	bl	80007a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SysTick_Config+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SysTick_Config+0x40>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff29 	bl	8000708 <__NVIC_SetPriorityGrouping>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d0:	f7ff ff3e 	bl	8000750 <__NVIC_GetPriorityGrouping>
 80008d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff ff8e 	bl	80007fc <NVIC_EncodePriority>
 80008e0:	4602      	mov	r2, r0
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff5d 	bl	80007a8 <__NVIC_SetPriority>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff31 	bl	800076c <__NVIC_EnableIRQ>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ffa2 	bl	8000864 <SysTick_Config>
 8000920:	4603      	mov	r3, r0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff feb6 	bl	80006a8 <HAL_GetTick>
 800093c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	e099      	b.n	8000a7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2202      	movs	r2, #2
 800094c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f022 0201 	bic.w	r2, r2, #1
 8000966:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000968:	e00f      	b.n	800098a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800096a:	f7ff fe9d 	bl	80006a8 <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	2b05      	cmp	r3, #5
 8000976:	d908      	bls.n	800098a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2220      	movs	r2, #32
 800097c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2203      	movs	r2, #3
 8000982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000986:	2303      	movs	r3, #3
 8000988:	e078      	b.n	8000a7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1e8      	bne.n	800096a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	4b38      	ldr	r3, [pc, #224]	; (8000a84 <HAL_DMA_Init+0x158>)
 80009a4:	4013      	ands	r3, r2
 80009a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6a1b      	ldr	r3, [r3, #32]
 80009d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	4313      	orrs	r3, r2
 80009da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d107      	bne.n	80009f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	4313      	orrs	r3, r2
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f023 0307 	bic.w	r3, r3, #7
 8000a0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d117      	bne.n	8000a4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00e      	beq.n	8000a4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 fa19 	bl	8000e68 <DMA_CheckFifoParam>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d008      	beq.n	8000a4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2240      	movs	r2, #64	; 0x40
 8000a40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2201      	movs	r2, #1
 8000a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e016      	b.n	8000a7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f9d0 	bl	8000dfc <DMA_CalcBaseAndBitshift>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a64:	223f      	movs	r2, #63	; 0x3f
 8000a66:	409a      	lsls	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2201      	movs	r2, #1
 8000a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	f010803f 	.word	0xf010803f

08000a88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d004      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00c      	b.n	8000ac0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2205      	movs	r2, #5
 8000aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 0201 	bic.w	r2, r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ad8:	4b92      	ldr	r3, [pc, #584]	; (8000d24 <HAL_DMA_IRQHandler+0x258>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a92      	ldr	r2, [pc, #584]	; (8000d28 <HAL_DMA_IRQHandler+0x25c>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	0a9b      	lsrs	r3, r3, #10
 8000ae4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af6:	2208      	movs	r2, #8
 8000af8:	409a      	lsls	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	4013      	ands	r3, r2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d01a      	beq.n	8000b38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d013      	beq.n	8000b38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 0204 	bic.w	r2, r2, #4
 8000b1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b24:	2208      	movs	r2, #8
 8000b26:	409a      	lsls	r2, r3
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b30:	f043 0201 	orr.w	r2, r3, #1
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4013      	ands	r3, r2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d012      	beq.n	8000b6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00b      	beq.n	8000b6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	409a      	lsls	r2, r3
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b66:	f043 0202 	orr.w	r2, r3, #2
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b72:	2204      	movs	r2, #4
 8000b74:	409a      	lsls	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d012      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00b      	beq.n	8000ba4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b90:	2204      	movs	r2, #4
 8000b92:	409a      	lsls	r2, r3
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b9c:	f043 0204 	orr.w	r2, r3, #4
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba8:	2210      	movs	r2, #16
 8000baa:	409a      	lsls	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d043      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d03c      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	2210      	movs	r2, #16
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d018      	beq.n	8000c0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d108      	bne.n	8000bfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d024      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	4798      	blx	r3
 8000bfa:	e01f      	b.n	8000c3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01b      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	4798      	blx	r3
 8000c0c:	e016      	b.n	8000c3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d107      	bne.n	8000c2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 0208 	bic.w	r2, r2, #8
 8000c2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c40:	2220      	movs	r2, #32
 8000c42:	409a      	lsls	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 808e 	beq.w	8000d6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f000 8086 	beq.w	8000d6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c62:	2220      	movs	r2, #32
 8000c64:	409a      	lsls	r2, r3
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b05      	cmp	r3, #5
 8000c74:	d136      	bne.n	8000ce4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 0216 	bic.w	r2, r2, #22
 8000c84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d103      	bne.n	8000ca6 <HAL_DMA_IRQHandler+0x1da>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d007      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0208 	bic.w	r2, r2, #8
 8000cb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cba:	223f      	movs	r2, #63	; 0x3f
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d07d      	beq.n	8000dd6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	4798      	blx	r3
        }
        return;
 8000ce2:	e078      	b.n	8000dd6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d01c      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d108      	bne.n	8000d12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d030      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	4798      	blx	r3
 8000d10:	e02b      	b.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d027      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	4798      	blx	r3
 8000d22:	e022      	b.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
 8000d24:	20000118 	.word	0x20000118
 8000d28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10f      	bne.n	8000d5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 0210 	bic.w	r2, r2, #16
 8000d48:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d032      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d022      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2205      	movs	r2, #5
 8000d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0201 	bic.w	r2, r2, #1
 8000d94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d307      	bcc.n	8000db2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f2      	bne.n	8000d96 <HAL_DMA_IRQHandler+0x2ca>
 8000db0:	e000      	b.n	8000db4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000db2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2201      	movs	r2, #1
 8000db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d005      	beq.n	8000dd8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	4798      	blx	r3
 8000dd4:	e000      	b.n	8000dd8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000dd6:	bf00      	nop
    }
  }
}
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop

08000de0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dee:	b2db      	uxtb	r3, r3
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	3b10      	subs	r3, #16
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <DMA_CalcBaseAndBitshift+0x64>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	091b      	lsrs	r3, r3, #4
 8000e14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e16:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <DMA_CalcBaseAndBitshift+0x68>)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d909      	bls.n	8000e3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e32:	f023 0303 	bic.w	r3, r3, #3
 8000e36:	1d1a      	adds	r2, r3, #4
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	659a      	str	r2, [r3, #88]	; 0x58
 8000e3c:	e007      	b.n	8000e4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e46:	f023 0303 	bic.w	r3, r3, #3
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	aaaaaaab 	.word	0xaaaaaaab
 8000e64:	0800b25c 	.word	0x0800b25c

08000e68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11f      	bne.n	8000ec2 <DMA_CheckFifoParam+0x5a>
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d856      	bhi.n	8000f36 <DMA_CheckFifoParam+0xce>
 8000e88:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <DMA_CheckFifoParam+0x28>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000ea1 	.word	0x08000ea1
 8000e94:	08000eb3 	.word	0x08000eb3
 8000e98:	08000ea1 	.word	0x08000ea1
 8000e9c:	08000f37 	.word	0x08000f37
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d046      	beq.n	8000f3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000eb0:	e043      	b.n	8000f3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000eba:	d140      	bne.n	8000f3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ec0:	e03d      	b.n	8000f3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eca:	d121      	bne.n	8000f10 <DMA_CheckFifoParam+0xa8>
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d837      	bhi.n	8000f42 <DMA_CheckFifoParam+0xda>
 8000ed2:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <DMA_CheckFifoParam+0x70>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000ee9 	.word	0x08000ee9
 8000edc:	08000eef 	.word	0x08000eef
 8000ee0:	08000ee9 	.word	0x08000ee9
 8000ee4:	08000f01 	.word	0x08000f01
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
      break;
 8000eec:	e030      	b.n	8000f50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d025      	beq.n	8000f46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000efe:	e022      	b.n	8000f46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f08:	d11f      	bne.n	8000f4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f0e:	e01c      	b.n	8000f4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d903      	bls.n	8000f1e <DMA_CheckFifoParam+0xb6>
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d003      	beq.n	8000f24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f1c:	e018      	b.n	8000f50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
      break;
 8000f22:	e015      	b.n	8000f50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00e      	beq.n	8000f4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
      break;
 8000f34:	e00b      	b.n	8000f4e <DMA_CheckFifoParam+0xe6>
      break;
 8000f36:	bf00      	nop
 8000f38:	e00a      	b.n	8000f50 <DMA_CheckFifoParam+0xe8>
      break;
 8000f3a:	bf00      	nop
 8000f3c:	e008      	b.n	8000f50 <DMA_CheckFifoParam+0xe8>
      break;
 8000f3e:	bf00      	nop
 8000f40:	e006      	b.n	8000f50 <DMA_CheckFifoParam+0xe8>
      break;
 8000f42:	bf00      	nop
 8000f44:	e004      	b.n	8000f50 <DMA_CheckFifoParam+0xe8>
      break;
 8000f46:	bf00      	nop
 8000f48:	e002      	b.n	8000f50 <DMA_CheckFifoParam+0xe8>
      break;   
 8000f4a:	bf00      	nop
 8000f4c:	e000      	b.n	8000f50 <DMA_CheckFifoParam+0xe8>
      break;
 8000f4e:	bf00      	nop
    }
  } 
  
  return status; 
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e159      	b.n	8001230 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8148 	bne.w	800122a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d005      	beq.n	8000fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d130      	bne.n	8001014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b03      	cmp	r3, #3
 800101e:	d017      	beq.n	8001050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d123      	bne.n	80010a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0203 	and.w	r2, r3, #3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80a2 	beq.w	800122a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b57      	ldr	r3, [pc, #348]	; (8001248 <HAL_GPIO_Init+0x2e8>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a56      	ldr	r2, [pc, #344]	; (8001248 <HAL_GPIO_Init+0x2e8>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b54      	ldr	r3, [pc, #336]	; (8001248 <HAL_GPIO_Init+0x2e8>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001102:	4a52      	ldr	r2, [pc, #328]	; (800124c <HAL_GPIO_Init+0x2ec>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a49      	ldr	r2, [pc, #292]	; (8001250 <HAL_GPIO_Init+0x2f0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0x202>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a48      	ldr	r2, [pc, #288]	; (8001254 <HAL_GPIO_Init+0x2f4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x1fe>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a47      	ldr	r2, [pc, #284]	; (8001258 <HAL_GPIO_Init+0x2f8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x1fa>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a46      	ldr	r2, [pc, #280]	; (800125c <HAL_GPIO_Init+0x2fc>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x1f6>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a45      	ldr	r2, [pc, #276]	; (8001260 <HAL_GPIO_Init+0x300>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x1f2>
 800114e:	2304      	movs	r3, #4
 8001150:	e008      	b.n	8001164 <HAL_GPIO_Init+0x204>
 8001152:	2307      	movs	r3, #7
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x204>
 8001156:	2303      	movs	r3, #3
 8001158:	e004      	b.n	8001164 <HAL_GPIO_Init+0x204>
 800115a:	2302      	movs	r3, #2
 800115c:	e002      	b.n	8001164 <HAL_GPIO_Init+0x204>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <HAL_GPIO_Init+0x204>
 8001162:	2300      	movs	r3, #0
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	f002 0203 	and.w	r2, r2, #3
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	4093      	lsls	r3, r2
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001174:	4935      	ldr	r1, [pc, #212]	; (800124c <HAL_GPIO_Init+0x2ec>)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001182:	4b38      	ldr	r3, [pc, #224]	; (8001264 <HAL_GPIO_Init+0x304>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a6:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <HAL_GPIO_Init+0x304>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_GPIO_Init+0x304>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d0:	4a24      	ldr	r2, [pc, #144]	; (8001264 <HAL_GPIO_Init+0x304>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <HAL_GPIO_Init+0x304>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fa:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <HAL_GPIO_Init+0x304>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_GPIO_Init+0x304>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001224:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <HAL_GPIO_Init+0x304>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3301      	adds	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	2b0f      	cmp	r3, #15
 8001234:	f67f aea2 	bls.w	8000f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40013800 	.word	0x40013800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	40020800 	.word	0x40020800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40021000 	.word	0x40021000
 8001264:	40013c00 	.word	0x40013c00

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	041a      	lsls	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	041a      	lsls	r2, r3, #16
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	400b      	ands	r3, r1
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e12b      	b.n	800153a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d106      	bne.n	80012fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f009 f828 	bl	800a34c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2224      	movs	r2, #36	; 0x24
 8001300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001334:	f003 ff24 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8001338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4a81      	ldr	r2, [pc, #516]	; (8001544 <HAL_I2C_Init+0x274>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d807      	bhi.n	8001354 <HAL_I2C_Init+0x84>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4a80      	ldr	r2, [pc, #512]	; (8001548 <HAL_I2C_Init+0x278>)
 8001348:	4293      	cmp	r3, r2
 800134a:	bf94      	ite	ls
 800134c:	2301      	movls	r3, #1
 800134e:	2300      	movhi	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	e006      	b.n	8001362 <HAL_I2C_Init+0x92>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a7d      	ldr	r2, [pc, #500]	; (800154c <HAL_I2C_Init+0x27c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	bf94      	ite	ls
 800135c:	2301      	movls	r3, #1
 800135e:	2300      	movhi	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0e7      	b.n	800153a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4a78      	ldr	r2, [pc, #480]	; (8001550 <HAL_I2C_Init+0x280>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0c9b      	lsrs	r3, r3, #18
 8001374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	430a      	orrs	r2, r1
 8001388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a6a      	ldr	r2, [pc, #424]	; (8001544 <HAL_I2C_Init+0x274>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d802      	bhi.n	80013a4 <HAL_I2C_Init+0xd4>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	3301      	adds	r3, #1
 80013a2:	e009      	b.n	80013b8 <HAL_I2C_Init+0xe8>
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	4a69      	ldr	r2, [pc, #420]	; (8001554 <HAL_I2C_Init+0x284>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	099b      	lsrs	r3, r3, #6
 80013b6:	3301      	adds	r3, #1
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	430b      	orrs	r3, r1
 80013be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	495c      	ldr	r1, [pc, #368]	; (8001544 <HAL_I2C_Init+0x274>)
 80013d4:	428b      	cmp	r3, r1
 80013d6:	d819      	bhi.n	800140c <HAL_I2C_Init+0x13c>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1e59      	subs	r1, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e6:	1c59      	adds	r1, r3, #1
 80013e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013ec:	400b      	ands	r3, r1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00a      	beq.n	8001408 <HAL_I2C_Init+0x138>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1e59      	subs	r1, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001400:	3301      	adds	r3, #1
 8001402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001406:	e051      	b.n	80014ac <HAL_I2C_Init+0x1dc>
 8001408:	2304      	movs	r3, #4
 800140a:	e04f      	b.n	80014ac <HAL_I2C_Init+0x1dc>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d111      	bne.n	8001438 <HAL_I2C_Init+0x168>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1e58      	subs	r0, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	440b      	add	r3, r1
 8001422:	fbb0 f3f3 	udiv	r3, r0, r3
 8001426:	3301      	adds	r3, #1
 8001428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	e012      	b.n	800145e <HAL_I2C_Init+0x18e>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1e58      	subs	r0, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	0099      	lsls	r1, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	fbb0 f3f3 	udiv	r3, r0, r3
 800144e:	3301      	adds	r3, #1
 8001450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf0c      	ite	eq
 8001458:	2301      	moveq	r3, #1
 800145a:	2300      	movne	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_I2C_Init+0x196>
 8001462:	2301      	movs	r3, #1
 8001464:	e022      	b.n	80014ac <HAL_I2C_Init+0x1dc>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10e      	bne.n	800148c <HAL_I2C_Init+0x1bc>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1e58      	subs	r0, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6859      	ldr	r1, [r3, #4]
 8001476:	460b      	mov	r3, r1
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	440b      	add	r3, r1
 800147c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001480:	3301      	adds	r3, #1
 8001482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800148a:	e00f      	b.n	80014ac <HAL_I2C_Init+0x1dc>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	1e58      	subs	r0, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	0099      	lsls	r1, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	6809      	ldr	r1, [r1, #0]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69da      	ldr	r2, [r3, #28]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6911      	ldr	r1, [r2, #16]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68d2      	ldr	r2, [r2, #12]
 80014e6:	4311      	orrs	r1, r2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2220      	movs	r2, #32
 8001526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	000186a0 	.word	0x000186a0
 8001548:	001e847f 	.word	0x001e847f
 800154c:	003d08ff 	.word	0x003d08ff
 8001550:	431bde83 	.word	0x431bde83
 8001554:	10624dd3 	.word	0x10624dd3

08001558 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af02      	add	r7, sp, #8
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	4608      	mov	r0, r1
 8001562:	4611      	mov	r1, r2
 8001564:	461a      	mov	r2, r3
 8001566:	4603      	mov	r3, r0
 8001568:	817b      	strh	r3, [r7, #10]
 800156a:	460b      	mov	r3, r1
 800156c:	813b      	strh	r3, [r7, #8]
 800156e:	4613      	mov	r3, r2
 8001570:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001572:	f7ff f899 	bl	80006a8 <HAL_GetTick>
 8001576:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b20      	cmp	r3, #32
 8001582:	f040 8208 	bne.w	8001996 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2319      	movs	r3, #25
 800158c:	2201      	movs	r2, #1
 800158e:	497b      	ldr	r1, [pc, #492]	; (800177c <HAL_I2C_Mem_Read+0x224>)
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f001 fe5d 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800159c:	2302      	movs	r3, #2
 800159e:	e1fb      	b.n	8001998 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_I2C_Mem_Read+0x56>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e1f4      	b.n	8001998 <HAL_I2C_Mem_Read+0x440>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d007      	beq.n	80015d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2222      	movs	r2, #34	; 0x22
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2240      	movs	r2, #64	; 0x40
 80015f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001604:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160a:	b29a      	uxth	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4a5b      	ldr	r2, [pc, #364]	; (8001780 <HAL_I2C_Mem_Read+0x228>)
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001616:	88f8      	ldrh	r0, [r7, #6]
 8001618:	893a      	ldrh	r2, [r7, #8]
 800161a:	8979      	ldrh	r1, [r7, #10]
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4603      	mov	r3, r0
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f001 fc82 	bl	8002f30 <I2C_RequestMemoryRead>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e1b0      	b.n	8001998 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163a:	2b00      	cmp	r3, #0
 800163c:	d113      	bne.n	8001666 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	623b      	str	r3, [r7, #32]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	623b      	str	r3, [r7, #32]
 8001652:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e184      	b.n	8001970 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166a:	2b01      	cmp	r3, #1
 800166c:	d11b      	bne.n	80016a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800167c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	e164      	b.n	8001970 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d11b      	bne.n	80016e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	e144      	b.n	8001970 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80016fc:	e138      	b.n	8001970 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001702:	2b03      	cmp	r3, #3
 8001704:	f200 80f1 	bhi.w	80018ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170c:	2b01      	cmp	r3, #1
 800170e:	d123      	bne.n	8001758 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001712:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f001 fee5 	bl	80034e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e139      	b.n	8001998 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001740:	3b01      	subs	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174c:	b29b      	uxth	r3, r3
 800174e:	3b01      	subs	r3, #1
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001756:	e10b      	b.n	8001970 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	2b02      	cmp	r3, #2
 800175e:	d14e      	bne.n	80017fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001766:	2200      	movs	r2, #0
 8001768:	4906      	ldr	r1, [pc, #24]	; (8001784 <HAL_I2C_Mem_Read+0x22c>)
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f001 fd70 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d008      	beq.n	8001788 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e10e      	b.n	8001998 <HAL_I2C_Mem_Read+0x440>
 800177a:	bf00      	nop
 800177c:	00100002 	.word	0x00100002
 8001780:	ffff0000 	.word	0xffff0000
 8001784:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691a      	ldr	r2, [r3, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017fc:	e0b8      	b.n	8001970 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001804:	2200      	movs	r2, #0
 8001806:	4966      	ldr	r1, [pc, #408]	; (80019a0 <HAL_I2C_Mem_Read+0x448>)
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f001 fd21 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0bf      	b.n	8001998 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001844:	3b01      	subs	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001850:	b29b      	uxth	r3, r3
 8001852:	3b01      	subs	r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001860:	2200      	movs	r2, #0
 8001862:	494f      	ldr	r1, [pc, #316]	; (80019a0 <HAL_I2C_Mem_Read+0x448>)
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f001 fcf3 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e091      	b.n	8001998 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018e8:	e042      	b.n	8001970 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f001 fdf8 	bl	80034e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e04c      	b.n	8001998 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001926:	b29b      	uxth	r3, r3
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b04      	cmp	r3, #4
 800193c:	d118      	bne.n	8001970 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001974:	2b00      	cmp	r3, #0
 8001976:	f47f aec2 	bne.w	80016fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2220      	movs	r2, #32
 800197e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001996:	2302      	movs	r3, #2
  }
}
 8001998:	4618      	mov	r0, r3
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	00010004 	.word	0x00010004

080019a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019cc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	2b10      	cmp	r3, #16
 80019d2:	d003      	beq.n	80019dc <HAL_I2C_EV_IRQHandler+0x38>
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b40      	cmp	r3, #64	; 0x40
 80019d8:	f040 80c1 	bne.w	8001b5e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10d      	bne.n	8001a12 <HAL_I2C_EV_IRQHandler+0x6e>
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80019fc:	d003      	beq.n	8001a06 <HAL_I2C_EV_IRQHandler+0x62>
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001a04:	d101      	bne.n	8001a0a <HAL_I2C_EV_IRQHandler+0x66>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_I2C_EV_IRQHandler+0x68>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	f000 8132 	beq.w	8001c76 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00c      	beq.n	8001a36 <HAL_I2C_EV_IRQHandler+0x92>
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	0a5b      	lsrs	r3, r3, #9
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f001 fde0 	bl	80035ee <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fcd2 	bl	80023d8 <I2C_Master_SB>
 8001a34:	e092      	b.n	8001b5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_I2C_EV_IRQHandler+0xb2>
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	0a5b      	lsrs	r3, r3, #9
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fd48 	bl	80024e4 <I2C_Master_ADD10>
 8001a54:	e082      	b.n	8001b5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	085b      	lsrs	r3, r3, #1
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <HAL_I2C_EV_IRQHandler+0xd2>
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	0a5b      	lsrs	r3, r3, #9
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 fd62 	bl	8002538 <I2C_Master_ADDR>
 8001a74:	e072      	b.n	8001b5c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d03b      	beq.n	8001afa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a90:	f000 80f3 	beq.w	8001c7a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	09db      	lsrs	r3, r3, #7
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00f      	beq.n	8001ac0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d009      	beq.n	8001ac0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d103      	bne.n	8001ac0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f94c 	bl	8001d56 <I2C_MasterTransmit_TXE>
 8001abe:	e04d      	b.n	8001b5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80d6 	beq.w	8001c7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	0a5b      	lsrs	r3, r3, #9
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 80cf 	beq.w	8001c7a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	2b21      	cmp	r3, #33	; 0x21
 8001ae0:	d103      	bne.n	8001aea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f9d3 	bl	8001e8e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ae8:	e0c7      	b.n	8001c7a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	2b40      	cmp	r3, #64	; 0x40
 8001aee:	f040 80c4 	bne.w	8001c7a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fa41 	bl	8001f7a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001af8:	e0bf      	b.n	8001c7a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b08:	f000 80b7 	beq.w	8001c7a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	099b      	lsrs	r3, r3, #6
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00f      	beq.n	8001b38 <HAL_I2C_EV_IRQHandler+0x194>
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	0a9b      	lsrs	r3, r3, #10
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d009      	beq.n	8001b38 <HAL_I2C_EV_IRQHandler+0x194>
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d103      	bne.n	8001b38 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fab6 	bl	80020a2 <I2C_MasterReceive_RXNE>
 8001b36:	e011      	b.n	8001b5c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 809a 	beq.w	8001c7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	0a5b      	lsrs	r3, r3, #9
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8093 	beq.w	8001c7a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 fb55 	bl	8002204 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b5a:	e08e      	b.n	8001c7a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001b5c:	e08d      	b.n	8001c7a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	e007      	b.n	8001b80 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d012      	beq.n	8001bb2 <HAL_I2C_EV_IRQHandler+0x20e>
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	0a5b      	lsrs	r3, r3, #9
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00c      	beq.n	8001bb2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ba8:	69b9      	ldr	r1, [r7, #24]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 ff13 	bl	80029d6 <I2C_Slave_ADDR>
 8001bb0:	e066      	b.n	8001c80 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_I2C_EV_IRQHandler+0x22e>
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	0a5b      	lsrs	r3, r3, #9
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 ff4e 	bl	8002a6c <I2C_Slave_STOPF>
 8001bd0:	e056      	b.n	8001c80 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bd2:	7bbb      	ldrb	r3, [r7, #14]
 8001bd4:	2b21      	cmp	r3, #33	; 0x21
 8001bd6:	d002      	beq.n	8001bde <HAL_I2C_EV_IRQHandler+0x23a>
 8001bd8:	7bbb      	ldrb	r3, [r7, #14]
 8001bda:	2b29      	cmp	r3, #41	; 0x29
 8001bdc:	d125      	bne.n	8001c2a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	09db      	lsrs	r3, r3, #7
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00f      	beq.n	8001c0a <HAL_I2C_EV_IRQHandler+0x266>
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	0a9b      	lsrs	r3, r3, #10
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_I2C_EV_IRQHandler+0x266>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d103      	bne.n	8001c0a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fe29 	bl	800285a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c08:	e039      	b.n	8001c7e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d033      	beq.n	8001c7e <HAL_I2C_EV_IRQHandler+0x2da>
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	0a5b      	lsrs	r3, r3, #9
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d02d      	beq.n	8001c7e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fe56 	bl	80028d4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c28:	e029      	b.n	8001c7e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00f      	beq.n	8001c56 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	0a9b      	lsrs	r3, r3, #10
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d103      	bne.n	8001c56 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fe61 	bl	8002916 <I2C_SlaveReceive_RXNE>
 8001c54:	e014      	b.n	8001c80 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00e      	beq.n	8001c80 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	0a5b      	lsrs	r3, r3, #9
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fe8f 	bl	8002992 <I2C_SlaveReceive_BTF>
 8001c74:	e004      	b.n	8001c80 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001c76:	bf00      	nop
 8001c78:	e002      	b.n	8001c80 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c7a:	bf00      	nop
 8001c7c:	e000      	b.n	8001c80 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c7e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001c80:	3720      	adds	r7, #32
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70fb      	strb	r3, [r7, #3]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d6c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d150      	bne.n	8001e1e <I2C_MasterTransmit_TXE+0xc8>
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	2b21      	cmp	r3, #33	; 0x21
 8001d80:	d14d      	bne.n	8001e1e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d01d      	beq.n	8001dc4 <I2C_MasterTransmit_TXE+0x6e>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	d01a      	beq.n	8001dc4 <I2C_MasterTransmit_TXE+0x6e>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d94:	d016      	beq.n	8001dc4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001da4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2211      	movs	r2, #17
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff62 	bl	8001c86 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dc2:	e060      	b.n	8001e86 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dd2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b40      	cmp	r3, #64	; 0x40
 8001dfc:	d107      	bne.n	8001e0e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ff7d 	bl	8001d06 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e0c:	e03b      	b.n	8001e86 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ff35 	bl	8001c86 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e1c:	e033      	b.n	8001e86 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	2b21      	cmp	r3, #33	; 0x21
 8001e22:	d005      	beq.n	8001e30 <I2C_MasterTransmit_TXE+0xda>
 8001e24:	7bbb      	ldrb	r3, [r7, #14]
 8001e26:	2b40      	cmp	r3, #64	; 0x40
 8001e28:	d12d      	bne.n	8001e86 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	2b22      	cmp	r3, #34	; 0x22
 8001e2e:	d12a      	bne.n	8001e86 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d108      	bne.n	8001e4c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e48:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001e4a:	e01c      	b.n	8001e86 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b40      	cmp	r3, #64	; 0x40
 8001e56:	d103      	bne.n	8001e60 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f88e 	bl	8001f7a <I2C_MemoryTransmit_TXE_BTF>
}
 8001e5e:	e012      	b.n	8001e86 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e84:	e7ff      	b.n	8001e86 <I2C_MasterTransmit_TXE+0x130>
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b21      	cmp	r3, #33	; 0x21
 8001ea6:	d164      	bne.n	8001f72 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d012      	beq.n	8001ed8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	781a      	ldrb	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001ed6:	e04c      	b.n	8001f72 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d01d      	beq.n	8001f1a <I2C_MasterTransmit_BTF+0x8c>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	d01a      	beq.n	8001f1a <I2C_MasterTransmit_BTF+0x8c>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001eea:	d016      	beq.n	8001f1a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001efa:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2211      	movs	r2, #17
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff feb7 	bl	8001c86 <HAL_I2C_MasterTxCpltCallback>
}
 8001f18:	e02b      	b.n	8001f72 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f28:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f38:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b40      	cmp	r3, #64	; 0x40
 8001f52:	d107      	bne.n	8001f64 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff fed2 	bl	8001d06 <HAL_I2C_MemTxCpltCallback>
}
 8001f62:	e006      	b.n	8001f72 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff fe8a 	bl	8001c86 <HAL_I2C_MasterTxCpltCallback>
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f88:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11d      	bne.n	8001fce <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d10b      	bne.n	8001fb2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001faa:	1c9a      	adds	r2, r3, #2
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001fb0:	e073      	b.n	800209a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	121b      	asrs	r3, r3, #8
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fcc:	e065      	b.n	800209a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10b      	bne.n	8001fee <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fec:	e055      	b.n	800209a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d151      	bne.n	800209a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b22      	cmp	r3, #34	; 0x22
 8001ffa:	d10d      	bne.n	8002018 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800200a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002016:	e040      	b.n	800209a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d015      	beq.n	800204e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b21      	cmp	r3, #33	; 0x21
 8002026:	d112      	bne.n	800204e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800204c:	e025      	b.n	800209a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d120      	bne.n	800209a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	2b21      	cmp	r3, #33	; 0x21
 800205c:	d11d      	bne.n	800209a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800206c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800207c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fe36 	bl	8001d06 <HAL_I2C_MemTxCpltCallback>
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b22      	cmp	r3, #34	; 0x22
 80020b4:	f040 80a2 	bne.w	80021fc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d921      	bls.n	800210a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	f040 8082 	bne.w	80021fc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002106:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002108:	e078      	b.n	80021fc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	2b02      	cmp	r3, #2
 8002110:	d074      	beq.n	80021fc <I2C_MasterReceive_RXNE+0x15a>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d002      	beq.n	800211e <I2C_MasterReceive_RXNE+0x7c>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d16e      	bne.n	80021fc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f001 f9ae 	bl	8003480 <I2C_WaitOnSTOPRequestThroughIT>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d142      	bne.n	80021b0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002138:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002148:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b40      	cmp	r3, #64	; 0x40
 8002182:	d10a      	bne.n	800219a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fdc1 	bl	8001d1a <HAL_I2C_MemRxCpltCallback>
}
 8002198:	e030      	b.n	80021fc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2212      	movs	r2, #18
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fd76 	bl	8001c9a <HAL_I2C_MasterRxCpltCallback>
}
 80021ae:	e025      	b.n	80021fc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fd99 	bl	8001d2e <HAL_I2C_ErrorCallback>
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b04      	cmp	r3, #4
 800221a:	d11b      	bne.n	8002254 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002252:	e0bd      	b.n	80023d0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b03      	cmp	r3, #3
 800225c:	d129      	bne.n	80022b2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d00a      	beq.n	800228a <I2C_MasterReceive_BTF+0x86>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d007      	beq.n	800228a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002288:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80022b0:	e08e      	b.n	80023d0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d176      	bne.n	80023aa <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d002      	beq.n	80022c8 <I2C_MasterReceive_BTF+0xc4>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b10      	cmp	r3, #16
 80022c6:	d108      	bne.n	80022da <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	e019      	b.n	800230e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d002      	beq.n	80022e6 <I2C_MasterReceive_BTF+0xe2>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d108      	bne.n	80022f8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e00a      	b.n	800230e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d007      	beq.n	800230e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002368:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b40      	cmp	r3, #64	; 0x40
 800237c:	d10a      	bne.n	8002394 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff fcc4 	bl	8001d1a <HAL_I2C_MemRxCpltCallback>
}
 8002392:	e01d      	b.n	80023d0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2212      	movs	r2, #18
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fc79 	bl	8001c9a <HAL_I2C_MasterRxCpltCallback>
}
 80023a8:	e012      	b.n	80023d0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d117      	bne.n	800241c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002404:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002406:	e067      	b.n	80024d8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	b2da      	uxtb	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	611a      	str	r2, [r3, #16]
}
 800241a:	e05d      	b.n	80024d8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002424:	d133      	bne.n	800248e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b21      	cmp	r3, #33	; 0x21
 8002430:	d109      	bne.n	8002446 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002442:	611a      	str	r2, [r3, #16]
 8002444:	e008      	b.n	8002458 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	b2da      	uxtb	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245c:	2b00      	cmp	r3, #0
 800245e:	d004      	beq.n	800246a <I2C_Master_SB+0x92>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	2b00      	cmp	r3, #0
 8002470:	d032      	beq.n	80024d8 <I2C_Master_SB+0x100>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	2b00      	cmp	r3, #0
 800247a:	d02d      	beq.n	80024d8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248a:	605a      	str	r2, [r3, #4]
}
 800248c:	e024      	b.n	80024d8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10e      	bne.n	80024b4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	b29b      	uxth	r3, r3
 800249c:	11db      	asrs	r3, r3, #7
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f003 0306 	and.w	r3, r3, #6
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f063 030f 	orn	r3, r3, #15
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	611a      	str	r2, [r3, #16]
}
 80024b2:	e011      	b.n	80024d8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d10d      	bne.n	80024d8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	11db      	asrs	r3, r3, #7
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f003 0306 	and.w	r3, r3, #6
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f063 030e 	orn	r3, r3, #14
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	611a      	str	r2, [r3, #16]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <I2C_Master_ADD10+0x26>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d108      	bne.n	800251c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00c      	beq.n	800252c <I2C_Master_ADD10+0x48>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800252a:	605a      	str	r2, [r3, #4]
  }
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002538:	b480      	push	{r7}
 800253a:	b091      	sub	sp, #68	; 0x44
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002546:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b22      	cmp	r3, #34	; 0x22
 8002560:	f040 8169 	bne.w	8002836 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10f      	bne.n	800258c <I2C_Master_ADDR+0x54>
 800256c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d10b      	bne.n	800258c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002574:	2300      	movs	r3, #0
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	e160      	b.n	800284e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11d      	bne.n	80025d0 <I2C_Master_ADDR+0x98>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800259c:	d118      	bne.n	80025d0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259e:	2300      	movs	r3, #0
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	651a      	str	r2, [r3, #80]	; 0x50
 80025ce:	e13e      	b.n	800284e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d113      	bne.n	8002602 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025da:	2300      	movs	r3, #0
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e115      	b.n	800282e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b01      	cmp	r3, #1
 800260a:	f040 808a 	bne.w	8002722 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800260e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002614:	d137      	bne.n	8002686 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002624:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002634:	d113      	bne.n	800265e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002644:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	e0e7      	b.n	800282e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	623b      	str	r3, [r7, #32]
 8002672:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e0d3      	b.n	800282e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002688:	2b08      	cmp	r3, #8
 800268a:	d02e      	beq.n	80026ea <I2C_Master_ADDR+0x1b2>
 800268c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268e:	2b20      	cmp	r3, #32
 8002690:	d02b      	beq.n	80026ea <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002694:	2b12      	cmp	r3, #18
 8002696:	d102      	bne.n	800269e <I2C_Master_ADDR+0x166>
 8002698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269a:	2b01      	cmp	r3, #1
 800269c:	d125      	bne.n	80026ea <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d00e      	beq.n	80026c2 <I2C_Master_ADDR+0x18a>
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d00b      	beq.n	80026c2 <I2C_Master_ADDR+0x18a>
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d008      	beq.n	80026c2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e007      	b.n	80026d2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	e0a1      	b.n	800282e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e085      	b.n	800282e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d14d      	bne.n	80027c8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	2b04      	cmp	r3, #4
 8002730:	d016      	beq.n	8002760 <I2C_Master_ADDR+0x228>
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	2b02      	cmp	r3, #2
 8002736:	d013      	beq.n	8002760 <I2C_Master_ADDR+0x228>
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	2b10      	cmp	r3, #16
 800273c:	d010      	beq.n	8002760 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e007      	b.n	8002770 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800276e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800277a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800277e:	d117      	bne.n	80027b0 <I2C_Master_ADDR+0x278>
 8002780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002782:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002786:	d00b      	beq.n	80027a0 <I2C_Master_ADDR+0x268>
 8002788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278a:	2b01      	cmp	r3, #1
 800278c:	d008      	beq.n	80027a0 <I2C_Master_ADDR+0x268>
 800278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002790:	2b08      	cmp	r3, #8
 8002792:	d005      	beq.n	80027a0 <I2C_Master_ADDR+0x268>
 8002794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002796:	2b10      	cmp	r3, #16
 8002798:	d002      	beq.n	80027a0 <I2C_Master_ADDR+0x268>
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	2b20      	cmp	r3, #32
 800279e:	d107      	bne.n	80027b0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027ae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	e032      	b.n	800282e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027d6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027e6:	d117      	bne.n	8002818 <I2C_Master_ADDR+0x2e0>
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027ee:	d00b      	beq.n	8002808 <I2C_Master_ADDR+0x2d0>
 80027f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d008      	beq.n	8002808 <I2C_Master_ADDR+0x2d0>
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d005      	beq.n	8002808 <I2C_Master_ADDR+0x2d0>
 80027fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d002      	beq.n	8002808 <I2C_Master_ADDR+0x2d0>
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	2b20      	cmp	r3, #32
 8002806:	d107      	bne.n	8002818 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002816:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002834:	e00b      	b.n	800284e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
}
 800284c:	e7ff      	b.n	800284e <I2C_Master_ADDR+0x316>
 800284e:	bf00      	nop
 8002850:	3744      	adds	r7, #68	; 0x44
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d02b      	beq.n	80028cc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d114      	bne.n	80028cc <I2C_SlaveTransmit_TXE+0x72>
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	2b29      	cmp	r3, #41	; 0x29
 80028a6:	d111      	bne.n	80028cc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2221      	movs	r2, #33	; 0x21
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2228      	movs	r2, #40	; 0x28
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff f9f1 	bl	8001cae <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d011      	beq.n	800290a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002924:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02c      	beq.n	800298a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d114      	bne.n	800298a <I2C_SlaveReceive_RXNE+0x74>
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b2a      	cmp	r3, #42	; 0x2a
 8002964:	d111      	bne.n	800298a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002974:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2222      	movs	r2, #34	; 0x22
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2228      	movs	r2, #40	; 0x28
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff f99c 	bl	8001cc2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029f0:	2b28      	cmp	r3, #40	; 0x28
 80029f2:	d127      	bne.n	8002a44 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a02:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	09db      	lsrs	r3, r3, #7
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d103      	bne.n	8002a28 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	81bb      	strh	r3, [r7, #12]
 8002a26:	e002      	b.n	8002a2e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002a36:	89ba      	ldrh	r2, [r7, #12]
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff f94a 	bl	8001cd6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a42:	e00e      	b.n	8002a62 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a8a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac8:	d172      	bne.n	8002bb0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	2b22      	cmp	r3, #34	; 0x22
 8002ace:	d002      	beq.n	8002ad6 <I2C_Slave_STOPF+0x6a>
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ad4:	d135      	bne.n	8002b42 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f043 0204 	orr.w	r2, r3, #4
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe f966 	bl	8000de0 <HAL_DMA_GetState>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d049      	beq.n	8002bae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	4a69      	ldr	r2, [pc, #420]	; (8002cc4 <I2C_Slave_STOPF+0x258>)
 8002b20:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd ffae 	bl	8000a88 <HAL_DMA_Abort_IT>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d03d      	beq.n	8002bae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b40:	e035      	b.n	8002bae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 0204 	orr.w	r2, r3, #4
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b74:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe f930 	bl	8000de0 <HAL_DMA_GetState>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d014      	beq.n	8002bb0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	4a4e      	ldr	r2, [pc, #312]	; (8002cc4 <I2C_Slave_STOPF+0x258>)
 8002b8c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd ff78 	bl	8000a88 <HAL_DMA_Abort_IT>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4798      	blx	r3
 8002bac:	e000      	b.n	8002bb0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d03e      	beq.n	8002c38 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d112      	bne.n	8002bee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d112      	bne.n	8002c22 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f043 0204 	orr.w	r2, r3, #4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f843 	bl	8002ccc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002c46:	e039      	b.n	8002cbc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c4c:	d109      	bne.n	8002c62 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2228      	movs	r2, #40	; 0x28
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff f830 	bl	8001cc2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b28      	cmp	r3, #40	; 0x28
 8002c6c:	d111      	bne.n	8002c92 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <I2C_Slave_STOPF+0x25c>)
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff f831 	bl	8001cf2 <HAL_I2C_ListenCpltCallback>
}
 8002c90:	e014      	b.n	8002cbc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	2b22      	cmp	r3, #34	; 0x22
 8002c98:	d002      	beq.n	8002ca0 <I2C_Slave_STOPF+0x234>
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b22      	cmp	r3, #34	; 0x22
 8002c9e:	d10d      	bne.n	8002cbc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff f803 	bl	8001cc2 <HAL_I2C_SlaveRxCpltCallback>
}
 8002cbc:	bf00      	nop
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	08003101 	.word	0x08003101
 8002cc8:	ffff0000 	.word	0xffff0000

08002ccc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ce4:	7bbb      	ldrb	r3, [r7, #14]
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d002      	beq.n	8002cf0 <I2C_ITError+0x24>
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d10a      	bne.n	8002d06 <I2C_ITError+0x3a>
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2b22      	cmp	r3, #34	; 0x22
 8002cf4:	d107      	bne.n	8002d06 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d0c:	2b28      	cmp	r3, #40	; 0x28
 8002d0e:	d107      	bne.n	8002d20 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2228      	movs	r2, #40	; 0x28
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d1e:	e015      	b.n	8002d4c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d2e:	d00a      	beq.n	8002d46 <I2C_ITError+0x7a>
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b60      	cmp	r3, #96	; 0x60
 8002d34:	d007      	beq.n	8002d46 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d5a:	d162      	bne.n	8002e22 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d020      	beq.n	8002dbc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7e:	4a6a      	ldr	r2, [pc, #424]	; (8002f28 <I2C_ITError+0x25c>)
 8002d80:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fe7e 	bl	8000a88 <HAL_DMA_Abort_IT>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8089 	beq.w	8002ea6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002db6:	4610      	mov	r0, r2
 8002db8:	4798      	blx	r3
 8002dba:	e074      	b.n	8002ea6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	4a59      	ldr	r2, [pc, #356]	; (8002f28 <I2C_ITError+0x25c>)
 8002dc2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fe5d 	bl	8000a88 <HAL_DMA_Abort_IT>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d068      	beq.n	8002ea6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b40      	cmp	r3, #64	; 0x40
 8002de0:	d10b      	bne.n	8002dfa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4798      	blx	r3
 8002e20:	e041      	b.n	8002ea6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b60      	cmp	r3, #96	; 0x60
 8002e2c:	d125      	bne.n	8002e7a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	d10b      	bne.n	8002e62 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fe ff65 	bl	8001d42 <HAL_I2C_AbortCpltCallback>
 8002e78:	e015      	b.n	8002ea6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b40      	cmp	r3, #64	; 0x40
 8002e86:	d10b      	bne.n	8002ea0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7fe ff44 	bl	8001d2e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10e      	bne.n	8002ed4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ee2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d113      	bne.n	8002f20 <I2C_ITError+0x254>
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b28      	cmp	r3, #40	; 0x28
 8002efc:	d110      	bne.n	8002f20 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <I2C_ITError+0x260>)
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe fee9 	bl	8001cf2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	08003101 	.word	0x08003101
 8002f2c:	ffff0000 	.word	0xffff0000

08002f30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	817b      	strh	r3, [r7, #10]
 8002f42:	460b      	mov	r3, r1
 8002f44:	813b      	strh	r3, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f96a 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f90:	d103      	bne.n	8002f9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0aa      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f9e:	897b      	ldrh	r3, [r7, #10]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	6a3a      	ldr	r2, [r7, #32]
 8002fb2:	4952      	ldr	r1, [pc, #328]	; (80030fc <I2C_RequestMemoryRead+0x1cc>)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f9a2 	bl	80032fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e097      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fdc:	6a39      	ldr	r1, [r7, #32]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fa0c 	bl	80033fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00d      	beq.n	8003006 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d107      	bne.n	8003002 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003000:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e076      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800300c:	893b      	ldrh	r3, [r7, #8]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	e021      	b.n	800305c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003018:	893b      	ldrh	r3, [r7, #8]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	b29b      	uxth	r3, r3
 800301e:	b2da      	uxtb	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	6a39      	ldr	r1, [r7, #32]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f9e6 	bl	80033fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b04      	cmp	r3, #4
 800303c:	d107      	bne.n	800304e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e050      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003052:	893b      	ldrh	r3, [r7, #8]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	6a39      	ldr	r1, [r7, #32]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f9cb 	bl	80033fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b04      	cmp	r3, #4
 8003072:	d107      	bne.n	8003084 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003082:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e035      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003096:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	2200      	movs	r2, #0
 80030a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f8d3 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00d      	beq.n	80030cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030be:	d103      	bne.n	80030c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e013      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030cc:	897b      	ldrh	r3, [r7, #10]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	6a3a      	ldr	r2, [r7, #32]
 80030e0:	4906      	ldr	r1, [pc, #24]	; (80030fc <I2C_RequestMemoryRead+0x1cc>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f90b 	bl	80032fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	00010002 	.word	0x00010002

08003100 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800311a:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <I2C_DMAAbort+0x148>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	08db      	lsrs	r3, r3, #3
 8003120:	4a4a      	ldr	r2, [pc, #296]	; (800324c <I2C_DMAAbort+0x14c>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	0a1a      	lsrs	r2, r3, #8
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00da      	lsls	r2, r3, #3
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f043 0220 	orr.w	r2, r3, #32
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003146:	e00a      	b.n	800315e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3b01      	subs	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315c:	d0ea      	beq.n	8003134 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	2200      	movs	r2, #0
 800316c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	2200      	movs	r2, #0
 800317c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a0:	2200      	movs	r2, #0
 80031a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	2200      	movs	r2, #0
 80031b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b60      	cmp	r3, #96	; 0x60
 80031ce:	d10e      	bne.n	80031ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2200      	movs	r2, #0
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80031e6:	6978      	ldr	r0, [r7, #20]
 80031e8:	f7fe fdab 	bl	8001d42 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031ec:	e027      	b.n	800323e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031ee:	7cfb      	ldrb	r3, [r7, #19]
 80031f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031f4:	2b28      	cmp	r3, #40	; 0x28
 80031f6:	d117      	bne.n	8003228 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003216:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2228      	movs	r2, #40	; 0x28
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003226:	e007      	b.n	8003238 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003238:	6978      	ldr	r0, [r7, #20]
 800323a:	f7fe fd78 	bl	8001d2e <HAL_I2C_ErrorCallback>
}
 800323e:	bf00      	nop
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000118 	.word	0x20000118
 800324c:	14f8b589 	.word	0x14f8b589

08003250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003260:	e025      	b.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d021      	beq.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7fd fa1d 	bl	80006a8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d116      	bne.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f043 0220 	orr.w	r2, r3, #32
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e023      	b.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	0c1b      	lsrs	r3, r3, #16
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d10d      	bne.n	80032d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	43da      	mvns	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4013      	ands	r3, r2
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bf0c      	ite	eq
 80032ca:	2301      	moveq	r3, #1
 80032cc:	2300      	movne	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	e00c      	b.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	43da      	mvns	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4013      	ands	r3, r2
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bf0c      	ite	eq
 80032e6:	2301      	moveq	r3, #1
 80032e8:	2300      	movne	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d0b6      	beq.n	8003262 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800330c:	e051      	b.n	80033b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331c:	d123      	bne.n	8003366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003336:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f043 0204 	orr.w	r2, r3, #4
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e046      	b.n	80033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d021      	beq.n	80033b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336e:	f7fd f99b 	bl	80006a8 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	429a      	cmp	r2, r3
 800337c:	d302      	bcc.n	8003384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d116      	bne.n	80033b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f043 0220 	orr.w	r2, r3, #32
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e020      	b.n	80033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d10c      	bne.n	80033d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	43da      	mvns	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4013      	ands	r3, r2
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf14      	ite	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	2300      	moveq	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	e00b      	b.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	43da      	mvns	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	4013      	ands	r3, r2
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf14      	ite	ne
 80033e8:	2301      	movne	r3, #1
 80033ea:	2300      	moveq	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d18d      	bne.n	800330e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003408:	e02d      	b.n	8003466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f8c0 	bl	8003590 <I2C_IsAcknowledgeFailed>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e02d      	b.n	8003476 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d021      	beq.n	8003466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003422:	f7fd f941 	bl	80006a8 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	d302      	bcc.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d116      	bne.n	8003466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f043 0220 	orr.w	r2, r3, #32
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e007      	b.n	8003476 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b80      	cmp	r3, #128	; 0x80
 8003472:	d1ca      	bne.n	800340a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800348c:	4b13      	ldr	r3, [pc, #76]	; (80034dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	08db      	lsrs	r3, r3, #3
 8003492:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	0a1a      	lsrs	r2, r3, #8
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d107      	bne.n	80034be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f043 0220 	orr.w	r2, r3, #32
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e008      	b.n	80034d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034cc:	d0e9      	beq.n	80034a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	20000118 	.word	0x20000118
 80034e0:	14f8b589 	.word	0x14f8b589

080034e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034f0:	e042      	b.n	8003578 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d119      	bne.n	8003534 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0210 	mvn.w	r2, #16
 8003508:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e029      	b.n	8003588 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003534:	f7fd f8b8 	bl	80006a8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	429a      	cmp	r2, r3
 8003542:	d302      	bcc.n	800354a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d116      	bne.n	8003578 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f043 0220 	orr.w	r2, r3, #32
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e007      	b.n	8003588 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003582:	2b40      	cmp	r3, #64	; 0x40
 8003584:	d1b5      	bne.n	80034f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a6:	d11b      	bne.n	80035e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f043 0204 	orr.w	r2, r3, #4
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80035fe:	d103      	bne.n	8003608 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003606:	e007      	b.n	8003618 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003610:	d102      	bne.n	8003618 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2208      	movs	r2, #8
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003626:	b08f      	sub	sp, #60	; 0x3c
 8003628:	af0a      	add	r7, sp, #40	; 0x28
 800362a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e10f      	b.n	8003856 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f007 f955 	bl	800a900 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2203      	movs	r2, #3
 800365a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f003 fd0e 	bl	8007096 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	687e      	ldr	r6, [r7, #4]
 8003682:	466d      	mov	r5, sp
 8003684:	f106 0410 	add.w	r4, r6, #16
 8003688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800368a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800368c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800368e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003690:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003694:	e885 0003 	stmia.w	r5, {r0, r1}
 8003698:	1d33      	adds	r3, r6, #4
 800369a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800369c:	6838      	ldr	r0, [r7, #0]
 800369e:	f003 fbe5 	bl	8006e6c <USB_CoreInit>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0d0      	b.n	8003856 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f003 fcfc 	bl	80070b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]
 80036c4:	e04a      	b.n	800375c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036c6:	7bfa      	ldrb	r2, [r7, #15]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	333d      	adds	r3, #61	; 0x3d
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	333c      	adds	r3, #60	; 0x3c
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	b298      	uxth	r0, r3
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3342      	adds	r3, #66	; 0x42
 8003702:	4602      	mov	r2, r0
 8003704:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	333f      	adds	r3, #63	; 0x3f
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3344      	adds	r3, #68	; 0x44
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	3348      	adds	r3, #72	; 0x48
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	3350      	adds	r3, #80	; 0x50
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	3301      	adds	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	7bfa      	ldrb	r2, [r7, #15]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d3af      	bcc.n	80036c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]
 800376a:	e044      	b.n	80037f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037ae:	7bfa      	ldrb	r2, [r7, #15]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	3301      	adds	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d3b5      	bcc.n	800376c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	687e      	ldr	r6, [r7, #4]
 8003808:	466d      	mov	r5, sp
 800380a:	f106 0410 	add.w	r4, r6, #16
 800380e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003816:	e894 0003 	ldmia.w	r4, {r0, r1}
 800381a:	e885 0003 	stmia.w	r5, {r0, r1}
 800381e:	1d33      	adds	r3, r6, #4
 8003820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003822:	6838      	ldr	r0, [r7, #0]
 8003824:	f003 fc94 	bl	8007150 <USB_DevInit>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e00d      	b.n	8003856 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f004 fd10 	bl	8008274 <USB_DevDisconnect>

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800385e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_PCD_Start+0x1c>
 8003876:	2302      	movs	r3, #2
 8003878:	e020      	b.n	80038bc <HAL_PCD_Start+0x5e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	2b01      	cmp	r3, #1
 8003888:	d109      	bne.n	800389e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800388e:	2b01      	cmp	r3, #1
 8003890:	d005      	beq.n	800389e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f003 fbe6 	bl	8007074 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f004 fcc0 	bl	8008232 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b08d      	sub	sp, #52	; 0x34
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f004 fd7e 	bl	80083dc <USB_GetMode>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f040 839d 	bne.w	8004022 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f004 fce2 	bl	80082b6 <USB_ReadInterrupts>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8393 	beq.w	8004020 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f004 fcd9 	bl	80082b6 <USB_ReadInterrupts>
 8003904:	4603      	mov	r3, r0
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b02      	cmp	r3, #2
 800390c:	d107      	bne.n	800391e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f002 0202 	and.w	r2, r2, #2
 800391c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f004 fcc7 	bl	80082b6 <USB_ReadInterrupts>
 8003928:	4603      	mov	r3, r0
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b10      	cmp	r3, #16
 8003930:	d161      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699a      	ldr	r2, [r3, #24]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0210 	bic.w	r2, r2, #16
 8003940:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f003 020f 	and.w	r2, r3, #15
 800394e:	4613      	mov	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	3304      	adds	r3, #4
 8003960:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	0c5b      	lsrs	r3, r3, #17
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	2b02      	cmp	r3, #2
 800396c:	d124      	bne.n	80039b8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d035      	beq.n	80039e6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003988:	b29b      	uxth	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	6a38      	ldr	r0, [r7, #32]
 800398e:	f004 fafe 	bl	8007f8e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800399e:	441a      	add	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b0:	441a      	add	r2, r3
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	619a      	str	r2, [r3, #24]
 80039b6:	e016      	b.n	80039e6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	0c5b      	lsrs	r3, r3, #17
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	2b06      	cmp	r3, #6
 80039c2:	d110      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039ca:	2208      	movs	r2, #8
 80039cc:	4619      	mov	r1, r3
 80039ce:	6a38      	ldr	r0, [r7, #32]
 80039d0:	f004 fadd 	bl	8007f8e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	699a      	ldr	r2, [r3, #24]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e0:	441a      	add	r2, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699a      	ldr	r2, [r3, #24]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0210 	orr.w	r2, r2, #16
 80039f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 fc5b 	bl	80082b6 <USB_ReadInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a0a:	d16e      	bne.n	8003aea <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 fc61 	bl	80082dc <USB_ReadDevAllOutEpInterrupt>
 8003a1a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a1c:	e062      	b.n	8003ae4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d057      	beq.n	8003ad8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 fc86 	bl	8008344 <USB_ReadDevOutEPInterrupt>
 8003a38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00c      	beq.n	8003a5e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a50:	461a      	mov	r2, r3
 8003a52:	2301      	movs	r3, #1
 8003a54:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fdb1 	bl	80045c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00c      	beq.n	8003a82 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	461a      	mov	r2, r3
 8003a76:	2308      	movs	r3, #8
 8003a78:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 feab 	bl	80047d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2310      	movs	r3, #16
 8003a9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d009      	beq.n	8003ad8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ad6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	3301      	adds	r3, #1
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d199      	bne.n	8003a1e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f004 fbe1 	bl	80082b6 <USB_ReadInterrupts>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003afe:	f040 80c0 	bne.w	8003c82 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f004 fc02 	bl	8008310 <USB_ReadDevAllInEpInterrupt>
 8003b0c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b12:	e0b2      	b.n	8003c7a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80a7 	beq.w	8003c6e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f004 fc28 	bl	8008380 <USB_ReadDevInEPInterrupt>
 8003b30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d057      	beq.n	8003bec <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	2201      	movs	r2, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69f9      	ldr	r1, [r7, #28]
 8003b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2301      	movs	r3, #1
 8003b70:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d132      	bne.n	8003be0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	3348      	adds	r3, #72	; 0x48
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4403      	add	r3, r0
 8003b9a:	3344      	adds	r3, #68	; 0x44
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4419      	add	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4403      	add	r3, r0
 8003bae:	3348      	adds	r3, #72	; 0x48
 8003bb0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d113      	bne.n	8003be0 <HAL_PCD_IRQHandler+0x31c>
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3350      	adds	r3, #80	; 0x50
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d108      	bne.n	8003be0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bd8:	461a      	mov	r2, r3
 8003bda:	2101      	movs	r1, #1
 8003bdc:	f004 fc30 	bl	8008440 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	4619      	mov	r1, r3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f006 ff19 	bl	800aa1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c02:	461a      	mov	r2, r3
 8003c04:	2308      	movs	r3, #8
 8003c06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1e:	461a      	mov	r2, r3
 8003c20:	2310      	movs	r3, #16
 8003c22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2340      	movs	r3, #64	; 0x40
 8003c3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c56:	461a      	mov	r2, r3
 8003c58:	2302      	movs	r3, #2
 8003c5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fc1b 	bl	80044a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	3301      	adds	r3, #1
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f47f af49 	bne.w	8003b14 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f004 fb15 	bl	80082b6 <USB_ReadInterrupts>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c96:	d122      	bne.n	8003cde <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d108      	bne.n	8003cc8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fe27 	bl	8004914 <HAL_PCDEx_LPM_Callback>
 8003cc6:	e002      	b.n	8003cce <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f006 ff15 	bl	800aaf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f004 fae7 	bl	80082b6 <USB_ReadInterrupts>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf2:	d112      	bne.n	8003d1a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f006 fed1 	bl	800aaac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d18:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f004 fac9 	bl	80082b6 <USB_ReadInterrupts>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2e:	f040 80c7 	bne.w	8003ec0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2110      	movs	r1, #16
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f003 fb63 	bl	8007418 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d56:	e056      	b.n	8003e06 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d64:	461a      	mov	r2, r3
 8003d66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d6a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d7c:	0151      	lsls	r1, r2, #5
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	440a      	add	r2, r1
 8003d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d8a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d9c:	0151      	lsls	r1, r2, #5
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	440a      	add	r2, r1
 8003da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003daa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db8:	461a      	mov	r2, r3
 8003dba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dbe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd0:	0151      	lsls	r1, r2, #5
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	440a      	add	r2, r1
 8003dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dde:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df0:	0151      	lsls	r1, r2, #5
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	440a      	add	r2, r1
 8003df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dfe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	3301      	adds	r3, #1
 8003e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d3a3      	bcc.n	8003d58 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e1e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d016      	beq.n	8003e5a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e3c:	f043 030b 	orr.w	r3, r3, #11
 8003e40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e52:	f043 030b 	orr.w	r3, r3, #11
 8003e56:	6453      	str	r3, [r2, #68]	; 0x44
 8003e58:	e015      	b.n	8003e86 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e6c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003e70:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e80:	f043 030b 	orr.w	r3, r3, #11
 8003e84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f004 fac8 	bl	8008440 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f004 f9f6 	bl	80082b6 <USB_ReadInterrupts>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed4:	d124      	bne.n	8003f20 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f004 fa8c 	bl	80083f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f003 faf4 	bl	80074d2 <USB_GetDevSpeed>
 8003eea:	4603      	mov	r3, r0
 8003eec:	461a      	mov	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681c      	ldr	r4, [r3, #0]
 8003ef6:	f001 f937 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 8003efa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	4620      	mov	r0, r4
 8003f06:	f003 f813 	bl	8006f30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f006 fdaf 	bl	800aa6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f004 f9c6 	bl	80082b6 <USB_ReadInterrupts>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d10a      	bne.n	8003f4a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f006 fd8c 	bl	800aa52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f002 0208 	and.w	r2, r2, #8
 8003f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f004 f9b1 	bl	80082b6 <USB_ReadInterrupts>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f5e:	d10f      	bne.n	8003f80 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f006 fde4 	bl	800ab38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f004 f996 	bl	80082b6 <USB_ReadInterrupts>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f94:	d10f      	bne.n	8003fb6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f006 fdb7 	bl	800ab14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 f97b 	bl	80082b6 <USB_ReadInterrupts>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fca:	d10a      	bne.n	8003fe2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f006 fdc5 	bl	800ab5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f004 f965 	bl	80082b6 <USB_ReadInterrupts>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d115      	bne.n	8004022 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f006 fdb5 	bl	800ab78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	e000      	b.n	8004022 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004020:	bf00      	nop
    }
  }
}
 8004022:	3734      	adds	r7, #52	; 0x34
 8004024:	46bd      	mov	sp, r7
 8004026:	bd90      	pop	{r4, r7, pc}

08004028 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_PCD_SetAddress+0x1a>
 800403e:	2302      	movs	r3, #2
 8004040:	e013      	b.n	800406a <HAL_PCD_SetAddress+0x42>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	4611      	mov	r1, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f004 f8c3 	bl	80081e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	4608      	mov	r0, r1
 800407c:	4611      	mov	r1, r2
 800407e:	461a      	mov	r2, r3
 8004080:	4603      	mov	r3, r0
 8004082:	70fb      	strb	r3, [r7, #3]
 8004084:	460b      	mov	r3, r1
 8004086:	803b      	strh	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004094:	2b00      	cmp	r3, #0
 8004096:	da0f      	bge.n	80040b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	f003 020f 	and.w	r2, r3, #15
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	3338      	adds	r3, #56	; 0x38
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	3304      	adds	r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	705a      	strb	r2, [r3, #1]
 80040b6:	e00f      	b.n	80040d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 020f 	and.w	r2, r3, #15
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	3304      	adds	r3, #4
 80040d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040e4:	883a      	ldrh	r2, [r7, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	78ba      	ldrb	r2, [r7, #2]
 80040ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	785b      	ldrb	r3, [r3, #1]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d004      	beq.n	8004102 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004102:	78bb      	ldrb	r3, [r7, #2]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d102      	bne.n	800410e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_PCD_EP_Open+0xaa>
 8004118:	2302      	movs	r3, #2
 800411a:	e00e      	b.n	800413a <HAL_PCD_EP_Open+0xc8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68f9      	ldr	r1, [r7, #12]
 800412a:	4618      	mov	r0, r3
 800412c:	f003 f9f6 	bl	800751c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004138:	7afb      	ldrb	r3, [r7, #11]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	460b      	mov	r3, r1
 800414c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800414e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004152:	2b00      	cmp	r3, #0
 8004154:	da0f      	bge.n	8004176 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	f003 020f 	and.w	r2, r3, #15
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	3338      	adds	r3, #56	; 0x38
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	4413      	add	r3, r2
 800416a:	3304      	adds	r3, #4
 800416c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	705a      	strb	r2, [r3, #1]
 8004174:	e00f      	b.n	8004196 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	f003 020f 	and.w	r2, r3, #15
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4413      	add	r3, r2
 800418c:	3304      	adds	r3, #4
 800418e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	b2da      	uxtb	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_PCD_EP_Close+0x6e>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e00e      	b.n	80041ce <HAL_PCD_EP_Close+0x8c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68f9      	ldr	r1, [r7, #12]
 80041be:	4618      	mov	r0, r3
 80041c0:	f003 fa34 	bl	800762c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	460b      	mov	r3, r1
 80041e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e6:	7afb      	ldrb	r3, [r7, #11]
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	3304      	adds	r3, #4
 80041fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2200      	movs	r2, #0
 8004210:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2200      	movs	r2, #0
 8004216:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004218:	7afb      	ldrb	r3, [r7, #11]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	b2da      	uxtb	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d102      	bne.n	8004232 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004232:	7afb      	ldrb	r3, [r7, #11]
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	6979      	ldr	r1, [r7, #20]
 800424a:	f003 fd0f 	bl	8007c6c <USB_EP0StartXfer>
 800424e:	e008      	b.n	8004262 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	6979      	ldr	r1, [r7, #20]
 800425e:	f003 fac1 	bl	80077e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 020f 	and.w	r2, r3, #15
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	460b      	mov	r3, r1
 80042aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ac:	7afb      	ldrb	r3, [r7, #11]
 80042ae:	f003 020f 	and.w	r2, r3, #15
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	3338      	adds	r3, #56	; 0x38
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	3304      	adds	r3, #4
 80042c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2200      	movs	r2, #0
 80042d4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2201      	movs	r2, #1
 80042da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042dc:	7afb      	ldrb	r3, [r7, #11]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d102      	bne.n	80042f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042f6:	7afb      	ldrb	r3, [r7, #11]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	6979      	ldr	r1, [r7, #20]
 800430e:	f003 fcad 	bl	8007c6c <USB_EP0StartXfer>
 8004312:	e008      	b.n	8004326 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	6979      	ldr	r1, [r7, #20]
 8004322:	f003 fa5f 	bl	80077e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d901      	bls.n	800434e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e050      	b.n	80043f0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800434e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004352:	2b00      	cmp	r3, #0
 8004354:	da0f      	bge.n	8004376 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	f003 020f 	and.w	r2, r3, #15
 800435c:	4613      	mov	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	3338      	adds	r3, #56	; 0x38
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	3304      	adds	r3, #4
 800436c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	705a      	strb	r2, [r3, #1]
 8004374:	e00d      	b.n	8004392 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004376:	78fa      	ldrb	r2, [r7, #3]
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	4413      	add	r3, r2
 8004388:	3304      	adds	r3, #4
 800438a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_PCD_EP_SetStall+0x82>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e01e      	b.n	80043f0 <HAL_PCD_EP_SetStall+0xc0>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68f9      	ldr	r1, [r7, #12]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f003 fe3c 	bl	800803e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	b2d9      	uxtb	r1, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043e0:	461a      	mov	r2, r3
 80043e2:	f004 f82d 	bl	8008440 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	f003 020f 	and.w	r2, r3, #15
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	429a      	cmp	r2, r3
 8004410:	d901      	bls.n	8004416 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e042      	b.n	800449c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800441a:	2b00      	cmp	r3, #0
 800441c:	da0f      	bge.n	800443e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	f003 020f 	and.w	r2, r3, #15
 8004424:	4613      	mov	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	3338      	adds	r3, #56	; 0x38
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	3304      	adds	r3, #4
 8004434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	705a      	strb	r2, [r3, #1]
 800443c:	e00f      	b.n	800445e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	4413      	add	r3, r2
 8004454:	3304      	adds	r3, #4
 8004456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_PCD_EP_ClrStall+0x86>
 800447a:	2302      	movs	r3, #2
 800447c:	e00e      	b.n	800449c <HAL_PCD_EP_ClrStall+0xa4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68f9      	ldr	r1, [r7, #12]
 800448c:	4618      	mov	r0, r3
 800448e:	f003 fe44 	bl	800811a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	3338      	adds	r3, #56	; 0x38
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4413      	add	r3, r2
 80044c8:	3304      	adds	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	699a      	ldr	r2, [r3, #24]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d901      	bls.n	80044dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e06c      	b.n	80045b6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	695a      	ldr	r2, [r3, #20]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d902      	bls.n	80044f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	3303      	adds	r3, #3
 80044fc:	089b      	lsrs	r3, r3, #2
 80044fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004500:	e02b      	b.n	800455a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	429a      	cmp	r2, r3
 8004516:	d902      	bls.n	800451e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3303      	adds	r3, #3
 8004522:	089b      	lsrs	r3, r3, #2
 8004524:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	68d9      	ldr	r1, [r3, #12]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004536:	b2db      	uxtb	r3, r3
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	4603      	mov	r3, r0
 800453c:	6978      	ldr	r0, [r7, #20]
 800453e:	f003 fce8 	bl	8007f12 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	441a      	add	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	441a      	add	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	b29b      	uxth	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	429a      	cmp	r2, r3
 800456e:	d809      	bhi.n	8004584 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	699a      	ldr	r2, [r3, #24]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004578:	429a      	cmp	r2, r3
 800457a:	d203      	bcs.n	8004584 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1be      	bne.n	8004502 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	429a      	cmp	r2, r3
 800458e:	d811      	bhi.n	80045b4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	2201      	movs	r2, #1
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	6939      	ldr	r1, [r7, #16]
 80045ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045b0:	4013      	ands	r3, r2
 80045b2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3720      	adds	r7, #32
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	333c      	adds	r3, #60	; 0x3c
 80045d8:	3304      	adds	r3, #4
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	f040 80a0 	bne.w	8004738 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d015      	beq.n	800462e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a72      	ldr	r2, [pc, #456]	; (80047d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004606:	4293      	cmp	r3, r2
 8004608:	f240 80dd 	bls.w	80047c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80d7 	beq.w	80047c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004624:	461a      	mov	r2, r3
 8004626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462a:	6093      	str	r3, [r2, #8]
 800462c:	e0cb      	b.n	80047c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d009      	beq.n	800464c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004644:	461a      	mov	r2, r3
 8004646:	2320      	movs	r3, #32
 8004648:	6093      	str	r3, [r2, #8]
 800464a:	e0bc      	b.n	80047c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004652:	2b00      	cmp	r3, #0
 8004654:	f040 80b7 	bne.w	80047c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a5d      	ldr	r2, [pc, #372]	; (80047d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d90f      	bls.n	8004680 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004676:	461a      	mov	r2, r3
 8004678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467c:	6093      	str	r3, [r2, #8]
 800467e:	e0a2      	b.n	80047c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004692:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	0159      	lsls	r1, r3, #5
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	440b      	add	r3, r1
 800469c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80046a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4403      	add	r3, r0
 80046b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80046ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4403      	add	r3, r0
 80046de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4419      	add	r1, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4403      	add	r3, r0
 80046f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d114      	bne.n	800472a <PCD_EP_OutXfrComplete_int+0x16a>
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d108      	bne.n	800472a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004722:	461a      	mov	r2, r3
 8004724:	2101      	movs	r1, #1
 8004726:	f003 fe8b 	bl	8008440 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f006 f959 	bl	800a9e8 <HAL_PCD_DataOutStageCallback>
 8004736:	e046      	b.n	80047c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a26      	ldr	r2, [pc, #152]	; (80047d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d124      	bne.n	800478a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004756:	461a      	mov	r2, r3
 8004758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475c:	6093      	str	r3, [r2, #8]
 800475e:	e032      	b.n	80047c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004776:	461a      	mov	r2, r3
 8004778:	2320      	movs	r3, #32
 800477a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	b2db      	uxtb	r3, r3
 8004780:	4619      	mov	r1, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f006 f930 	bl	800a9e8 <HAL_PCD_DataOutStageCallback>
 8004788:	e01d      	b.n	80047c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d114      	bne.n	80047ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d108      	bne.n	80047ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047b2:	461a      	mov	r2, r3
 80047b4:	2100      	movs	r1, #0
 80047b6:	f003 fe43 	bl	8008440 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	4619      	mov	r1, r3
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f006 f911 	bl	800a9e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	4f54300a 	.word	0x4f54300a
 80047d4:	4f54310a 	.word	0x4f54310a

080047d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	333c      	adds	r3, #60	; 0x3c
 80047f0:	3304      	adds	r3, #4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4a15      	ldr	r2, [pc, #84]	; (8004860 <PCD_EP_OutSetupPacket_int+0x88>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d90e      	bls.n	800482c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004814:	2b00      	cmp	r3, #0
 8004816:	d009      	beq.n	800482c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004824:	461a      	mov	r2, r3
 8004826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800482a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f006 f8c9 	bl	800a9c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4a0a      	ldr	r2, [pc, #40]	; (8004860 <PCD_EP_OutSetupPacket_int+0x88>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d90c      	bls.n	8004854 <PCD_EP_OutSetupPacket_int+0x7c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d108      	bne.n	8004854 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800484c:	461a      	mov	r2, r3
 800484e:	2101      	movs	r1, #1
 8004850:	f003 fdf6 	bl	8008440 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	4f54300a 	.word	0x4f54300a

08004864 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
 8004870:	4613      	mov	r3, r2
 8004872:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d107      	bne.n	8004892 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004882:	883b      	ldrh	r3, [r7, #0]
 8004884:	0419      	lsls	r1, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	430a      	orrs	r2, r1
 800488e:	629a      	str	r2, [r3, #40]	; 0x28
 8004890:	e028      	b.n	80048e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	4413      	add	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048a0:	2300      	movs	r3, #0
 80048a2:	73fb      	strb	r3, [r7, #15]
 80048a4:	e00d      	b.n	80048c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	3340      	adds	r3, #64	; 0x40
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	0c1b      	lsrs	r3, r3, #16
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	4413      	add	r3, r2
 80048ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	3301      	adds	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
 80048c2:	7bfa      	ldrb	r2, [r7, #15]
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d3ec      	bcc.n	80048a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048cc:	883b      	ldrh	r3, [r7, #0]
 80048ce:	0418      	lsls	r0, r3, #16
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	4302      	orrs	r2, r0
 80048dc:	3340      	adds	r3, #64	; 0x40
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	887a      	ldrh	r2, [r7, #2]
 8004904:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e262      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d075      	beq.n	8004a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800494a:	4ba3      	ldr	r3, [pc, #652]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 030c 	and.w	r3, r3, #12
 8004952:	2b04      	cmp	r3, #4
 8004954:	d00c      	beq.n	8004970 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004956:	4ba0      	ldr	r3, [pc, #640]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800495e:	2b08      	cmp	r3, #8
 8004960:	d112      	bne.n	8004988 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004962:	4b9d      	ldr	r3, [pc, #628]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800496e:	d10b      	bne.n	8004988 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004970:	4b99      	ldr	r3, [pc, #612]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d05b      	beq.n	8004a34 <HAL_RCC_OscConfig+0x108>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d157      	bne.n	8004a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e23d      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004990:	d106      	bne.n	80049a0 <HAL_RCC_OscConfig+0x74>
 8004992:	4b91      	ldr	r3, [pc, #580]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a90      	ldr	r2, [pc, #576]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e01d      	b.n	80049dc <HAL_RCC_OscConfig+0xb0>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x98>
 80049aa:	4b8b      	ldr	r3, [pc, #556]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a8a      	ldr	r2, [pc, #552]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	4b88      	ldr	r3, [pc, #544]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a87      	ldr	r2, [pc, #540]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0xb0>
 80049c4:	4b84      	ldr	r3, [pc, #528]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a83      	ldr	r2, [pc, #524]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b81      	ldr	r3, [pc, #516]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a80      	ldr	r2, [pc, #512]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 80049d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d013      	beq.n	8004a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e4:	f7fb fe60 	bl	80006a8 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ec:	f7fb fe5c 	bl	80006a8 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	; 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e202      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fe:	4b76      	ldr	r3, [pc, #472]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0xc0>
 8004a0a:	e014      	b.n	8004a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0c:	f7fb fe4c 	bl	80006a8 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fb fe48 	bl	80006a8 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	; 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e1ee      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a26:	4b6c      	ldr	r3, [pc, #432]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0xe8>
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d063      	beq.n	8004b0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a42:	4b65      	ldr	r3, [pc, #404]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a4e:	4b62      	ldr	r3, [pc, #392]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d11c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a5a:	4b5f      	ldr	r3, [pc, #380]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d116      	bne.n	8004a94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a66:	4b5c      	ldr	r3, [pc, #368]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_RCC_OscConfig+0x152>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d001      	beq.n	8004a7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e1c2      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7e:	4b56      	ldr	r3, [pc, #344]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4952      	ldr	r1, [pc, #328]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a92:	e03a      	b.n	8004b0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a9c:	4b4f      	ldr	r3, [pc, #316]	; (8004bdc <HAL_RCC_OscConfig+0x2b0>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa2:	f7fb fe01 	bl	80006a8 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aaa:	f7fb fdfd 	bl	80006a8 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e1a3      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abc:	4b46      	ldr	r3, [pc, #280]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac8:	4b43      	ldr	r3, [pc, #268]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4940      	ldr	r1, [pc, #256]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	600b      	str	r3, [r1, #0]
 8004adc:	e015      	b.n	8004b0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ade:	4b3f      	ldr	r3, [pc, #252]	; (8004bdc <HAL_RCC_OscConfig+0x2b0>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fb fde0 	bl	80006a8 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aec:	f7fb fddc 	bl	80006a8 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e182      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afe:	4b36      	ldr	r3, [pc, #216]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d030      	beq.n	8004b78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b1e:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <HAL_RCC_OscConfig+0x2b4>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b24:	f7fb fdc0 	bl	80006a8 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b2c:	f7fb fdbc 	bl	80006a8 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e162      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3e:	4b26      	ldr	r3, [pc, #152]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x200>
 8004b4a:	e015      	b.n	8004b78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b4c:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <HAL_RCC_OscConfig+0x2b4>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b52:	f7fb fda9 	bl	80006a8 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b5a:	f7fb fda5 	bl	80006a8 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e14b      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b6c:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f0      	bne.n	8004b5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 809e 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x396>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b86:	2300      	movs	r3, #0
 8004b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8a:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10f      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	4a0e      	ldr	r2, [pc, #56]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_OscConfig+0x2b8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d121      	bne.n	8004c06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <HAL_RCC_OscConfig+0x2b8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a07      	ldr	r2, [pc, #28]	; (8004be4 <HAL_RCC_OscConfig+0x2b8>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bce:	f7fb fd6b 	bl	80006a8 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd4:	e011      	b.n	8004bfa <HAL_RCC_OscConfig+0x2ce>
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	42470000 	.word	0x42470000
 8004be0:	42470e80 	.word	0x42470e80
 8004be4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be8:	f7fb fd5e 	bl	80006a8 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e104      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfa:	4b84      	ldr	r3, [pc, #528]	; (8004e0c <HAL_RCC_OscConfig+0x4e0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d106      	bne.n	8004c1c <HAL_RCC_OscConfig+0x2f0>
 8004c0e:	4b80      	ldr	r3, [pc, #512]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	4a7f      	ldr	r2, [pc, #508]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1a:	e01c      	b.n	8004c56 <HAL_RCC_OscConfig+0x32a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b05      	cmp	r3, #5
 8004c22:	d10c      	bne.n	8004c3e <HAL_RCC_OscConfig+0x312>
 8004c24:	4b7a      	ldr	r3, [pc, #488]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	4a79      	ldr	r2, [pc, #484]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004c2a:	f043 0304 	orr.w	r3, r3, #4
 8004c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c30:	4b77      	ldr	r3, [pc, #476]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	4a76      	ldr	r2, [pc, #472]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004c36:	f043 0301 	orr.w	r3, r3, #1
 8004c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c3c:	e00b      	b.n	8004c56 <HAL_RCC_OscConfig+0x32a>
 8004c3e:	4b74      	ldr	r3, [pc, #464]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	4a73      	ldr	r2, [pc, #460]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4a:	4b71      	ldr	r3, [pc, #452]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	4a70      	ldr	r2, [pc, #448]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004c50:	f023 0304 	bic.w	r3, r3, #4
 8004c54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d014      	beq.n	8004c88 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5e:	f7fb fd23 	bl	80006a8 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c64:	e009      	b.n	8004c7a <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c66:	f7fb fd1f 	bl	80006a8 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e0c4      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7a:	4b65      	ldr	r3, [pc, #404]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0ef      	beq.n	8004c66 <HAL_RCC_OscConfig+0x33a>
 8004c86:	e013      	b.n	8004cb0 <HAL_RCC_OscConfig+0x384>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c88:	f7fb fd0e 	bl	80006a8 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8e:	e009      	b.n	8004ca4 <HAL_RCC_OscConfig+0x378>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c90:	f7fb fd0a 	bl	80006a8 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x378>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e0af      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca4:	4b5a      	ldr	r3, [pc, #360]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1ef      	bne.n	8004c90 <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb6:	4b56      	ldr	r3, [pc, #344]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	4a55      	ldr	r2, [pc, #340]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 809b 	beq.w	8004e02 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ccc:	4b50      	ldr	r3, [pc, #320]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d05c      	beq.n	8004d92 <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d141      	bne.n	8004d64 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce0:	4b4c      	ldr	r3, [pc, #304]	; (8004e14 <HAL_RCC_OscConfig+0x4e8>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce6:	f7fb fcdf 	bl	80006a8 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cee:	f7fb fcdb 	bl	80006a8 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e081      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d00:	4b43      	ldr	r3, [pc, #268]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCC_OscConfig+0x3c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	019b      	lsls	r3, r3, #6
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	3b01      	subs	r3, #1
 8004d26:	041b      	lsls	r3, r3, #16
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	061b      	lsls	r3, r3, #24
 8004d30:	4937      	ldr	r1, [pc, #220]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d36:	4b37      	ldr	r3, [pc, #220]	; (8004e14 <HAL_RCC_OscConfig+0x4e8>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fb fcb4 	bl	80006a8 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fb fcb0 	bl	80006a8 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e056      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d56:	4b2e      	ldr	r3, [pc, #184]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x418>
 8004d62:	e04e      	b.n	8004e02 <HAL_RCC_OscConfig+0x4d6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d64:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <HAL_RCC_OscConfig+0x4e8>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6a:	f7fb fc9d 	bl	80006a8 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d72:	f7fb fc99 	bl	80006a8 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e03f      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d84:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f0      	bne.n	8004d72 <HAL_RCC_OscConfig+0x446>
 8004d90:	e037      	b.n	8004e02 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_RCC_OscConfig+0x472>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e032      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d9e:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <HAL_RCC_OscConfig+0x4e4>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d028      	beq.n	8004dfe <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d121      	bne.n	8004dfe <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d11a      	bne.n	8004dfe <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dce:	4013      	ands	r3, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dd4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d111      	bne.n	8004dfe <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	3b01      	subs	r3, #1
 8004de8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d107      	bne.n	8004dfe <HAL_RCC_OscConfig+0x4d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCC_OscConfig+0x4d6>
#endif
        {
          return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40007000 	.word	0x40007000
 8004e10:	40023800 	.word	0x40023800
 8004e14:	42470060 	.word	0x42470060

08004e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0cc      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b68      	ldr	r3, [pc, #416]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d90c      	bls.n	8004e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b65      	ldr	r3, [pc, #404]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b63      	ldr	r3, [pc, #396]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0b8      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d020      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e6c:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4a58      	ldr	r2, [pc, #352]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e84:	4b53      	ldr	r3, [pc, #332]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4a52      	ldr	r2, [pc, #328]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e90:	4b50      	ldr	r3, [pc, #320]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	494d      	ldr	r1, [pc, #308]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d044      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	4b47      	ldr	r3, [pc, #284]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d119      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e07f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d003      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d107      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed6:	4b3f      	ldr	r3, [pc, #252]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e06f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee6:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e067      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ef6:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f023 0203 	bic.w	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	4934      	ldr	r1, [pc, #208]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f08:	f7fb fbce 	bl	80006a8 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f10:	f7fb fbca 	bl	80006a8 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e04f      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f26:	4b2b      	ldr	r3, [pc, #172]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 020c 	and.w	r2, r3, #12
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d1eb      	bne.n	8004f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d20c      	bcs.n	8004f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f46:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4e:	4b20      	ldr	r3, [pc, #128]	; (8004fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e032      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f6c:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4916      	ldr	r1, [pc, #88]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	490e      	ldr	r1, [pc, #56]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f9e:	f000 f82d 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	091b      	lsrs	r3, r3, #4
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	490a      	ldr	r1, [pc, #40]	; (8004fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004fb0:	5ccb      	ldrb	r3, [r1, r3]
 8004fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb6:	4a09      	ldr	r2, [pc, #36]	; (8004fdc <HAL_RCC_ClockConfig+0x1c4>)
 8004fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fb fb2e 	bl	8000620 <HAL_InitTick>

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023c00 	.word	0x40023c00
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	0800b264 	.word	0x0800b264
 8004fdc:	20000118 	.word	0x20000118
 8004fe0:	20000000 	.word	0x20000000

08004fe4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <HAL_RCC_EnableCSS+0x14>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	4247004c 	.word	0x4247004c

08004ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ffc:	b5b0      	push	{r4, r5, r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005002:	2100      	movs	r1, #0
 8005004:	6079      	str	r1, [r7, #4]
 8005006:	2100      	movs	r1, #0
 8005008:	60f9      	str	r1, [r7, #12]
 800500a:	2100      	movs	r1, #0
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800500e:	2100      	movs	r1, #0
 8005010:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005012:	4952      	ldr	r1, [pc, #328]	; (800515c <HAL_RCC_GetSysClockFreq+0x160>)
 8005014:	6889      	ldr	r1, [r1, #8]
 8005016:	f001 010c 	and.w	r1, r1, #12
 800501a:	2908      	cmp	r1, #8
 800501c:	d00d      	beq.n	800503a <HAL_RCC_GetSysClockFreq+0x3e>
 800501e:	2908      	cmp	r1, #8
 8005020:	f200 8094 	bhi.w	800514c <HAL_RCC_GetSysClockFreq+0x150>
 8005024:	2900      	cmp	r1, #0
 8005026:	d002      	beq.n	800502e <HAL_RCC_GetSysClockFreq+0x32>
 8005028:	2904      	cmp	r1, #4
 800502a:	d003      	beq.n	8005034 <HAL_RCC_GetSysClockFreq+0x38>
 800502c:	e08e      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800502e:	4b4c      	ldr	r3, [pc, #304]	; (8005160 <HAL_RCC_GetSysClockFreq+0x164>)
 8005030:	60bb      	str	r3, [r7, #8]
       break;
 8005032:	e08e      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005034:	4b4b      	ldr	r3, [pc, #300]	; (8005164 <HAL_RCC_GetSysClockFreq+0x168>)
 8005036:	60bb      	str	r3, [r7, #8]
      break;
 8005038:	e08b      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800503a:	4948      	ldr	r1, [pc, #288]	; (800515c <HAL_RCC_GetSysClockFreq+0x160>)
 800503c:	6849      	ldr	r1, [r1, #4]
 800503e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005042:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005044:	4945      	ldr	r1, [pc, #276]	; (800515c <HAL_RCC_GetSysClockFreq+0x160>)
 8005046:	6849      	ldr	r1, [r1, #4]
 8005048:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800504c:	2900      	cmp	r1, #0
 800504e:	d024      	beq.n	800509a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005050:	4942      	ldr	r1, [pc, #264]	; (800515c <HAL_RCC_GetSysClockFreq+0x160>)
 8005052:	6849      	ldr	r1, [r1, #4]
 8005054:	0989      	lsrs	r1, r1, #6
 8005056:	4608      	mov	r0, r1
 8005058:	f04f 0100 	mov.w	r1, #0
 800505c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005060:	f04f 0500 	mov.w	r5, #0
 8005064:	ea00 0204 	and.w	r2, r0, r4
 8005068:	ea01 0305 	and.w	r3, r1, r5
 800506c:	493d      	ldr	r1, [pc, #244]	; (8005164 <HAL_RCC_GetSysClockFreq+0x168>)
 800506e:	fb01 f003 	mul.w	r0, r1, r3
 8005072:	2100      	movs	r1, #0
 8005074:	fb01 f102 	mul.w	r1, r1, r2
 8005078:	1844      	adds	r4, r0, r1
 800507a:	493a      	ldr	r1, [pc, #232]	; (8005164 <HAL_RCC_GetSysClockFreq+0x168>)
 800507c:	fba2 0101 	umull	r0, r1, r2, r1
 8005080:	1863      	adds	r3, r4, r1
 8005082:	4619      	mov	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	461a      	mov	r2, r3
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	f7fb f8a4 	bl	80001d8 <__aeabi_uldivmod>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4613      	mov	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e04a      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800509a:	4b30      	ldr	r3, [pc, #192]	; (800515c <HAL_RCC_GetSysClockFreq+0x160>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	099b      	lsrs	r3, r3, #6
 80050a0:	461a      	mov	r2, r3
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	ea02 0400 	and.w	r4, r2, r0
 80050b2:	ea03 0501 	and.w	r5, r3, r1
 80050b6:	4620      	mov	r0, r4
 80050b8:	4629      	mov	r1, r5
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	014b      	lsls	r3, r1, #5
 80050c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050c8:	0142      	lsls	r2, r0, #5
 80050ca:	4610      	mov	r0, r2
 80050cc:	4619      	mov	r1, r3
 80050ce:	1b00      	subs	r0, r0, r4
 80050d0:	eb61 0105 	sbc.w	r1, r1, r5
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	018b      	lsls	r3, r1, #6
 80050de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050e2:	0182      	lsls	r2, r0, #6
 80050e4:	1a12      	subs	r2, r2, r0
 80050e6:	eb63 0301 	sbc.w	r3, r3, r1
 80050ea:	f04f 0000 	mov.w	r0, #0
 80050ee:	f04f 0100 	mov.w	r1, #0
 80050f2:	00d9      	lsls	r1, r3, #3
 80050f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050f8:	00d0      	lsls	r0, r2, #3
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	1912      	adds	r2, r2, r4
 8005100:	eb45 0303 	adc.w	r3, r5, r3
 8005104:	f04f 0000 	mov.w	r0, #0
 8005108:	f04f 0100 	mov.w	r1, #0
 800510c:	0299      	lsls	r1, r3, #10
 800510e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005112:	0290      	lsls	r0, r2, #10
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4610      	mov	r0, r2
 800511a:	4619      	mov	r1, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	461a      	mov	r2, r3
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	f7fb f858 	bl	80001d8 <__aeabi_uldivmod>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4613      	mov	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <HAL_RCC_GetSysClockFreq+0x160>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	3301      	adds	r3, #1
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	60bb      	str	r3, [r7, #8]
      break;
 800514a:	e002      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800514c:	4b04      	ldr	r3, [pc, #16]	; (8005160 <HAL_RCC_GetSysClockFreq+0x164>)
 800514e:	60bb      	str	r3, [r7, #8]
      break;
 8005150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005152:	68bb      	ldr	r3, [r7, #8]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bdb0      	pop	{r4, r5, r7, pc}
 800515c:	40023800 	.word	0x40023800
 8005160:	00f42400 	.word	0x00f42400
 8005164:	016e3600 	.word	0x016e3600

08005168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <HAL_RCC_GetHCLKFreq+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000118 	.word	0x20000118

08005180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005184:	f7ff fff0 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 8005188:	4602      	mov	r2, r0
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0a9b      	lsrs	r3, r3, #10
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4903      	ldr	r1, [pc, #12]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005196:	5ccb      	ldrb	r3, [r1, r3]
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40023800 	.word	0x40023800
 80051a4:	0800b274 	.word	0x0800b274

080051a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051ac:	f7ff ffdc 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0b5b      	lsrs	r3, r3, #13
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	0800b274 	.word	0x0800b274

080051d0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051dc:	2b80      	cmp	r3, #128	; 0x80
 80051de:	d104      	bne.n	80051ea <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80051e0:	f000 f80a 	bl	80051f8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80051e4:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80051e6:	2280      	movs	r2, #128	; 0x80
 80051e8:	701a      	strb	r2, [r3, #0]
  }
}
 80051ea:	bf00      	nop
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40023800 	.word	0x40023800
 80051f4:	4002380e 	.word	0x4002380e

080051f8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d105      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800522c:	2b00      	cmp	r3, #0
 800522e:	d038      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005230:	4b68      	ldr	r3, [pc, #416]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005236:	f7fb fa37 	bl	80006a8 <HAL_GetTick>
 800523a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800523c:	e008      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800523e:	f7fb fa33 	bl	80006a8 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e0bc      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005250:	4b61      	ldr	r3, [pc, #388]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	019b      	lsls	r3, r3, #6
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	071b      	lsls	r3, r3, #28
 800526e:	495a      	ldr	r1, [pc, #360]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005276:	4b57      	ldr	r3, [pc, #348]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800527c:	f7fb fa14 	bl	80006a8 <HAL_GetTick>
 8005280:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005284:	f7fb fa10 	bl	80006a8 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e099      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005296:	4b50      	ldr	r3, [pc, #320]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 8082 	beq.w	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	4b48      	ldr	r3, [pc, #288]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	4a47      	ldr	r2, [pc, #284]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052be:	6413      	str	r3, [r2, #64]	; 0x40
 80052c0:	4b45      	ldr	r3, [pc, #276]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052cc:	4b43      	ldr	r3, [pc, #268]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a42      	ldr	r2, [pc, #264]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052d8:	f7fb f9e6 	bl	80006a8 <HAL_GetTick>
 80052dc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052e0:	f7fb f9e2 	bl	80006a8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e06b      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052f2:	4b3a      	ldr	r3, [pc, #232]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052fe:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005306:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d02e      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x164>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	429a      	cmp	r2, r3
 800531a:	d027      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800531c:	4b2e      	ldr	r3, [pc, #184]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005324:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005326:	4b2e      	ldr	r3, [pc, #184]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005328:	2201      	movs	r2, #1
 800532a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800532c:	4b2c      	ldr	r3, [pc, #176]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005332:	4a29      	ldr	r2, [pc, #164]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005338:	4b27      	ldr	r3, [pc, #156]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b01      	cmp	r3, #1
 8005342:	d113      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005344:	f7fb f9b0 	bl	80006a8 <HAL_GetTick>
 8005348:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534a:	e009      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800534c:	f7fb f9ac 	bl	80006a8 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800535a:	d901      	bls.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x158>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e034      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005360:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0ef      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005378:	d10d      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800537a:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800538a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538e:	4912      	ldr	r1, [pc, #72]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005390:	4313      	orrs	r3, r2
 8005392:	608b      	str	r3, [r1, #8]
 8005394:	e005      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8005396:	4b10      	ldr	r3, [pc, #64]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	4a0f      	ldr	r2, [pc, #60]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053a0:	6093      	str	r3, [r2, #8]
 80053a2:	4b0d      	ldr	r3, [pc, #52]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ae:	490a      	ldr	r1, [pc, #40]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7d1a      	ldrb	r2, [r3, #20]
 80053c4:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80053c6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	42470068 	.word	0x42470068
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40007000 	.word	0x40007000
 80053e0:	42470e40 	.word	0x42470e40
 80053e4:	424711e0 	.word	0x424711e0

080053e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e083      	b.n	8005502 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	7f5b      	ldrb	r3, [r3, #29]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f005 f864 	bl	800a4d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	22ca      	movs	r2, #202	; 0xca
 800541c:	625a      	str	r2, [r3, #36]	; 0x24
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2253      	movs	r2, #83	; 0x53
 8005424:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f897 	bl	800555a <RTC_EnterInitMode>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d008      	beq.n	8005444 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	22ff      	movs	r2, #255	; 0xff
 8005438:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2204      	movs	r2, #4
 800543e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e05e      	b.n	8005502 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005456:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6899      	ldr	r1, [r3, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68d2      	ldr	r2, [r2, #12]
 800547e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6919      	ldr	r1, [r3, #16]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	041a      	lsls	r2, r3, #16
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054a2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10e      	bne.n	80054d0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f829 	bl	800550a <HAL_RTC_WaitForSynchro>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	22ff      	movs	r2, #255	; 0xff
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2204      	movs	r2, #4
 80054ca:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e018      	b.n	8005502 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	22ff      	movs	r2, #255	; 0xff
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005500:	2300      	movs	r3, #0
  }
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005524:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005526:	f7fb f8bf 	bl	80006a8 <HAL_GetTick>
 800552a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800552c:	e009      	b.n	8005542 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800552e:	f7fb f8bb 	bl	80006a8 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800553c:	d901      	bls.n	8005542 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e007      	b.n	8005552 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0ee      	beq.n	800552e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d119      	bne.n	80055a8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f04f 32ff 	mov.w	r2, #4294967295
 800557c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800557e:	f7fb f893 	bl	80006a8 <HAL_GetTick>
 8005582:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005584:	e009      	b.n	800559a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005586:	f7fb f88f 	bl	80006a8 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005594:	d901      	bls.n	800559a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e007      	b.n	80055aa <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0ee      	beq.n	8005586 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e022      	b.n	800560a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d105      	bne.n	80055dc <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f004 ff94 	bl	800a504 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2203      	movs	r2, #3
 80055e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f815 	bl	8005614 <HAL_SD_InitCard>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e00a      	b.n	800560a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005614:	b5b0      	push	{r4, r5, r7, lr}
 8005616:	b08e      	sub	sp, #56	; 0x38
 8005618:	af04      	add	r7, sp, #16
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800561c:	2300      	movs	r3, #0
 800561e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005624:	2300      	movs	r3, #0
 8005626:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800562c:	2300      	movs	r3, #0
 800562e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005630:	2376      	movs	r3, #118	; 0x76
 8005632:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681d      	ldr	r5, [r3, #0]
 8005638:	466c      	mov	r4, sp
 800563a:	f107 0314 	add.w	r3, r7, #20
 800563e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005646:	f107 0308 	add.w	r3, r7, #8
 800564a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800564c:	4628      	mov	r0, r5
 800564e:	f000 ff75 	bl	800653c <SDIO_Init>
 8005652:	4603      	mov	r3, r0
 8005654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e04c      	b.n	80056fe <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005664:	4b28      	ldr	r3, [pc, #160]	; (8005708 <HAL_SD_InitCard+0xf4>)
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 ff9c 	bl	80065ac <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005674:	4b24      	ldr	r3, [pc, #144]	; (8005708 <HAL_SD_InitCard+0xf4>)
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fb52 	bl	8005d24 <SD_PowerON>
 8005680:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e02e      	b.n	80056fe <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fa73 	bl	8005b8c <SD_InitCard>
 80056a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00b      	beq.n	80056c6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e01b      	b.n	80056fe <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 ffff 	bl	80066d2 <SDMMC_CmdBlockLength>
 80056d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00f      	beq.n	80056fc <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a0a      	ldr	r2, [pc, #40]	; (800570c <HAL_SD_InitCard+0xf8>)
 80056e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3728      	adds	r7, #40	; 0x28
 8005702:	46bd      	mov	sp, r7
 8005704:	bdb0      	pop	{r4, r5, r7, pc}
 8005706:	bf00      	nop
 8005708:	422580a0 	.word	0x422580a0
 800570c:	004005ff 	.word	0x004005ff

08005710 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800571e:	0f9b      	lsrs	r3, r3, #30
 8005720:	b2da      	uxtb	r2, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800572a:	0e9b      	lsrs	r3, r3, #26
 800572c:	b2db      	uxtb	r3, r3
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	b2da      	uxtb	r2, r3
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800573c:	0e1b      	lsrs	r3, r3, #24
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	b2da      	uxtb	r2, r3
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800574e:	0c1b      	lsrs	r3, r3, #16
 8005750:	b2da      	uxtb	r2, r3
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800575a:	0a1b      	lsrs	r3, r3, #8
 800575c:	b2da      	uxtb	r2, r3
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005766:	b2da      	uxtb	r2, r3
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005770:	0d1b      	lsrs	r3, r3, #20
 8005772:	b29a      	uxth	r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800577c:	0c1b      	lsrs	r3, r3, #16
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	b2da      	uxtb	r2, r3
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800578e:	0bdb      	lsrs	r3, r3, #15
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	b2da      	uxtb	r2, r3
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057a0:	0b9b      	lsrs	r3, r3, #14
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057b2:	0b5b      	lsrs	r3, r3, #13
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057c4:	0b1b      	lsrs	r3, r3, #12
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2200      	movs	r2, #0
 80057d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d163      	bne.n	80058a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057e4:	009a      	lsls	r2, r3, #2
 80057e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057ea:	4013      	ands	r3, r2
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80057f0:	0f92      	lsrs	r2, r2, #30
 80057f2:	431a      	orrs	r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057fc:	0edb      	lsrs	r3, r3, #27
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	b2da      	uxtb	r2, r3
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580e:	0e1b      	lsrs	r3, r3, #24
 8005810:	b2db      	uxtb	r3, r3
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	b2da      	uxtb	r2, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005820:	0d5b      	lsrs	r3, r3, #21
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	b2da      	uxtb	r2, r3
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005832:	0c9b      	lsrs	r3, r3, #18
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	b2da      	uxtb	r2, r3
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005844:	0bdb      	lsrs	r3, r3, #15
 8005846:	b2db      	uxtb	r3, r3
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	b2da      	uxtb	r2, r3
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	7e1b      	ldrb	r3, [r3, #24]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	3302      	adds	r3, #2
 8005868:	2201      	movs	r2, #1
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005872:	fb02 f203 	mul.w	r2, r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	7a1b      	ldrb	r3, [r3, #8]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	2201      	movs	r2, #1
 8005886:	409a      	lsls	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005894:	0a52      	lsrs	r2, r2, #9
 8005896:	fb02 f203 	mul.w	r2, r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058a4:	661a      	str	r2, [r3, #96]	; 0x60
 80058a6:	e031      	b.n	800590c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d11d      	bne.n	80058ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058b4:	041b      	lsls	r3, r3, #16
 80058b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058be:	0c1b      	lsrs	r3, r3, #16
 80058c0:	431a      	orrs	r2, r3
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	3301      	adds	r3, #1
 80058cc:	029a      	lsls	r2, r3, #10
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	661a      	str	r2, [r3, #96]	; 0x60
 80058ea:	e00f      	b.n	800590c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a58      	ldr	r2, [pc, #352]	; (8005a54 <HAL_SD_GetCardCSD+0x344>)
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e09d      	b.n	8005a48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005910:	0b9b      	lsrs	r3, r3, #14
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	b2da      	uxtb	r2, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005922:	09db      	lsrs	r3, r3, #7
 8005924:	b2db      	uxtb	r3, r3
 8005926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592a:	b2da      	uxtb	r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005934:	b2db      	uxtb	r3, r3
 8005936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593a:	b2da      	uxtb	r2, r3
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005944:	0fdb      	lsrs	r3, r3, #31
 8005946:	b2da      	uxtb	r2, r3
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005950:	0f5b      	lsrs	r3, r3, #29
 8005952:	b2db      	uxtb	r3, r3
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	b2da      	uxtb	r2, r3
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	0e9b      	lsrs	r3, r3, #26
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	b2da      	uxtb	r2, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	0d9b      	lsrs	r3, r3, #22
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	b2da      	uxtb	r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005986:	0d5b      	lsrs	r3, r3, #21
 8005988:	b2db      	uxtb	r3, r3
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	b2da      	uxtb	r2, r3
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	0c1b      	lsrs	r3, r3, #16
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	0bdb      	lsrs	r3, r3, #15
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	0b9b      	lsrs	r3, r3, #14
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059de:	0b5b      	lsrs	r3, r3, #13
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f2:	0b1b      	lsrs	r3, r3, #12
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	0a9b      	lsrs	r3, r3, #10
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1a:	0a1b      	lsrs	r3, r3, #8
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2e:	085b      	lsrs	r3, r3, #1
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	004005ff 	.word	0x004005ff

08005a58 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005a58:	b5b0      	push	{r4, r5, r7, lr}
 8005a5a:	b08e      	sub	sp, #56	; 0x38
 8005a5c:	af04      	add	r7, sp, #16
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	d02e      	beq.n	8005ad6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7e:	d106      	bne.n	8005a8e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38
 8005a8c:	e029      	b.n	8005ae2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a94:	d10a      	bne.n	8005aac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f9d2 	bl	8005e40 <SD_WideBus_Enable>
 8005a9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8005aaa:	e01a      	b.n	8005ae2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa0f 	bl	8005ed6 <SD_WideBus_Disable>
 8005ab8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	639a      	str	r2, [r3, #56]	; 0x38
 8005ac6:	e00c      	b.n	8005ae2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ad4:	e005      	b.n	8005ae2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a26      	ldr	r2, [pc, #152]	; (8005b88 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005af0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b00:	e01f      	b.n	8005b42 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681d      	ldr	r5, [r3, #0]
 8005b28:	466c      	mov	r4, sp
 8005b2a:	f107 0314 	add.w	r3, r7, #20
 8005b2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b36:	f107 0308 	add.w	r3, r7, #8
 8005b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f000 fcfd 	bl	800653c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fdc1 	bl	80066d2 <SDMMC_CmdBlockLength>
 8005b50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00c      	beq.n	8005b72 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a0a      	ldr	r2, [pc, #40]	; (8005b88 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3728      	adds	r7, #40	; 0x28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bdb0      	pop	{r4, r5, r7, pc}
 8005b86:	bf00      	nop
 8005b88:	004005ff 	.word	0x004005ff

08005b8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005b8c:	b5b0      	push	{r4, r5, r7, lr}
 8005b8e:	b094      	sub	sp, #80	; 0x50
 8005b90:	af04      	add	r7, sp, #16
 8005b92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005b94:	2301      	movs	r3, #1
 8005b96:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fd14 	bl	80065ca <SDIO_GetPowerState>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ba8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005bac:	e0b6      	b.n	8005d1c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d02f      	beq.n	8005c16 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fe93 	bl	80068e6 <SDMMC_CmdSendCID>
 8005bc0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <SD_InitCard+0x40>
    {
      return errorstate;
 8005bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bca:	e0a7      	b.n	8005d1c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fd3e 	bl	8006654 <SDIO_GetResponse>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2104      	movs	r1, #4
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fd35 	bl	8006654 <SDIO_GetResponse>
 8005bea:	4602      	mov	r2, r0
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2108      	movs	r1, #8
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fd2c 	bl	8006654 <SDIO_GetResponse>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	210c      	movs	r1, #12
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fd23 	bl	8006654 <SDIO_GetResponse>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d00d      	beq.n	8005c3a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f107 020e 	add.w	r2, r7, #14
 8005c26:	4611      	mov	r1, r2
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fe99 	bl	8006960 <SDMMC_CmdSetRelAdd>
 8005c2e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <SD_InitCard+0xae>
    {
      return errorstate;
 8005c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c38:	e070      	b.n	8005d1c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d036      	beq.n	8005cb0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005c42:	89fb      	ldrh	r3, [r7, #14]
 8005c44:	461a      	mov	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c52:	041b      	lsls	r3, r3, #16
 8005c54:	4619      	mov	r1, r3
 8005c56:	4610      	mov	r0, r2
 8005c58:	f000 fe63 	bl	8006922 <SDMMC_CmdSendCSD>
 8005c5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c66:	e059      	b.n	8005d1c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fcf0 	bl	8006654 <SDIO_GetResponse>
 8005c74:	4602      	mov	r2, r0
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2104      	movs	r1, #4
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 fce7 	bl	8006654 <SDIO_GetResponse>
 8005c86:	4602      	mov	r2, r0
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2108      	movs	r1, #8
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fcde 	bl	8006654 <SDIO_GetResponse>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	210c      	movs	r1, #12
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fcd5 	bl	8006654 <SDIO_GetResponse>
 8005caa:	4602      	mov	r2, r0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2104      	movs	r1, #4
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fccc 	bl	8006654 <SDIO_GetResponse>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	0d1a      	lsrs	r2, r3, #20
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005cc4:	f107 0310 	add.w	r3, r7, #16
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff fd20 	bl	8005710 <HAL_SD_GetCardCSD>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005cda:	e01f      	b.n	8005d1c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6819      	ldr	r1, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce4:	041b      	lsls	r3, r3, #16
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	4608      	mov	r0, r1
 8005cee:	f000 fd12 	bl	8006716 <SDMMC_CmdSelDesel>
 8005cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <SD_InitCard+0x172>
  {
    return errorstate;
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfc:	e00e      	b.n	8005d1c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681d      	ldr	r5, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	466c      	mov	r4, sp
 8005d06:	f103 0210 	add.w	r2, r3, #16
 8005d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d10:	3304      	adds	r3, #4
 8005d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d14:	4628      	mov	r0, r5
 8005d16:	f000 fc11 	bl	800653c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3740      	adds	r7, #64	; 0x40
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bdb0      	pop	{r4, r5, r7, pc}

08005d24 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	2300      	movs	r3, #0
 8005d36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fd0d 	bl	800675c <SDMMC_CmdGoIdleState>
 8005d42:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <SD_PowerON+0x2a>
  {
    return errorstate;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	e072      	b.n	8005e34 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fd20 	bl	8006798 <SDMMC_CmdOperCond>
 8005d58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00d      	beq.n	8005d7c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fcf6 	bl	800675c <SDMMC_CmdGoIdleState>
 8005d70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d004      	beq.n	8005d82 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	e05b      	b.n	8005e34 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d137      	bne.n	8005dfa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fd20 	bl	80067d6 <SDMMC_CmdAppCommand>
 8005d96:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d02d      	beq.n	8005dfa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005da2:	e047      	b.n	8005e34 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2100      	movs	r1, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fd13 	bl	80067d6 <SDMMC_CmdAppCommand>
 8005db0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <SD_PowerON+0x98>
    {
      return errorstate;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	e03b      	b.n	8005e34 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	491e      	ldr	r1, [pc, #120]	; (8005e3c <SD_PowerON+0x118>)
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fd29 	bl	800681a <SDMMC_CmdAppOperCommand>
 8005dc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005dd4:	e02e      	b.n	8005e34 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fc39 	bl	8006654 <SDIO_GetResponse>
 8005de2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	0fdb      	lsrs	r3, r3, #31
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <SD_PowerON+0xcc>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <SD_PowerON+0xce>
 8005df0:	2300      	movs	r3, #0
 8005df2:	613b      	str	r3, [r7, #16]

    count++;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d802      	bhi.n	8005e0a <SD_PowerON+0xe6>
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0cc      	beq.n	8005da4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d902      	bls.n	8005e1a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e18:	e00c      	b.n	8005e34 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	645a      	str	r2, [r3, #68]	; 0x44
 8005e2a:	e002      	b.n	8005e32 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	c1100000 	.word	0xc1100000

08005e40 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2100      	movs	r1, #0
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fbfc 	bl	8006654 <SDIO_GetResponse>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e66:	d102      	bne.n	8005e6e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005e68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e6c:	e02f      	b.n	8005ece <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005e6e:	f107 030c 	add.w	r3, r7, #12
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f879 	bl	8005f6c <SD_FindSCR>
 8005e7a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	e023      	b.n	8005ece <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01c      	beq.n	8005eca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e98:	041b      	lsls	r3, r3, #16
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f000 fc9a 	bl	80067d6 <SDMMC_CmdAppCommand>
 8005ea2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	e00f      	b.n	8005ece <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2102      	movs	r1, #2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fcd3 	bl	8006860 <SDMMC_CmdBusWidth>
 8005eba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	e003      	b.n	8005ece <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	e001      	b.n	8005ece <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005eca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2100      	movs	r1, #0
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fbb1 	bl	8006654 <SDIO_GetResponse>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005efc:	d102      	bne.n	8005f04 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f02:	e02f      	b.n	8005f64 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005f04:	f107 030c 	add.w	r3, r7, #12
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f82e 	bl	8005f6c <SD_FindSCR>
 8005f10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	e023      	b.n	8005f64 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d01c      	beq.n	8005f60 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f2e:	041b      	lsls	r3, r3, #16
 8005f30:	4619      	mov	r1, r3
 8005f32:	4610      	mov	r0, r2
 8005f34:	f000 fc4f 	bl	80067d6 <SDMMC_CmdAppCommand>
 8005f38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	e00f      	b.n	8005f64 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fc88 	bl	8006860 <SDMMC_CmdBusWidth>
 8005f50:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	e003      	b.n	8005f64 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e001      	b.n	8005f64 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b08f      	sub	sp, #60	; 0x3c
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005f76:	f7fa fb97 	bl	80006a8 <HAL_GetTick>
 8005f7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005f80:	2300      	movs	r3, #0
 8005f82:	60bb      	str	r3, [r7, #8]
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2108      	movs	r1, #8
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fb9d 	bl	80066d2 <SDMMC_CmdBlockLength>
 8005f98:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	e0b2      	b.n	800610a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fac:	041b      	lsls	r3, r3, #16
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	f000 fc10 	bl	80067d6 <SDMMC_CmdAppCommand>
 8005fb6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	e0a3      	b.n	800610a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005fc8:	2308      	movs	r3, #8
 8005fca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005fcc:	2330      	movs	r3, #48	; 0x30
 8005fce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f107 0210 	add.w	r2, r7, #16
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fb47 	bl	800667a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fc57 	bl	80068a4 <SDMMC_CmdSendSCR>
 8005ff6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d02a      	beq.n	8006054 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	e083      	b.n	800610a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00f      	beq.n	8006030 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	f107 0208 	add.w	r2, r7, #8
 800601c:	18d4      	adds	r4, r2, r3
 800601e:	4608      	mov	r0, r1
 8006020:	f000 fab7 	bl	8006592 <SDIO_ReadFIFO>
 8006024:	4603      	mov	r3, r0
 8006026:	6023      	str	r3, [r4, #0]
      index++;
 8006028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602a:	3301      	adds	r3, #1
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
 800602e:	e006      	b.n	800603e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d012      	beq.n	8006064 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800603e:	f7fa fb33 	bl	80006a8 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d102      	bne.n	8006054 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800604e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006052:	e05a      	b.n	800610a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0cf      	beq.n	8006002 <SD_FindSCR+0x96>
 8006062:	e000      	b.n	8006066 <SD_FindSCR+0xfa>
      break;
 8006064:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2208      	movs	r2, #8
 800607a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800607c:	2308      	movs	r3, #8
 800607e:	e044      	b.n	800610a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2202      	movs	r2, #2
 8006094:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006096:	2302      	movs	r3, #2
 8006098:	e037      	b.n	800610a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a0:	f003 0320 	and.w	r3, r3, #32
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2220      	movs	r2, #32
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80060b0:	2320      	movs	r3, #32
 80060b2:	e02a      	b.n	800610a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80060bc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	061a      	lsls	r2, r3, #24
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	0a1b      	lsrs	r3, r3, #8
 80060d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80060d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	0e1b      	lsrs	r3, r3, #24
 80060da:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	601a      	str	r2, [r3, #0]
    scr++;
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	3304      	adds	r3, #4
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	061a      	lsls	r2, r3, #24
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	0a1b      	lsrs	r3, r3, #8
 80060f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80060fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	0e1b      	lsrs	r3, r3, #24
 8006102:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	373c      	adds	r7, #60	; 0x3c
 800610e:	46bd      	mov	sp, r7
 8006110:	bd90      	pop	{r4, r7, pc}

08006112 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e03f      	b.n	80061a4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f004 fa6d 	bl	800a618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2224      	movs	r2, #36	; 0x24
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006154:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f828 	bl	80061ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800616a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800617a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800618a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b0:	b09f      	sub	sp, #124	; 0x7c
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c2:	68d9      	ldr	r1, [r3, #12]
 80061c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	ea40 0301 	orr.w	r3, r0, r1
 80061cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	431a      	orrs	r2, r3
 80061d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	431a      	orrs	r2, r3
 80061de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80061e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061f0:	f021 010c 	bic.w	r1, r1, #12
 80061f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061fa:	430b      	orrs	r3, r1
 80061fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620a:	6999      	ldr	r1, [r3, #24]
 800620c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	ea40 0301 	orr.w	r3, r0, r1
 8006214:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4bc5      	ldr	r3, [pc, #788]	; (8006530 <UART_SetConfig+0x384>)
 800621c:	429a      	cmp	r2, r3
 800621e:	d004      	beq.n	800622a <UART_SetConfig+0x7e>
 8006220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	4bc3      	ldr	r3, [pc, #780]	; (8006534 <UART_SetConfig+0x388>)
 8006226:	429a      	cmp	r2, r3
 8006228:	d103      	bne.n	8006232 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800622a:	f7fe ffbd 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 800622e:	6778      	str	r0, [r7, #116]	; 0x74
 8006230:	e002      	b.n	8006238 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006232:	f7fe ffa5 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8006236:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006240:	f040 80b6 	bne.w	80063b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006246:	461c      	mov	r4, r3
 8006248:	f04f 0500 	mov.w	r5, #0
 800624c:	4622      	mov	r2, r4
 800624e:	462b      	mov	r3, r5
 8006250:	1891      	adds	r1, r2, r2
 8006252:	6439      	str	r1, [r7, #64]	; 0x40
 8006254:	415b      	adcs	r3, r3
 8006256:	647b      	str	r3, [r7, #68]	; 0x44
 8006258:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800625c:	1912      	adds	r2, r2, r4
 800625e:	eb45 0303 	adc.w	r3, r5, r3
 8006262:	f04f 0000 	mov.w	r0, #0
 8006266:	f04f 0100 	mov.w	r1, #0
 800626a:	00d9      	lsls	r1, r3, #3
 800626c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006270:	00d0      	lsls	r0, r2, #3
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	1911      	adds	r1, r2, r4
 8006278:	6639      	str	r1, [r7, #96]	; 0x60
 800627a:	416b      	adcs	r3, r5
 800627c:	667b      	str	r3, [r7, #100]	; 0x64
 800627e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	461a      	mov	r2, r3
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	1891      	adds	r1, r2, r2
 800628a:	63b9      	str	r1, [r7, #56]	; 0x38
 800628c:	415b      	adcs	r3, r3
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006294:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006298:	f7f9 ff9e 	bl	80001d8 <__aeabi_uldivmod>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4ba5      	ldr	r3, [pc, #660]	; (8006538 <UART_SetConfig+0x38c>)
 80062a2:	fba3 2302 	umull	r2, r3, r3, r2
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	011e      	lsls	r6, r3, #4
 80062aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062ac:	461c      	mov	r4, r3
 80062ae:	f04f 0500 	mov.w	r5, #0
 80062b2:	4622      	mov	r2, r4
 80062b4:	462b      	mov	r3, r5
 80062b6:	1891      	adds	r1, r2, r2
 80062b8:	6339      	str	r1, [r7, #48]	; 0x30
 80062ba:	415b      	adcs	r3, r3
 80062bc:	637b      	str	r3, [r7, #52]	; 0x34
 80062be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80062c2:	1912      	adds	r2, r2, r4
 80062c4:	eb45 0303 	adc.w	r3, r5, r3
 80062c8:	f04f 0000 	mov.w	r0, #0
 80062cc:	f04f 0100 	mov.w	r1, #0
 80062d0:	00d9      	lsls	r1, r3, #3
 80062d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062d6:	00d0      	lsls	r0, r2, #3
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	1911      	adds	r1, r2, r4
 80062de:	65b9      	str	r1, [r7, #88]	; 0x58
 80062e0:	416b      	adcs	r3, r5
 80062e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	461a      	mov	r2, r3
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	1891      	adds	r1, r2, r2
 80062f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80062f2:	415b      	adcs	r3, r3
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80062fe:	f7f9 ff6b 	bl	80001d8 <__aeabi_uldivmod>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4b8c      	ldr	r3, [pc, #560]	; (8006538 <UART_SetConfig+0x38c>)
 8006308:	fba3 1302 	umull	r1, r3, r3, r2
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	2164      	movs	r1, #100	; 0x64
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	3332      	adds	r3, #50	; 0x32
 800631a:	4a87      	ldr	r2, [pc, #540]	; (8006538 <UART_SetConfig+0x38c>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006328:	441e      	add	r6, r3
 800632a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800632c:	4618      	mov	r0, r3
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	1894      	adds	r4, r2, r2
 8006338:	623c      	str	r4, [r7, #32]
 800633a:	415b      	adcs	r3, r3
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
 800633e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006342:	1812      	adds	r2, r2, r0
 8006344:	eb41 0303 	adc.w	r3, r1, r3
 8006348:	f04f 0400 	mov.w	r4, #0
 800634c:	f04f 0500 	mov.w	r5, #0
 8006350:	00dd      	lsls	r5, r3, #3
 8006352:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006356:	00d4      	lsls	r4, r2, #3
 8006358:	4622      	mov	r2, r4
 800635a:	462b      	mov	r3, r5
 800635c:	1814      	adds	r4, r2, r0
 800635e:	653c      	str	r4, [r7, #80]	; 0x50
 8006360:	414b      	adcs	r3, r1
 8006362:	657b      	str	r3, [r7, #84]	; 0x54
 8006364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	461a      	mov	r2, r3
 800636a:	f04f 0300 	mov.w	r3, #0
 800636e:	1891      	adds	r1, r2, r2
 8006370:	61b9      	str	r1, [r7, #24]
 8006372:	415b      	adcs	r3, r3
 8006374:	61fb      	str	r3, [r7, #28]
 8006376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800637a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800637e:	f7f9 ff2b 	bl	80001d8 <__aeabi_uldivmod>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4b6c      	ldr	r3, [pc, #432]	; (8006538 <UART_SetConfig+0x38c>)
 8006388:	fba3 1302 	umull	r1, r3, r3, r2
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	2164      	movs	r1, #100	; 0x64
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	3332      	adds	r3, #50	; 0x32
 800639a:	4a67      	ldr	r2, [pc, #412]	; (8006538 <UART_SetConfig+0x38c>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	095b      	lsrs	r3, r3, #5
 80063a2:	f003 0207 	and.w	r2, r3, #7
 80063a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4432      	add	r2, r6
 80063ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063ae:	e0b9      	b.n	8006524 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063b2:	461c      	mov	r4, r3
 80063b4:	f04f 0500 	mov.w	r5, #0
 80063b8:	4622      	mov	r2, r4
 80063ba:	462b      	mov	r3, r5
 80063bc:	1891      	adds	r1, r2, r2
 80063be:	6139      	str	r1, [r7, #16]
 80063c0:	415b      	adcs	r3, r3
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80063c8:	1912      	adds	r2, r2, r4
 80063ca:	eb45 0303 	adc.w	r3, r5, r3
 80063ce:	f04f 0000 	mov.w	r0, #0
 80063d2:	f04f 0100 	mov.w	r1, #0
 80063d6:	00d9      	lsls	r1, r3, #3
 80063d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063dc:	00d0      	lsls	r0, r2, #3
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	eb12 0804 	adds.w	r8, r2, r4
 80063e6:	eb43 0905 	adc.w	r9, r3, r5
 80063ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f04f 0100 	mov.w	r1, #0
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	008b      	lsls	r3, r1, #2
 80063fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006402:	0082      	lsls	r2, r0, #2
 8006404:	4640      	mov	r0, r8
 8006406:	4649      	mov	r1, r9
 8006408:	f7f9 fee6 	bl	80001d8 <__aeabi_uldivmod>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4b49      	ldr	r3, [pc, #292]	; (8006538 <UART_SetConfig+0x38c>)
 8006412:	fba3 2302 	umull	r2, r3, r3, r2
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	011e      	lsls	r6, r3, #4
 800641a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800641c:	4618      	mov	r0, r3
 800641e:	f04f 0100 	mov.w	r1, #0
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	1894      	adds	r4, r2, r2
 8006428:	60bc      	str	r4, [r7, #8]
 800642a:	415b      	adcs	r3, r3
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006432:	1812      	adds	r2, r2, r0
 8006434:	eb41 0303 	adc.w	r3, r1, r3
 8006438:	f04f 0400 	mov.w	r4, #0
 800643c:	f04f 0500 	mov.w	r5, #0
 8006440:	00dd      	lsls	r5, r3, #3
 8006442:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006446:	00d4      	lsls	r4, r2, #3
 8006448:	4622      	mov	r2, r4
 800644a:	462b      	mov	r3, r5
 800644c:	1814      	adds	r4, r2, r0
 800644e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006450:	414b      	adcs	r3, r1
 8006452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4618      	mov	r0, r3
 800645a:	f04f 0100 	mov.w	r1, #0
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	008b      	lsls	r3, r1, #2
 8006468:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800646c:	0082      	lsls	r2, r0, #2
 800646e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006472:	f7f9 feb1 	bl	80001d8 <__aeabi_uldivmod>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4b2f      	ldr	r3, [pc, #188]	; (8006538 <UART_SetConfig+0x38c>)
 800647c:	fba3 1302 	umull	r1, r3, r3, r2
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	2164      	movs	r1, #100	; 0x64
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	3332      	adds	r3, #50	; 0x32
 800648e:	4a2a      	ldr	r2, [pc, #168]	; (8006538 <UART_SetConfig+0x38c>)
 8006490:	fba2 2303 	umull	r2, r3, r2, r3
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800649a:	441e      	add	r6, r3
 800649c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800649e:	4618      	mov	r0, r3
 80064a0:	f04f 0100 	mov.w	r1, #0
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	1894      	adds	r4, r2, r2
 80064aa:	603c      	str	r4, [r7, #0]
 80064ac:	415b      	adcs	r3, r3
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b4:	1812      	adds	r2, r2, r0
 80064b6:	eb41 0303 	adc.w	r3, r1, r3
 80064ba:	f04f 0400 	mov.w	r4, #0
 80064be:	f04f 0500 	mov.w	r5, #0
 80064c2:	00dd      	lsls	r5, r3, #3
 80064c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064c8:	00d4      	lsls	r4, r2, #3
 80064ca:	4622      	mov	r2, r4
 80064cc:	462b      	mov	r3, r5
 80064ce:	eb12 0a00 	adds.w	sl, r2, r0
 80064d2:	eb43 0b01 	adc.w	fp, r3, r1
 80064d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	4618      	mov	r0, r3
 80064dc:	f04f 0100 	mov.w	r1, #0
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	008b      	lsls	r3, r1, #2
 80064ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064ee:	0082      	lsls	r2, r0, #2
 80064f0:	4650      	mov	r0, sl
 80064f2:	4659      	mov	r1, fp
 80064f4:	f7f9 fe70 	bl	80001d8 <__aeabi_uldivmod>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <UART_SetConfig+0x38c>)
 80064fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	2164      	movs	r1, #100	; 0x64
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	3332      	adds	r3, #50	; 0x32
 8006510:	4a09      	ldr	r2, [pc, #36]	; (8006538 <UART_SetConfig+0x38c>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	f003 020f 	and.w	r2, r3, #15
 800651c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4432      	add	r2, r6
 8006522:	609a      	str	r2, [r3, #8]
}
 8006524:	bf00      	nop
 8006526:	377c      	adds	r7, #124	; 0x7c
 8006528:	46bd      	mov	sp, r7
 800652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652e:	bf00      	nop
 8006530:	40011000 	.word	0x40011000
 8006534:	40011400 	.word	0x40011400
 8006538:	51eb851f 	.word	0x51eb851f

0800653c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800653c:	b084      	sub	sp, #16
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	f107 001c 	add.w	r0, r7, #28
 800654a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006552:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006554:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006556:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800655a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800655e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006562:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006566:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006576:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	b004      	add	sp, #16
 8006590:	4770      	bx	lr

08006592 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2203      	movs	r2, #3
 80065b8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80065ba:	2002      	movs	r0, #2
 80065bc:	f7fa f880 	bl	80006c0 <HAL_Delay>
  
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0303 	and.w	r3, r3, #3
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006604:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800660a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006610:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006620:	f023 030f 	bic.w	r3, r3, #15
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	b2db      	uxtb	r3, r3
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3314      	adds	r3, #20
 8006662:	461a      	mov	r2, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	4413      	add	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
}  
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80066a0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80066a6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80066ac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0

}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b088      	sub	sp, #32
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80066e0:	2310      	movs	r3, #16
 80066e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066e4:	2340      	movs	r3, #64	; 0x40
 80066e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066e8:	2300      	movs	r3, #0
 80066ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066f2:	f107 0308 	add.w	r3, r7, #8
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff ff74 	bl	80065e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80066fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006702:	2110      	movs	r1, #16
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f979 	bl	80069fc <SDMMC_GetCmdResp1>
 800670a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800670c:	69fb      	ldr	r3, [r7, #28]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3720      	adds	r7, #32
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b08a      	sub	sp, #40	; 0x28
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006726:	2307      	movs	r3, #7
 8006728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800672a:	2340      	movs	r3, #64	; 0x40
 800672c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006736:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006738:	f107 0310 	add.w	r3, r7, #16
 800673c:	4619      	mov	r1, r3
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ff51 	bl	80065e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006744:	f241 3288 	movw	r2, #5000	; 0x1388
 8006748:	2107      	movs	r1, #7
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f956 	bl	80069fc <SDMMC_GetCmdResp1>
 8006750:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006754:	4618      	mov	r0, r3
 8006756:	3728      	adds	r7, #40	; 0x28
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006768:	2300      	movs	r3, #0
 800676a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006778:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800677a:	f107 0308 	add.w	r3, r7, #8
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ff30 	bl	80065e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f90c 	bl	80069a4 <SDMMC_GetCmdError>
 800678c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800678e:	69fb      	ldr	r3, [r7, #28]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3720      	adds	r7, #32
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80067a0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80067a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80067a6:	2308      	movs	r3, #8
 80067a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067aa:	2340      	movs	r3, #64	; 0x40
 80067ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067b8:	f107 0308 	add.w	r3, r7, #8
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff ff11 	bl	80065e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fb03 	bl	8006dd0 <SDMMC_GetCmdResp7>
 80067ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067cc:	69fb      	ldr	r3, [r7, #28]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3720      	adds	r7, #32
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b088      	sub	sp, #32
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80067e4:	2337      	movs	r3, #55	; 0x37
 80067e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067e8:	2340      	movs	r3, #64	; 0x40
 80067ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067f6:	f107 0308 	add.w	r3, r7, #8
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff fef2 	bl	80065e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006802:	f241 3288 	movw	r2, #5000	; 0x1388
 8006806:	2137      	movs	r1, #55	; 0x37
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f8f7 	bl	80069fc <SDMMC_GetCmdResp1>
 800680e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006810:	69fb      	ldr	r3, [r7, #28]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b088      	sub	sp, #32
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800682a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800682e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006830:	2329      	movs	r3, #41	; 0x29
 8006832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006834:	2340      	movs	r3, #64	; 0x40
 8006836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800683c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006840:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006842:	f107 0308 	add.w	r3, r7, #8
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff fecc 	bl	80065e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fa0a 	bl	8006c68 <SDMMC_GetCmdResp3>
 8006854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006856:	69fb      	ldr	r3, [r7, #28]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3720      	adds	r7, #32
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800686e:	2306      	movs	r3, #6
 8006870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006872:	2340      	movs	r3, #64	; 0x40
 8006874:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006876:	2300      	movs	r3, #0
 8006878:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800687a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800687e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006880:	f107 0308 	add.w	r3, r7, #8
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff fead 	bl	80065e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800688c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006890:	2106      	movs	r1, #6
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f8b2 	bl	80069fc <SDMMC_GetCmdResp1>
 8006898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800689a:	69fb      	ldr	r3, [r7, #28]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3720      	adds	r7, #32
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80068b0:	2333      	movs	r3, #51	; 0x33
 80068b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068b4:	2340      	movs	r3, #64	; 0x40
 80068b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068b8:	2300      	movs	r3, #0
 80068ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068c2:	f107 0308 	add.w	r3, r7, #8
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff fe8c 	bl	80065e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80068ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d2:	2133      	movs	r1, #51	; 0x33
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f891 	bl	80069fc <SDMMC_GetCmdResp1>
 80068da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068dc:	69fb      	ldr	r3, [r7, #28]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b088      	sub	sp, #32
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80068f2:	2302      	movs	r3, #2
 80068f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80068f6:	23c0      	movs	r3, #192	; 0xc0
 80068f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068fa:	2300      	movs	r3, #0
 80068fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006902:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006904:	f107 0308 	add.w	r3, r7, #8
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fe6b 	bl	80065e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f961 	bl	8006bd8 <SDMMC_GetCmdResp2>
 8006916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006918:	69fb      	ldr	r3, [r7, #28]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b088      	sub	sp, #32
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006930:	2309      	movs	r3, #9
 8006932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006934:	23c0      	movs	r3, #192	; 0xc0
 8006936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800693c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006940:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006942:	f107 0308 	add.w	r3, r7, #8
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff fe4c 	bl	80065e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f942 	bl	8006bd8 <SDMMC_GetCmdResp2>
 8006954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006956:	69fb      	ldr	r3, [r7, #28]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3720      	adds	r7, #32
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800696e:	2303      	movs	r3, #3
 8006970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006972:	2340      	movs	r3, #64	; 0x40
 8006974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800697a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800697e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006980:	f107 0308 	add.w	r3, r7, #8
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff fe2d 	bl	80065e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	2103      	movs	r1, #3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f9a7 	bl	8006ce4 <SDMMC_GetCmdResp6>
 8006996:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006998:	69fb      	ldr	r3, [r7, #28]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3720      	adds	r7, #32
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80069ac:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <SDMMC_GetCmdError+0x50>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a11      	ldr	r2, [pc, #68]	; (80069f8 <SDMMC_GetCmdError+0x54>)
 80069b2:	fba2 2303 	umull	r2, r3, r2, r3
 80069b6:	0a5b      	lsrs	r3, r3, #9
 80069b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069bc:	fb02 f303 	mul.w	r3, r2, r3
 80069c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1e5a      	subs	r2, r3, #1
 80069c6:	60fa      	str	r2, [r7, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d102      	bne.n	80069d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80069cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80069d0:	e009      	b.n	80069e6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0f1      	beq.n	80069c2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	22c5      	movs	r2, #197	; 0xc5
 80069e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000118 	.word	0x20000118
 80069f8:	10624dd3 	.word	0x10624dd3

080069fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b088      	sub	sp, #32
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	460b      	mov	r3, r1
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a0a:	4b70      	ldr	r3, [pc, #448]	; (8006bcc <SDMMC_GetCmdResp1+0x1d0>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a70      	ldr	r2, [pc, #448]	; (8006bd0 <SDMMC_GetCmdResp1+0x1d4>)
 8006a10:	fba2 2303 	umull	r2, r3, r2, r3
 8006a14:	0a5a      	lsrs	r2, r3, #9
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	fb02 f303 	mul.w	r3, r2, r3
 8006a1c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	1e5a      	subs	r2, r3, #1
 8006a22:	61fa      	str	r2, [r7, #28]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d102      	bne.n	8006a2e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a2c:	e0c9      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a32:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0ef      	beq.n	8006a1e <SDMMC_GetCmdResp1+0x22>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1ea      	bne.n	8006a1e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d004      	beq.n	8006a5e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2204      	movs	r2, #4
 8006a58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a5a:	2304      	movs	r3, #4
 8006a5c:	e0b1      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0a6      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	22c5      	movs	r2, #197	; 0xc5
 8006a78:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7ff fddd 	bl	800663a <SDIO_GetCommandResponse>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	7afb      	ldrb	r3, [r7, #11]
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d001      	beq.n	8006a8e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e099      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006a8e:	2100      	movs	r1, #0
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f7ff fddf 	bl	8006654 <SDIO_GetResponse>
 8006a96:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4b4e      	ldr	r3, [pc, #312]	; (8006bd4 <SDMMC_GetCmdResp1+0x1d8>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e08d      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	da02      	bge.n	8006ab2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006aac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ab0:	e087      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006abc:	2340      	movs	r3, #64	; 0x40
 8006abe:	e080      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006aca:	2380      	movs	r3, #128	; 0x80
 8006acc:	e079      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006adc:	e071      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aec:	e069      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006afc:	e061      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006b08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b0c:	e059      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b1c:	e051      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b2c:	e049      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006b38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b3c:	e041      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b4c:	e039      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b5c:	e031      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006b68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006b6c:	e029      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006b78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b7c:	e021      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006b88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b8c:	e019      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006b98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006b9c:	e011      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006ba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006bac:	e009      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006bb8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006bbc:	e001      	b.n	8006bc2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006bbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20000118 	.word	0x20000118
 8006bd0:	10624dd3 	.word	0x10624dd3
 8006bd4:	fdffe008 	.word	0xfdffe008

08006bd8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006be0:	4b1f      	ldr	r3, [pc, #124]	; (8006c60 <SDMMC_GetCmdResp2+0x88>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <SDMMC_GetCmdResp2+0x8c>)
 8006be6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bea:	0a5b      	lsrs	r3, r3, #9
 8006bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf0:	fb02 f303 	mul.w	r3, r2, r3
 8006bf4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	1e5a      	subs	r2, r3, #1
 8006bfa:	60fa      	str	r2, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d102      	bne.n	8006c06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c04:	e026      	b.n	8006c54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0ef      	beq.n	8006bf6 <SDMMC_GetCmdResp2+0x1e>
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1ea      	bne.n	8006bf6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d004      	beq.n	8006c36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2204      	movs	r2, #4
 8006c30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c32:	2304      	movs	r3, #4
 8006c34:	e00e      	b.n	8006c54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e003      	b.n	8006c54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	22c5      	movs	r2, #197	; 0xc5
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	20000118 	.word	0x20000118
 8006c64:	10624dd3 	.word	0x10624dd3

08006c68 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c70:	4b1a      	ldr	r3, [pc, #104]	; (8006cdc <SDMMC_GetCmdResp3+0x74>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1a      	ldr	r2, [pc, #104]	; (8006ce0 <SDMMC_GetCmdResp3+0x78>)
 8006c76:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7a:	0a5b      	lsrs	r3, r3, #9
 8006c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c80:	fb02 f303 	mul.w	r3, r2, r3
 8006c84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	1e5a      	subs	r2, r3, #1
 8006c8a:	60fa      	str	r2, [r7, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c94:	e01b      	b.n	8006cce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0ef      	beq.n	8006c86 <SDMMC_GetCmdResp3+0x1e>
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1ea      	bne.n	8006c86 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d004      	beq.n	8006cc6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006cc2:	2304      	movs	r3, #4
 8006cc4:	e003      	b.n	8006cce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	22c5      	movs	r2, #197	; 0xc5
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	20000118 	.word	0x20000118
 8006ce0:	10624dd3 	.word	0x10624dd3

08006ce4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	460b      	mov	r3, r1
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cf2:	4b35      	ldr	r3, [pc, #212]	; (8006dc8 <SDMMC_GetCmdResp6+0xe4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a35      	ldr	r2, [pc, #212]	; (8006dcc <SDMMC_GetCmdResp6+0xe8>)
 8006cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfc:	0a5b      	lsrs	r3, r3, #9
 8006cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d02:	fb02 f303 	mul.w	r3, r2, r3
 8006d06:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	1e5a      	subs	r2, r3, #1
 8006d0c:	61fa      	str	r2, [r7, #28]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d16:	e052      	b.n	8006dbe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0ef      	beq.n	8006d08 <SDMMC_GetCmdResp6+0x24>
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1ea      	bne.n	8006d08 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d004      	beq.n	8006d48 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2204      	movs	r2, #4
 8006d42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d44:	2304      	movs	r3, #4
 8006d46:	e03a      	b.n	8006dbe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d004      	beq.n	8006d5e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e02f      	b.n	8006dbe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f7ff fc6b 	bl	800663a <SDIO_GetCommandResponse>
 8006d64:	4603      	mov	r3, r0
 8006d66:	461a      	mov	r2, r3
 8006d68:	7afb      	ldrb	r3, [r7, #11]
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d001      	beq.n	8006d72 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e025      	b.n	8006dbe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	22c5      	movs	r2, #197	; 0xc5
 8006d76:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006d78:	2100      	movs	r1, #0
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7ff fc6a 	bl	8006654 <SDIO_GetResponse>
 8006d80:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	0c1b      	lsrs	r3, r3, #16
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e011      	b.n	8006dbe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006da8:	e009      	b.n	8006dbe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006db8:	e001      	b.n	8006dbe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006dba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000118 	.word	0x20000118
 8006dcc:	10624dd3 	.word	0x10624dd3

08006dd0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006dd8:	4b22      	ldr	r3, [pc, #136]	; (8006e64 <SDMMC_GetCmdResp7+0x94>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a22      	ldr	r2, [pc, #136]	; (8006e68 <SDMMC_GetCmdResp7+0x98>)
 8006dde:	fba2 2303 	umull	r2, r3, r2, r3
 8006de2:	0a5b      	lsrs	r3, r3, #9
 8006de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de8:	fb02 f303 	mul.w	r3, r2, r3
 8006dec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	1e5a      	subs	r2, r3, #1
 8006df2:	60fa      	str	r2, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d102      	bne.n	8006dfe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006df8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006dfc:	e02c      	b.n	8006e58 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0ef      	beq.n	8006dee <SDMMC_GetCmdResp7+0x1e>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1ea      	bne.n	8006dee <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2204      	movs	r2, #4
 8006e28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e2a:	2304      	movs	r3, #4
 8006e2c:	e014      	b.n	8006e58 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d004      	beq.n	8006e44 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e009      	b.n	8006e58 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2240      	movs	r2, #64	; 0x40
 8006e54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006e56:	2300      	movs	r3, #0
  
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	20000118 	.word	0x20000118
 8006e68:	10624dd3 	.word	0x10624dd3

08006e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	f107 001c 	add.w	r0, r7, #28
 8006e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d122      	bne.n	8006eca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d105      	bne.n	8006ebe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 fb1c 	bl	80084fc <USB_CoreReset>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]
 8006ec8:	e01a      	b.n	8006f00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fb10 	bl	80084fc <USB_CoreReset>
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8006ef2:	e005      	b.n	8006f00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d10b      	bne.n	8006f1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f043 0206 	orr.w	r2, r3, #6
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f043 0220 	orr.w	r2, r3, #32
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f2a:	b004      	add	sp, #16
 8006f2c:	4770      	bx	lr
	...

08006f30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d165      	bne.n	8007010 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4a41      	ldr	r2, [pc, #260]	; (800704c <USB_SetTurnaroundTime+0x11c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d906      	bls.n	8006f5a <USB_SetTurnaroundTime+0x2a>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4a40      	ldr	r2, [pc, #256]	; (8007050 <USB_SetTurnaroundTime+0x120>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d202      	bcs.n	8006f5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f54:	230f      	movs	r3, #15
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	e062      	b.n	8007020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4a3c      	ldr	r2, [pc, #240]	; (8007050 <USB_SetTurnaroundTime+0x120>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d306      	bcc.n	8006f70 <USB_SetTurnaroundTime+0x40>
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4a3b      	ldr	r2, [pc, #236]	; (8007054 <USB_SetTurnaroundTime+0x124>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d202      	bcs.n	8006f70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f6a:	230e      	movs	r3, #14
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	e057      	b.n	8007020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4a38      	ldr	r2, [pc, #224]	; (8007054 <USB_SetTurnaroundTime+0x124>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d306      	bcc.n	8006f86 <USB_SetTurnaroundTime+0x56>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4a37      	ldr	r2, [pc, #220]	; (8007058 <USB_SetTurnaroundTime+0x128>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d202      	bcs.n	8006f86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f80:	230d      	movs	r3, #13
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	e04c      	b.n	8007020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4a33      	ldr	r2, [pc, #204]	; (8007058 <USB_SetTurnaroundTime+0x128>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d306      	bcc.n	8006f9c <USB_SetTurnaroundTime+0x6c>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4a32      	ldr	r2, [pc, #200]	; (800705c <USB_SetTurnaroundTime+0x12c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d802      	bhi.n	8006f9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f96:	230c      	movs	r3, #12
 8006f98:	617b      	str	r3, [r7, #20]
 8006f9a:	e041      	b.n	8007020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4a2f      	ldr	r2, [pc, #188]	; (800705c <USB_SetTurnaroundTime+0x12c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d906      	bls.n	8006fb2 <USB_SetTurnaroundTime+0x82>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4a2e      	ldr	r2, [pc, #184]	; (8007060 <USB_SetTurnaroundTime+0x130>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d802      	bhi.n	8006fb2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fac:	230b      	movs	r3, #11
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	e036      	b.n	8007020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4a2a      	ldr	r2, [pc, #168]	; (8007060 <USB_SetTurnaroundTime+0x130>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d906      	bls.n	8006fc8 <USB_SetTurnaroundTime+0x98>
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4a29      	ldr	r2, [pc, #164]	; (8007064 <USB_SetTurnaroundTime+0x134>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d802      	bhi.n	8006fc8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fc2:	230a      	movs	r3, #10
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	e02b      	b.n	8007020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4a26      	ldr	r2, [pc, #152]	; (8007064 <USB_SetTurnaroundTime+0x134>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d906      	bls.n	8006fde <USB_SetTurnaroundTime+0xae>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4a25      	ldr	r2, [pc, #148]	; (8007068 <USB_SetTurnaroundTime+0x138>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d202      	bcs.n	8006fde <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fd8:	2309      	movs	r3, #9
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e020      	b.n	8007020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4a21      	ldr	r2, [pc, #132]	; (8007068 <USB_SetTurnaroundTime+0x138>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d306      	bcc.n	8006ff4 <USB_SetTurnaroundTime+0xc4>
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4a20      	ldr	r2, [pc, #128]	; (800706c <USB_SetTurnaroundTime+0x13c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d802      	bhi.n	8006ff4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006fee:	2308      	movs	r3, #8
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	e015      	b.n	8007020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4a1d      	ldr	r2, [pc, #116]	; (800706c <USB_SetTurnaroundTime+0x13c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d906      	bls.n	800700a <USB_SetTurnaroundTime+0xda>
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4a1c      	ldr	r2, [pc, #112]	; (8007070 <USB_SetTurnaroundTime+0x140>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d202      	bcs.n	800700a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007004:	2307      	movs	r3, #7
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	e00a      	b.n	8007020 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800700a:	2306      	movs	r3, #6
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e007      	b.n	8007020 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d102      	bne.n	800701c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007016:	2309      	movs	r3, #9
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	e001      	b.n	8007020 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800701c:	2309      	movs	r3, #9
 800701e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	029b      	lsls	r3, r3, #10
 8007034:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007038:	431a      	orrs	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	00d8acbf 	.word	0x00d8acbf
 8007050:	00e4e1c0 	.word	0x00e4e1c0
 8007054:	00f42400 	.word	0x00f42400
 8007058:	01067380 	.word	0x01067380
 800705c:	011a499f 	.word	0x011a499f
 8007060:	01312cff 	.word	0x01312cff
 8007064:	014ca43f 	.word	0x014ca43f
 8007068:	016e3600 	.word	0x016e3600
 800706c:	01a6ab1f 	.word	0x01a6ab1f
 8007070:	01e84800 	.word	0x01e84800

08007074 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f043 0201 	orr.w	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f023 0201 	bic.w	r2, r3, #1
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d115      	bne.n	8007106 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070e6:	2001      	movs	r0, #1
 80070e8:	f7f9 faea 	bl	80006c0 <HAL_Delay>
      ms++;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3301      	adds	r3, #1
 80070f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f001 f972 	bl	80083dc <USB_GetMode>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d01e      	beq.n	800713c <USB_SetCurrentMode+0x84>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b31      	cmp	r3, #49	; 0x31
 8007102:	d9f0      	bls.n	80070e6 <USB_SetCurrentMode+0x2e>
 8007104:	e01a      	b.n	800713c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007106:	78fb      	ldrb	r3, [r7, #3]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d115      	bne.n	8007138 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007118:	2001      	movs	r0, #1
 800711a:	f7f9 fad1 	bl	80006c0 <HAL_Delay>
      ms++;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 f959 	bl	80083dc <USB_GetMode>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <USB_SetCurrentMode+0x84>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b31      	cmp	r3, #49	; 0x31
 8007134:	d9f0      	bls.n	8007118 <USB_SetCurrentMode+0x60>
 8007136:	e001      	b.n	800713c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e005      	b.n	8007148 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b32      	cmp	r3, #50	; 0x32
 8007140:	d101      	bne.n	8007146 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007150:	b084      	sub	sp, #16
 8007152:	b580      	push	{r7, lr}
 8007154:	b086      	sub	sp, #24
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800715e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800716a:	2300      	movs	r3, #0
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	e009      	b.n	8007184 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	3340      	adds	r3, #64	; 0x40
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	2200      	movs	r2, #0
 800717c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	3301      	adds	r3, #1
 8007182:	613b      	str	r3, [r7, #16]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	2b0e      	cmp	r3, #14
 8007188:	d9f2      	bls.n	8007170 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800718a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d11c      	bne.n	80071ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800719e:	f043 0302 	orr.w	r3, r3, #2
 80071a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38
 80071c8:	e00b      	b.n	80071e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071e8:	461a      	mov	r2, r3
 80071ea:	2300      	movs	r3, #0
 80071ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f4:	4619      	mov	r1, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fc:	461a      	mov	r2, r3
 80071fe:	680b      	ldr	r3, [r1, #0]
 8007200:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	2b01      	cmp	r3, #1
 8007206:	d10c      	bne.n	8007222 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	2b00      	cmp	r3, #0
 800720c:	d104      	bne.n	8007218 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800720e:	2100      	movs	r1, #0
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f945 	bl	80074a0 <USB_SetDevSpeed>
 8007216:	e008      	b.n	800722a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007218:	2101      	movs	r1, #1
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f940 	bl	80074a0 <USB_SetDevSpeed>
 8007220:	e003      	b.n	800722a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007222:	2103      	movs	r1, #3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f93b 	bl	80074a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800722a:	2110      	movs	r1, #16
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f8f3 	bl	8007418 <USB_FlushTxFifo>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f90f 	bl	8007460 <USB_FlushRxFifo>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007252:	461a      	mov	r2, r3
 8007254:	2300      	movs	r3, #0
 8007256:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725e:	461a      	mov	r2, r3
 8007260:	2300      	movs	r3, #0
 8007262:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726a:	461a      	mov	r2, r3
 800726c:	2300      	movs	r3, #0
 800726e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007270:	2300      	movs	r3, #0
 8007272:	613b      	str	r3, [r7, #16]
 8007274:	e043      	b.n	80072fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007288:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800728c:	d118      	bne.n	80072c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a0:	461a      	mov	r2, r3
 80072a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	e013      	b.n	80072d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b6:	461a      	mov	r2, r3
 80072b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	e008      	b.n	80072d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072cc:	461a      	mov	r2, r3
 80072ce:	2300      	movs	r3, #0
 80072d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072de:	461a      	mov	r2, r3
 80072e0:	2300      	movs	r3, #0
 80072e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f0:	461a      	mov	r2, r3
 80072f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	3301      	adds	r3, #1
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	429a      	cmp	r2, r3
 8007304:	d3b7      	bcc.n	8007276 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007306:	2300      	movs	r3, #0
 8007308:	613b      	str	r3, [r7, #16]
 800730a:	e043      	b.n	8007394 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800731e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007322:	d118      	bne.n	8007356 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007336:	461a      	mov	r2, r3
 8007338:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	e013      	b.n	8007368 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734c:	461a      	mov	r2, r3
 800734e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	e008      	b.n	8007368 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007362:	461a      	mov	r2, r3
 8007364:	2300      	movs	r3, #0
 8007366:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007374:	461a      	mov	r2, r3
 8007376:	2300      	movs	r3, #0
 8007378:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007386:	461a      	mov	r2, r3
 8007388:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800738c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	3301      	adds	r3, #1
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	429a      	cmp	r2, r3
 800739a:	d3b7      	bcc.n	800730c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d105      	bne.n	80073d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	f043 0210 	orr.w	r2, r3, #16
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699a      	ldr	r2, [r3, #24]
 80073d4:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <USB_DevInit+0x2c4>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d005      	beq.n	80073ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f043 0208 	orr.w	r2, r3, #8
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d107      	bne.n	8007404 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073fc:	f043 0304 	orr.w	r3, r3, #4
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007410:	b004      	add	sp, #16
 8007412:	4770      	bx	lr
 8007414:	803c3800 	.word	0x803c3800

08007418 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	019b      	lsls	r3, r3, #6
 800742a:	f043 0220 	orr.w	r2, r3, #32
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3301      	adds	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	4a08      	ldr	r2, [pc, #32]	; (800745c <USB_FlushTxFifo+0x44>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d901      	bls.n	8007442 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e006      	b.n	8007450 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b20      	cmp	r3, #32
 800744c:	d0f1      	beq.n	8007432 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	00030d40 	.word	0x00030d40

08007460 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007468:	2300      	movs	r3, #0
 800746a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2210      	movs	r2, #16
 8007470:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3301      	adds	r3, #1
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	4a08      	ldr	r2, [pc, #32]	; (800749c <USB_FlushRxFifo+0x3c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d901      	bls.n	8007482 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e006      	b.n	8007490 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f003 0310 	and.w	r3, r3, #16
 800748a:	2b10      	cmp	r3, #16
 800748c:	d0f1      	beq.n	8007472 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	00030d40 	.word	0x00030d40

080074a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	68f9      	ldr	r1, [r7, #12]
 80074bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074c0:	4313      	orrs	r3, r2
 80074c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b087      	sub	sp, #28
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 0306 	and.w	r3, r3, #6
 80074ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d102      	bne.n	80074f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80074f2:	2300      	movs	r3, #0
 80074f4:	75fb      	strb	r3, [r7, #23]
 80074f6:	e00a      	b.n	800750e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d002      	beq.n	8007504 <USB_GetDevSpeed+0x32>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b06      	cmp	r3, #6
 8007502:	d102      	bne.n	800750a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007504:	2302      	movs	r3, #2
 8007506:	75fb      	strb	r3, [r7, #23]
 8007508:	e001      	b.n	800750e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800750a:	230f      	movs	r3, #15
 800750c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800750e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007510:	4618      	mov	r0, r3
 8007512:	371c      	adds	r7, #28
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d13a      	bne.n	80075ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753e:	69da      	ldr	r2, [r3, #28]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	2101      	movs	r1, #1
 800754a:	fa01 f303 	lsl.w	r3, r1, r3
 800754e:	b29b      	uxth	r3, r3
 8007550:	68f9      	ldr	r1, [r7, #12]
 8007552:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007556:	4313      	orrs	r3, r2
 8007558:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d155      	bne.n	800761c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	78db      	ldrb	r3, [r3, #3]
 800758a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800758c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	059b      	lsls	r3, r3, #22
 8007592:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007594:	4313      	orrs	r3, r2
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	0151      	lsls	r1, r2, #5
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	440a      	add	r2, r1
 800759e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	e036      	b.n	800761c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b4:	69da      	ldr	r2, [r3, #28]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	2101      	movs	r1, #1
 80075c0:	fa01 f303 	lsl.w	r3, r1, r3
 80075c4:	041b      	lsls	r3, r3, #16
 80075c6:	68f9      	ldr	r1, [r7, #12]
 80075c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075cc:	4313      	orrs	r3, r2
 80075ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d11a      	bne.n	800761c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	78db      	ldrb	r3, [r3, #3]
 8007600:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007602:	430b      	orrs	r3, r1
 8007604:	4313      	orrs	r3, r2
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	0151      	lsls	r1, r2, #5
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	440a      	add	r2, r1
 800760e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
	...

0800762c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d161      	bne.n	800770c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800765a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800765e:	d11f      	bne.n	80076a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	0151      	lsls	r1, r2, #5
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	440a      	add	r2, r1
 8007676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800767e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	440a      	add	r2, r1
 8007696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800769e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	2101      	movs	r1, #1
 80076b2:	fa01 f303 	lsl.w	r3, r1, r3
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	43db      	mvns	r3, r3
 80076ba:	68f9      	ldr	r1, [r7, #12]
 80076bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076c0:	4013      	ands	r3, r2
 80076c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	2101      	movs	r1, #1
 80076d6:	fa01 f303 	lsl.w	r3, r1, r3
 80076da:	b29b      	uxth	r3, r3
 80076dc:	43db      	mvns	r3, r3
 80076de:	68f9      	ldr	r1, [r7, #12]
 80076e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076e4:	4013      	ands	r3, r2
 80076e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	0159      	lsls	r1, r3, #5
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	440b      	add	r3, r1
 80076fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007702:	4619      	mov	r1, r3
 8007704:	4b35      	ldr	r3, [pc, #212]	; (80077dc <USB_DeactivateEndpoint+0x1b0>)
 8007706:	4013      	ands	r3, r2
 8007708:	600b      	str	r3, [r1, #0]
 800770a:	e060      	b.n	80077ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800771e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007722:	d11f      	bne.n	8007764 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	0151      	lsls	r1, r2, #5
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	440a      	add	r2, r1
 800773a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007742:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	0151      	lsls	r1, r2, #5
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	440a      	add	r2, r1
 800775a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007762:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	2101      	movs	r1, #1
 8007776:	fa01 f303 	lsl.w	r3, r1, r3
 800777a:	041b      	lsls	r3, r3, #16
 800777c:	43db      	mvns	r3, r3
 800777e:	68f9      	ldr	r1, [r7, #12]
 8007780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007784:	4013      	ands	r3, r2
 8007786:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	2101      	movs	r1, #1
 800779a:	fa01 f303 	lsl.w	r3, r1, r3
 800779e:	041b      	lsls	r3, r3, #16
 80077a0:	43db      	mvns	r3, r3
 80077a2:	68f9      	ldr	r1, [r7, #12]
 80077a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077a8:	4013      	ands	r3, r2
 80077aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	0159      	lsls	r1, r3, #5
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	440b      	add	r3, r1
 80077c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c6:	4619      	mov	r1, r3
 80077c8:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <USB_DeactivateEndpoint+0x1b4>)
 80077ca:	4013      	ands	r3, r2
 80077cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	ec337800 	.word	0xec337800
 80077e0:	eff37800 	.word	0xeff37800

080077e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08a      	sub	sp, #40	; 0x28
 80077e8:	af02      	add	r7, sp, #8
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	785b      	ldrb	r3, [r3, #1]
 8007800:	2b01      	cmp	r3, #1
 8007802:	f040 815c 	bne.w	8007abe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d132      	bne.n	8007874 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	4413      	add	r3, r2
 8007816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	440a      	add	r2, r1
 8007824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007828:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800782c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007830:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800784c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007850:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	0151      	lsls	r1, r2, #5
 8007864:	69fa      	ldr	r2, [r7, #28]
 8007866:	440a      	add	r2, r1
 8007868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800786c:	0cdb      	lsrs	r3, r3, #19
 800786e:	04db      	lsls	r3, r3, #19
 8007870:	6113      	str	r3, [r2, #16]
 8007872:	e074      	b.n	800795e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	0151      	lsls	r1, r2, #5
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	440a      	add	r2, r1
 800788a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800788e:	0cdb      	lsrs	r3, r3, #19
 8007890:	04db      	lsls	r3, r3, #19
 8007892:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	0151      	lsls	r1, r2, #5
 80078a6:	69fa      	ldr	r2, [r7, #28]
 80078a8:	440a      	add	r2, r1
 80078aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	6959      	ldr	r1, [r3, #20]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	440b      	add	r3, r1
 80078d0:	1e59      	subs	r1, r3, #1
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80078da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078dc:	4b9d      	ldr	r3, [pc, #628]	; (8007b54 <USB_EPStartXfer+0x370>)
 80078de:	400b      	ands	r3, r1
 80078e0:	69b9      	ldr	r1, [r7, #24]
 80078e2:	0148      	lsls	r0, r1, #5
 80078e4:	69f9      	ldr	r1, [r7, #28]
 80078e6:	4401      	add	r1, r0
 80078e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078ec:	4313      	orrs	r3, r2
 80078ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fc:	691a      	ldr	r2, [r3, #16]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007906:	69b9      	ldr	r1, [r7, #24]
 8007908:	0148      	lsls	r0, r1, #5
 800790a:	69f9      	ldr	r1, [r7, #28]
 800790c:	4401      	add	r1, r0
 800790e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007912:	4313      	orrs	r3, r2
 8007914:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	78db      	ldrb	r3, [r3, #3]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d11f      	bne.n	800795e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	0151      	lsls	r1, r2, #5
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	440a      	add	r2, r1
 8007934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007938:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800793c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	0151      	lsls	r1, r2, #5
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	440a      	add	r2, r1
 8007954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800795c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d14b      	bne.n	80079fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d009      	beq.n	8007980 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007978:	461a      	mov	r2, r3
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	78db      	ldrb	r3, [r3, #3]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d128      	bne.n	80079da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007994:	2b00      	cmp	r3, #0
 8007996:	d110      	bne.n	80079ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	0151      	lsls	r1, r2, #5
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	440a      	add	r2, r1
 80079ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	e00f      	b.n	80079da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	0151      	lsls	r1, r2, #5
 80079cc:	69fa      	ldr	r2, [r7, #28]
 80079ce:	440a      	add	r2, r1
 80079d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	0151      	lsls	r1, r2, #5
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	440a      	add	r2, r1
 80079f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079f8:	6013      	str	r3, [r2, #0]
 80079fa:	e12f      	b.n	8007c5c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	0151      	lsls	r1, r2, #5
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	440a      	add	r2, r1
 8007a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	78db      	ldrb	r3, [r3, #3]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d015      	beq.n	8007a50 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 8117 	beq.w	8007c5c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	2101      	movs	r1, #1
 8007a40:	fa01 f303 	lsl.w	r3, r1, r3
 8007a44:	69f9      	ldr	r1, [r7, #28]
 8007a46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	634b      	str	r3, [r1, #52]	; 0x34
 8007a4e:	e105      	b.n	8007c5c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d110      	bne.n	8007a82 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	0151      	lsls	r1, r2, #5
 8007a72:	69fa      	ldr	r2, [r7, #28]
 8007a74:	440a      	add	r2, r1
 8007a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	e00f      	b.n	8007aa2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	0151      	lsls	r1, r2, #5
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	440a      	add	r2, r1
 8007a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aa0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	68d9      	ldr	r1, [r3, #12]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	781a      	ldrb	r2, [r3, #0]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	b298      	uxth	r0, r3
 8007ab0:	79fb      	ldrb	r3, [r7, #7]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fa2b 	bl	8007f12 <USB_WritePacket>
 8007abc:	e0ce      	b.n	8007c5c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad8:	0cdb      	lsrs	r3, r3, #19
 8007ada:	04db      	lsls	r3, r3, #19
 8007adc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007af8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007afc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d126      	bne.n	8007b58 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b20:	69b9      	ldr	r1, [r7, #24]
 8007b22:	0148      	lsls	r0, r1, #5
 8007b24:	69f9      	ldr	r1, [r7, #28]
 8007b26:	4401      	add	r1, r0
 8007b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b4e:	6113      	str	r3, [r2, #16]
 8007b50:	e036      	b.n	8007bc0 <USB_EPStartXfer+0x3dc>
 8007b52:	bf00      	nop
 8007b54:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	695a      	ldr	r2, [r3, #20]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	4413      	add	r3, r2
 8007b62:	1e5a      	subs	r2, r3, #1
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	8afb      	ldrh	r3, [r7, #22]
 8007b7e:	04d9      	lsls	r1, r3, #19
 8007b80:	4b39      	ldr	r3, [pc, #228]	; (8007c68 <USB_EPStartXfer+0x484>)
 8007b82:	400b      	ands	r3, r1
 8007b84:	69b9      	ldr	r1, [r7, #24]
 8007b86:	0148      	lsls	r0, r1, #5
 8007b88:	69f9      	ldr	r1, [r7, #28]
 8007b8a:	4401      	add	r1, r0
 8007b8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b90:	4313      	orrs	r3, r2
 8007b92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	8af9      	ldrh	r1, [r7, #22]
 8007ba8:	fb01 f303 	mul.w	r3, r1, r3
 8007bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bb0:	69b9      	ldr	r1, [r7, #24]
 8007bb2:	0148      	lsls	r0, r1, #5
 8007bb4:	69f9      	ldr	r1, [r7, #28]
 8007bb6:	4401      	add	r1, r0
 8007bb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d10d      	bne.n	8007be2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	68d9      	ldr	r1, [r3, #12]
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	460a      	mov	r2, r1
 8007be0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	78db      	ldrb	r3, [r3, #3]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d128      	bne.n	8007c3c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d110      	bne.n	8007c1c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	0151      	lsls	r1, r2, #5
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	440a      	add	r2, r1
 8007c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e00f      	b.n	8007c3c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	0151      	lsls	r1, r2, #5
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	440a      	add	r2, r1
 8007c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69ba      	ldr	r2, [r7, #24]
 8007c4c:	0151      	lsls	r1, r2, #5
 8007c4e:	69fa      	ldr	r2, [r7, #28]
 8007c50:	440a      	add	r2, r1
 8007c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3720      	adds	r7, #32
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	1ff80000 	.word	0x1ff80000

08007c6c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	4613      	mov	r3, r2
 8007c78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	785b      	ldrb	r3, [r3, #1]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	f040 80cd 	bne.w	8007e28 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d132      	bne.n	8007cfc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	0151      	lsls	r1, r2, #5
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	440a      	add	r2, r1
 8007cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	0151      	lsls	r1, r2, #5
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	440a      	add	r2, r1
 8007cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	0151      	lsls	r1, r2, #5
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	440a      	add	r2, r1
 8007cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf4:	0cdb      	lsrs	r3, r3, #19
 8007cf6:	04db      	lsls	r3, r3, #19
 8007cf8:	6113      	str	r3, [r2, #16]
 8007cfa:	e04e      	b.n	8007d9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	0151      	lsls	r1, r2, #5
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	440a      	add	r2, r1
 8007d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d16:	0cdb      	lsrs	r3, r3, #19
 8007d18:	04db      	lsls	r3, r3, #19
 8007d1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	015a      	lsls	r2, r3, #5
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	4413      	add	r3, r2
 8007d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	0151      	lsls	r1, r2, #5
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	440a      	add	r2, r1
 8007d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d3e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	695a      	ldr	r2, [r3, #20]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d903      	bls.n	8007d54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	0151      	lsls	r1, r2, #5
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	440a      	add	r2, r1
 8007d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d80:	691a      	ldr	r2, [r3, #16]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d8a:	6939      	ldr	r1, [r7, #16]
 8007d8c:	0148      	lsls	r0, r1, #5
 8007d8e:	6979      	ldr	r1, [r7, #20]
 8007d90:	4401      	add	r1, r0
 8007d92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d96:	4313      	orrs	r3, r2
 8007d98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d11e      	bne.n	8007dde <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d009      	beq.n	8007dbc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db4:	461a      	mov	r2, r3
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	0151      	lsls	r1, r2, #5
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	440a      	add	r2, r1
 8007dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dda:	6013      	str	r3, [r2, #0]
 8007ddc:	e092      	b.n	8007f04 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	0151      	lsls	r1, r2, #5
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	440a      	add	r2, r1
 8007df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dfc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d07e      	beq.n	8007f04 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f003 030f 	and.w	r3, r3, #15
 8007e16:	2101      	movs	r1, #1
 8007e18:	fa01 f303 	lsl.w	r3, r1, r3
 8007e1c:	6979      	ldr	r1, [r7, #20]
 8007e1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e22:	4313      	orrs	r3, r2
 8007e24:	634b      	str	r3, [r1, #52]	; 0x34
 8007e26:	e06d      	b.n	8007f04 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	0151      	lsls	r1, r2, #5
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	440a      	add	r2, r1
 8007e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e42:	0cdb      	lsrs	r3, r3, #19
 8007e44:	04db      	lsls	r3, r3, #19
 8007e46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	0151      	lsls	r1, r2, #5
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e6a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	0151      	lsls	r1, r2, #5
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	440a      	add	r2, r1
 8007e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea8:	691a      	ldr	r2, [r3, #16]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eb2:	6939      	ldr	r1, [r7, #16]
 8007eb4:	0148      	lsls	r0, r1, #5
 8007eb6:	6979      	ldr	r1, [r7, #20]
 8007eb8:	4401      	add	r1, r0
 8007eba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d10d      	bne.n	8007ee4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d009      	beq.n	8007ee4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	68d9      	ldr	r1, [r3, #12]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee0:	460a      	mov	r2, r1
 8007ee2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	0151      	lsls	r1, r2, #5
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	440a      	add	r2, r1
 8007efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b089      	sub	sp, #36	; 0x24
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	60b9      	str	r1, [r7, #8]
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	461a      	mov	r2, r3
 8007f20:	460b      	mov	r3, r1
 8007f22:	71fb      	strb	r3, [r7, #7]
 8007f24:	4613      	mov	r3, r2
 8007f26:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d123      	bne.n	8007f80 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f38:	88bb      	ldrh	r3, [r7, #4]
 8007f3a:	3303      	adds	r3, #3
 8007f3c:	089b      	lsrs	r3, r3, #2
 8007f3e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f40:	2300      	movs	r3, #0
 8007f42:	61bb      	str	r3, [r7, #24]
 8007f44:	e018      	b.n	8007f78 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	031a      	lsls	r2, r3, #12
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f52:	461a      	mov	r2, r3
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	3301      	adds	r3, #1
 8007f64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	3301      	adds	r3, #1
 8007f76:	61bb      	str	r3, [r7, #24]
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d3e2      	bcc.n	8007f46 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3724      	adds	r7, #36	; 0x24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b08b      	sub	sp, #44	; 0x2c
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007fa4:	88fb      	ldrh	r3, [r7, #6]
 8007fa6:	089b      	lsrs	r3, r3, #2
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	623b      	str	r3, [r7, #32]
 8007fb8:	e014      	b.n	8007fe4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	601a      	str	r2, [r3, #0]
    pDest++;
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	3301      	adds	r3, #1
 8007fca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	3301      	adds	r3, #1
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fda:	3301      	adds	r3, #1
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	623b      	str	r3, [r7, #32]
 8007fe4:	6a3a      	ldr	r2, [r7, #32]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d3e6      	bcc.n	8007fba <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007fec:	8bfb      	ldrh	r3, [r7, #30]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d01e      	beq.n	8008030 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	f107 0310 	add.w	r3, r7, #16
 8008002:	6812      	ldr	r2, [r2, #0]
 8008004:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	fa22 f303 	lsr.w	r3, r2, r3
 8008012:	b2da      	uxtb	r2, r3
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	701a      	strb	r2, [r3, #0]
      i++;
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	3301      	adds	r3, #1
 800801c:	623b      	str	r3, [r7, #32]
      pDest++;
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	3301      	adds	r3, #1
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008024:	8bfb      	ldrh	r3, [r7, #30]
 8008026:	3b01      	subs	r3, #1
 8008028:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800802a:	8bfb      	ldrh	r3, [r7, #30]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1ea      	bne.n	8008006 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008032:	4618      	mov	r0, r3
 8008034:	372c      	adds	r7, #44	; 0x2c
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800803e:	b480      	push	{r7}
 8008040:	b085      	sub	sp, #20
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	785b      	ldrb	r3, [r3, #1]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d12c      	bne.n	80080b4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	db12      	blt.n	8008092 <USB_EPSetStall+0x54>
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00f      	beq.n	8008092 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	0151      	lsls	r1, r2, #5
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	440a      	add	r2, r1
 8008088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008090:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	0151      	lsls	r1, r2, #5
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	440a      	add	r2, r1
 80080a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080b0:	6013      	str	r3, [r2, #0]
 80080b2:	e02b      	b.n	800810c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	db12      	blt.n	80080ec <USB_EPSetStall+0xae>
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00f      	beq.n	80080ec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	0151      	lsls	r1, r2, #5
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	440a      	add	r2, r1
 80080e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080ea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	0151      	lsls	r1, r2, #5
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	440a      	add	r2, r1
 8008102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008106:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800810a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	785b      	ldrb	r3, [r3, #1]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d128      	bne.n	8008188 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	015a      	lsls	r2, r3, #5
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4413      	add	r3, r2
 800813e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	0151      	lsls	r1, r2, #5
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	440a      	add	r2, r1
 800814c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008150:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008154:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	78db      	ldrb	r3, [r3, #3]
 800815a:	2b03      	cmp	r3, #3
 800815c:	d003      	beq.n	8008166 <USB_EPClearStall+0x4c>
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	78db      	ldrb	r3, [r3, #3]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d138      	bne.n	80081d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4413      	add	r3, r2
 800816e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	0151      	lsls	r1, r2, #5
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	440a      	add	r2, r1
 800817c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	e027      	b.n	80081d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	0151      	lsls	r1, r2, #5
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	440a      	add	r2, r1
 800819e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	78db      	ldrb	r3, [r3, #3]
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d003      	beq.n	80081b8 <USB_EPClearStall+0x9e>
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	78db      	ldrb	r3, [r3, #3]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d10f      	bne.n	80081d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	0151      	lsls	r1, r2, #5
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	440a      	add	r2, r1
 80081ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008204:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008208:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	78fb      	ldrb	r3, [r7, #3]
 8008214:	011b      	lsls	r3, r3, #4
 8008216:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800821a:	68f9      	ldr	r1, [r7, #12]
 800821c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008220:	4313      	orrs	r3, r2
 8008222:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008232:	b480      	push	{r7}
 8008234:	b085      	sub	sp, #20
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800824c:	f023 0303 	bic.w	r3, r3, #3
 8008250:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008260:	f023 0302 	bic.w	r3, r3, #2
 8008264:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800828e:	f023 0303 	bic.w	r3, r3, #3
 8008292:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082a2:	f043 0302 	orr.w	r3, r3, #2
 80082a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b085      	sub	sp, #20
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4013      	ands	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80082ce:	68fb      	ldr	r3, [r7, #12]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	4013      	ands	r3, r2
 80082fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	0c1b      	lsrs	r3, r3, #16
}
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	4013      	ands	r3, r2
 8008332:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	b29b      	uxth	r3, r3
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	4013      	ands	r3, r2
 8008370:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008372:	68bb      	ldr	r3, [r7, #8]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	fa22 f303 	lsr.w	r3, r2, r3
 80083b0:	01db      	lsls	r3, r3, #7
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80083ba:	78fb      	ldrb	r3, [r7, #3]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	4013      	ands	r3, r2
 80083cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083ce:	68bb      	ldr	r3, [r7, #8]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	371c      	adds	r7, #28
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	f003 0301 	and.w	r3, r3, #1
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008412:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008416:	f023 0307 	bic.w	r3, r3, #7
 800841a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800842a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800842e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
	...

08008440 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	460b      	mov	r3, r1
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	333c      	adds	r3, #60	; 0x3c
 8008456:	3304      	adds	r3, #4
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4a26      	ldr	r2, [pc, #152]	; (80084f8 <USB_EP0_OutStart+0xb8>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d90a      	bls.n	800847a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008474:	d101      	bne.n	800847a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	e037      	b.n	80084ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008480:	461a      	mov	r2, r3
 8008482:	2300      	movs	r3, #0
 8008484:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008494:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008498:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a8:	f043 0318 	orr.w	r3, r3, #24
 80084ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80084c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80084c2:	7afb      	ldrb	r3, [r7, #11]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d10f      	bne.n	80084e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ce:	461a      	mov	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80084e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	4f54300a 	.word	0x4f54300a

080084fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008504:	2300      	movs	r3, #0
 8008506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	3301      	adds	r3, #1
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	4a13      	ldr	r2, [pc, #76]	; (800855c <USB_CoreReset+0x60>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d901      	bls.n	8008518 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e01a      	b.n	800854e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	daf3      	bge.n	8008508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f043 0201 	orr.w	r2, r3, #1
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3301      	adds	r3, #1
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	4a09      	ldr	r2, [pc, #36]	; (800855c <USB_CoreReset+0x60>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d901      	bls.n	8008540 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e006      	b.n	800854e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b01      	cmp	r3, #1
 800854a:	d0f1      	beq.n	8008530 <USB_CoreReset+0x34>

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	00030d40 	.word	0x00030d40

08008560 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800856c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008570:	f002 fc9a 	bl	800aea8 <USBD_static_malloc>
 8008574:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d105      	bne.n	8008588 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008584:	2302      	movs	r3, #2
 8008586:	e066      	b.n	8008656 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	7c1b      	ldrb	r3, [r3, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d119      	bne.n	80085cc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800859c:	2202      	movs	r2, #2
 800859e:	2181      	movs	r1, #129	; 0x81
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f002 fb5e 	bl	800ac62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80085ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085b0:	2202      	movs	r2, #2
 80085b2:	2101      	movs	r1, #1
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f002 fb54 	bl	800ac62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2210      	movs	r2, #16
 80085c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80085ca:	e016      	b.n	80085fa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80085cc:	2340      	movs	r3, #64	; 0x40
 80085ce:	2202      	movs	r2, #2
 80085d0:	2181      	movs	r1, #129	; 0x81
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f002 fb45 	bl	800ac62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80085de:	2340      	movs	r3, #64	; 0x40
 80085e0:	2202      	movs	r2, #2
 80085e2:	2101      	movs	r1, #1
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f002 fb3c 	bl	800ac62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2210      	movs	r2, #16
 80085f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085fa:	2308      	movs	r3, #8
 80085fc:	2203      	movs	r2, #3
 80085fe:	2182      	movs	r1, #130	; 0x82
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f002 fb2e 	bl	800ac62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	7c1b      	ldrb	r3, [r3, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d109      	bne.n	8008644 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800863a:	2101      	movs	r1, #1
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f002 fbff 	bl	800ae40 <USBD_LL_PrepareReceive>
 8008642:	e007      	b.n	8008654 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800864a:	2340      	movs	r3, #64	; 0x40
 800864c:	2101      	movs	r1, #1
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f002 fbf6 	bl	800ae40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800866a:	2181      	movs	r1, #129	; 0x81
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f002 fb1e 	bl	800acae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008678:	2101      	movs	r1, #1
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f002 fb17 	bl	800acae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008688:	2182      	movs	r1, #130	; 0x82
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f002 fb0f 	bl	800acae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00e      	beq.n	80086c8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086ba:	4618      	mov	r0, r3
 80086bc:	f002 fc02 	bl	800aec4 <USBD_static_free>
    pdev->pClassData = NULL;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e0af      	b.n	800885c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008704:	2b00      	cmp	r3, #0
 8008706:	d03f      	beq.n	8008788 <USBD_CDC_Setup+0xb4>
 8008708:	2b20      	cmp	r3, #32
 800870a:	f040 809f 	bne.w	800884c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	88db      	ldrh	r3, [r3, #6]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d02e      	beq.n	8008774 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	b25b      	sxtb	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	da16      	bge.n	800874e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800872c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	88d2      	ldrh	r2, [r2, #6]
 8008732:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	88db      	ldrh	r3, [r3, #6]
 8008738:	2b07      	cmp	r3, #7
 800873a:	bf28      	it	cs
 800873c:	2307      	movcs	r3, #7
 800873e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	89fa      	ldrh	r2, [r7, #14]
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f001 fae9 	bl	8009d1e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800874c:	e085      	b.n	800885a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	785a      	ldrb	r2, [r3, #1]
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	88db      	ldrh	r3, [r3, #6]
 800875c:	b2da      	uxtb	r2, r3
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008764:	6939      	ldr	r1, [r7, #16]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	88db      	ldrh	r3, [r3, #6]
 800876a:	461a      	mov	r2, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 fb02 	bl	8009d76 <USBD_CtlPrepareRx>
      break;
 8008772:	e072      	b.n	800885a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	7850      	ldrb	r0, [r2, #1]
 8008780:	2200      	movs	r2, #0
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	4798      	blx	r3
      break;
 8008786:	e068      	b.n	800885a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	785b      	ldrb	r3, [r3, #1]
 800878c:	2b0b      	cmp	r3, #11
 800878e:	d852      	bhi.n	8008836 <USBD_CDC_Setup+0x162>
 8008790:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <USBD_CDC_Setup+0xc4>)
 8008792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008796:	bf00      	nop
 8008798:	080087c9 	.word	0x080087c9
 800879c:	08008845 	.word	0x08008845
 80087a0:	08008837 	.word	0x08008837
 80087a4:	08008837 	.word	0x08008837
 80087a8:	08008837 	.word	0x08008837
 80087ac:	08008837 	.word	0x08008837
 80087b0:	08008837 	.word	0x08008837
 80087b4:	08008837 	.word	0x08008837
 80087b8:	08008837 	.word	0x08008837
 80087bc:	08008837 	.word	0x08008837
 80087c0:	080087f3 	.word	0x080087f3
 80087c4:	0800881d 	.word	0x0800881d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d107      	bne.n	80087e4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80087d4:	f107 030a 	add.w	r3, r7, #10
 80087d8:	2202      	movs	r2, #2
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 fa9e 	bl	8009d1e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087e2:	e032      	b.n	800884a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f001 fa28 	bl	8009c3c <USBD_CtlError>
            ret = USBD_FAIL;
 80087ec:	2303      	movs	r3, #3
 80087ee:	75fb      	strb	r3, [r7, #23]
          break;
 80087f0:	e02b      	b.n	800884a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d107      	bne.n	800880e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80087fe:	f107 030d 	add.w	r3, r7, #13
 8008802:	2201      	movs	r2, #1
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f001 fa89 	bl	8009d1e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800880c:	e01d      	b.n	800884a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 fa13 	bl	8009c3c <USBD_CtlError>
            ret = USBD_FAIL;
 8008816:	2303      	movs	r3, #3
 8008818:	75fb      	strb	r3, [r7, #23]
          break;
 800881a:	e016      	b.n	800884a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b03      	cmp	r3, #3
 8008826:	d00f      	beq.n	8008848 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 fa06 	bl	8009c3c <USBD_CtlError>
            ret = USBD_FAIL;
 8008830:	2303      	movs	r3, #3
 8008832:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008834:	e008      	b.n	8008848 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f001 f9ff 	bl	8009c3c <USBD_CtlError>
          ret = USBD_FAIL;
 800883e:	2303      	movs	r3, #3
 8008840:	75fb      	strb	r3, [r7, #23]
          break;
 8008842:	e002      	b.n	800884a <USBD_CDC_Setup+0x176>
          break;
 8008844:	bf00      	nop
 8008846:	e008      	b.n	800885a <USBD_CDC_Setup+0x186>
          break;
 8008848:	bf00      	nop
      }
      break;
 800884a:	e006      	b.n	800885a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 f9f4 	bl	8009c3c <USBD_CtlError>
      ret = USBD_FAIL;
 8008854:	2303      	movs	r3, #3
 8008856:	75fb      	strb	r3, [r7, #23]
      break;
 8008858:	bf00      	nop
  }

  return (uint8_t)ret;
 800885a:	7dfb      	ldrb	r3, [r7, #23]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3718      	adds	r7, #24
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008876:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008882:	2303      	movs	r3, #3
 8008884:	e04f      	b.n	8008926 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800888c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	6879      	ldr	r1, [r7, #4]
 8008892:	4613      	mov	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	440b      	add	r3, r1
 800889c:	3318      	adds	r3, #24
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d029      	beq.n	80088f8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80088a4:	78fa      	ldrb	r2, [r7, #3]
 80088a6:	6879      	ldr	r1, [r7, #4]
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	3318      	adds	r3, #24
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	78f9      	ldrb	r1, [r7, #3]
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	460b      	mov	r3, r1
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	1a5b      	subs	r3, r3, r1
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4403      	add	r3, r0
 80088c4:	3344      	adds	r3, #68	; 0x44
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80088cc:	fb03 f301 	mul.w	r3, r3, r1
 80088d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d110      	bne.n	80088f8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80088d6:	78fa      	ldrb	r2, [r7, #3]
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	4613      	mov	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	440b      	add	r3, r1
 80088e4:	3318      	adds	r3, #24
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80088ea:	78f9      	ldrb	r1, [r7, #3]
 80088ec:	2300      	movs	r3, #0
 80088ee:	2200      	movs	r2, #0
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f002 fa84 	bl	800adfe <USBD_LL_Transmit>
 80088f6:	e015      	b.n	8008924 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00b      	beq.n	8008924 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008920:	78fa      	ldrb	r2, [r7, #3]
 8008922:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	460b      	mov	r3, r1
 8008938:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008940:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800894c:	2303      	movs	r3, #3
 800894e:	e015      	b.n	800897c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f002 fa94 	bl	800ae82 <USBD_LL_GetRxDataSize>
 800895a:	4602      	mov	r2, r0
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008976:	4611      	mov	r1, r2
 8008978:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008992:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800899a:	2303      	movs	r3, #3
 800899c:	e01b      	b.n	80089d6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d015      	beq.n	80089d4 <USBD_CDC_EP0_RxReady+0x50>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80089ae:	2bff      	cmp	r3, #255	; 0xff
 80089b0:	d010      	beq.n	80089d4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80089c0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80089c8:	b292      	uxth	r2, r2
 80089ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	22ff      	movs	r2, #255	; 0xff
 80089d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
	...

080089e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2243      	movs	r2, #67	; 0x43
 80089ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80089ee:	4b03      	ldr	r3, [pc, #12]	; (80089fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	20000090 	.word	0x20000090

08008a00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2243      	movs	r2, #67	; 0x43
 8008a0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008a0e:	4b03      	ldr	r3, [pc, #12]	; (8008a1c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	2000004c 	.word	0x2000004c

08008a20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2243      	movs	r2, #67	; 0x43
 8008a2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008a2e:	4b03      	ldr	r3, [pc, #12]	; (8008a3c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	200000d4 	.word	0x200000d4

08008a40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	220a      	movs	r2, #10
 8008a4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008a4e:	4b03      	ldr	r3, [pc, #12]	; (8008a5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	20000008 	.word	0x20000008

08008a60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e004      	b.n	8008a7e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b087      	sub	sp, #28
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a9c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e008      	b.n	8008aba <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	371c      	adds	r7, #28
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b085      	sub	sp, #20
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ad6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e004      	b.n	8008aec <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e016      	b.n	8008b44 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	7c1b      	ldrb	r3, [r3, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d109      	bne.n	8008b32 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b28:	2101      	movs	r1, #1
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f002 f988 	bl	800ae40 <USBD_LL_PrepareReceive>
 8008b30:	e007      	b.n	8008b42 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b38:	2340      	movs	r3, #64	; 0x40
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f002 f97f 	bl	800ae40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4613      	mov	r3, r2
 8008b58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e01f      	b.n	8008ba4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	79fa      	ldrb	r2, [r7, #7]
 8008b96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f001 fffb 	bl	800ab94 <USBD_LL_Init>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e016      	b.n	8008bf2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00b      	beq.n	8008bf0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be0:	f107 020e 	add.w	r2, r7, #14
 8008be4:	4610      	mov	r0, r2
 8008be6:	4798      	blx	r3
 8008be8:	4602      	mov	r2, r0
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b082      	sub	sp, #8
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f002 f812 	bl	800ac2c <USBD_LL_Start>
 8008c08:	4603      	mov	r3, r0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c34:	2303      	movs	r3, #3
 8008c36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d009      	beq.n	8008c56 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	4798      	blx	r3
 8008c52:	4603      	mov	r3, r0
 8008c54:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d007      	beq.n	8008c86 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	78fa      	ldrb	r2, [r7, #3]
 8008c80:	4611      	mov	r1, r2
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	4798      	blx	r3
  }

  return USBD_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 ff90 	bl	8009bc8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008cc4:	f003 031f 	and.w	r3, r3, #31
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d01a      	beq.n	8008d02 <USBD_LL_SetupStage+0x72>
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d822      	bhi.n	8008d16 <USBD_LL_SetupStage+0x86>
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <USBD_LL_SetupStage+0x4a>
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d00a      	beq.n	8008cee <USBD_LL_SetupStage+0x5e>
 8008cd8:	e01d      	b.n	8008d16 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fa62 	bl	80091ac <USBD_StdDevReq>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]
      break;
 8008cec:	e020      	b.n	8008d30 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fac6 	bl	8009288 <USBD_StdItfReq>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8008d00:	e016      	b.n	8008d30 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fb05 	bl	800931a <USBD_StdEPReq>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73fb      	strb	r3, [r7, #15]
      break;
 8008d14:	e00c      	b.n	8008d30 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 ffe1 	bl	800acec <USBD_LL_StallEP>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d2e:	bf00      	nop
  }

  return ret;
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b086      	sub	sp, #24
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	460b      	mov	r3, r1
 8008d44:	607a      	str	r2, [r7, #4]
 8008d46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008d48:	7afb      	ldrb	r3, [r7, #11]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d138      	bne.n	8008dc0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d14a      	bne.n	8008df6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d913      	bls.n	8008d94 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	1ad2      	subs	r2, r2, r3
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	4293      	cmp	r3, r2
 8008d84:	bf28      	it	cs
 8008d86:	4613      	movcs	r3, r2
 8008d88:	461a      	mov	r2, r3
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f001 f80f 	bl	8009db0 <USBD_CtlContinueRx>
 8008d92:	e030      	b.n	8008df6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d10b      	bne.n	8008db8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f001 f80a 	bl	8009dd2 <USBD_CtlSendStatus>
 8008dbe:	e01a      	b.n	8008df6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d114      	bne.n	8008df6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00e      	beq.n	8008df6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	7afa      	ldrb	r2, [r7, #11]
 8008de2:	4611      	mov	r1, r2
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	4798      	blx	r3
 8008de8:	4603      	mov	r3, r0
 8008dea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008dec:	7dfb      	ldrb	r3, [r7, #23]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	e000      	b.n	8008df8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008e0e:	7afb      	ldrb	r3, [r7, #11]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d16b      	bne.n	8008eec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3314      	adds	r3, #20
 8008e18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d156      	bne.n	8008ed2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	689a      	ldr	r2, [r3, #8]
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d914      	bls.n	8008e5a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	689a      	ldr	r2, [r3, #8]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	1ad2      	subs	r2, r2, r3
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	461a      	mov	r2, r3
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 ff84 	bl	8009d54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2200      	movs	r2, #0
 8008e50:	2100      	movs	r1, #0
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f001 fff4 	bl	800ae40 <USBD_LL_PrepareReceive>
 8008e58:	e03b      	b.n	8008ed2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d11c      	bne.n	8008ea0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d316      	bcc.n	8008ea0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d20f      	bcs.n	8008ea0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e80:	2200      	movs	r2, #0
 8008e82:	2100      	movs	r1, #0
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 ff65 	bl	8009d54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e92:	2300      	movs	r3, #0
 8008e94:	2200      	movs	r2, #0
 8008e96:	2100      	movs	r1, #0
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f001 ffd1 	bl	800ae40 <USBD_LL_PrepareReceive>
 8008e9e:	e018      	b.n	8008ed2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d10b      	bne.n	8008ec4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ec4:	2180      	movs	r1, #128	; 0x80
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f001 ff10 	bl	800acec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 ff93 	bl	8009df8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d122      	bne.n	8008f22 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f7ff fe98 	bl	8008c12 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008eea:	e01a      	b.n	8008f22 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d114      	bne.n	8008f22 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00e      	beq.n	8008f22 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f0a:	695b      	ldr	r3, [r3, #20]
 8008f0c:	7afa      	ldrb	r2, [r7, #11]
 8008f0e:	4611      	mov	r1, r2
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	4798      	blx	r3
 8008f14:	4603      	mov	r3, r0
 8008f16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008f1e:	7dfb      	ldrb	r3, [r7, #23]
 8008f20:	e000      	b.n	8008f24 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e02f      	b.n	8008fc0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00f      	beq.n	8008f8a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d009      	beq.n	8008f8a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	6852      	ldr	r2, [r2, #4]
 8008f82:	b2d2      	uxtb	r2, r2
 8008f84:	4611      	mov	r1, r2
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f8a:	2340      	movs	r3, #64	; 0x40
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	2100      	movs	r1, #0
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f001 fe66 	bl	800ac62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2240      	movs	r2, #64	; 0x40
 8008fa2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fa6:	2340      	movs	r3, #64	; 0x40
 8008fa8:	2200      	movs	r2, #0
 8008faa:	2180      	movs	r1, #128	; 0x80
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f001 fe58 	bl	800ac62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2240      	movs	r2, #64	; 0x40
 8008fbc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	78fa      	ldrb	r2, [r7, #3]
 8008fd8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2204      	movs	r2, #4
 8009002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b04      	cmp	r3, #4
 8009026:	d106      	bne.n	8009036 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800902e:	b2da      	uxtb	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009056:	2303      	movs	r3, #3
 8009058:	e012      	b.n	8009080 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b03      	cmp	r3, #3
 8009064:	d10b      	bne.n	800907e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d005      	beq.n	800907e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800909e:	2303      	movs	r3, #3
 80090a0:	e014      	b.n	80090cc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d10d      	bne.n	80090ca <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d007      	beq.n	80090ca <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	78fa      	ldrb	r2, [r7, #3]
 80090c4:	4611      	mov	r1, r2
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e014      	b.n	8009118 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d10d      	bne.n	8009116 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	2b00      	cmp	r3, #0
 8009104:	d007      	beq.n	8009116 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800910c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910e:	78fa      	ldrb	r2, [r7, #3]
 8009110:	4611      	mov	r1, r2
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800914c:	2b00      	cmp	r3, #0
 800914e:	d009      	beq.n	8009164 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	6852      	ldr	r2, [r2, #4]
 800915c:	b2d2      	uxtb	r2, r2
 800915e:	4611      	mov	r1, r2
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	4798      	blx	r3
  }

  return USBD_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800916e:	b480      	push	{r7}
 8009170:	b087      	sub	sp, #28
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	3301      	adds	r3, #1
 8009184:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800918c:	8a3b      	ldrh	r3, [r7, #16]
 800918e:	021b      	lsls	r3, r3, #8
 8009190:	b21a      	sxth	r2, r3
 8009192:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009196:	4313      	orrs	r3, r2
 8009198:	b21b      	sxth	r3, r3
 800919a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800919c:	89fb      	ldrh	r3, [r7, #14]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	371c      	adds	r7, #28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
	...

080091ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091c2:	2b40      	cmp	r3, #64	; 0x40
 80091c4:	d005      	beq.n	80091d2 <USBD_StdDevReq+0x26>
 80091c6:	2b40      	cmp	r3, #64	; 0x40
 80091c8:	d853      	bhi.n	8009272 <USBD_StdDevReq+0xc6>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00b      	beq.n	80091e6 <USBD_StdDevReq+0x3a>
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d14f      	bne.n	8009272 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	4798      	blx	r3
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]
      break;
 80091e4:	e04a      	b.n	800927c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	785b      	ldrb	r3, [r3, #1]
 80091ea:	2b09      	cmp	r3, #9
 80091ec:	d83b      	bhi.n	8009266 <USBD_StdDevReq+0xba>
 80091ee:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <USBD_StdDevReq+0x48>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	08009249 	.word	0x08009249
 80091f8:	0800925d 	.word	0x0800925d
 80091fc:	08009267 	.word	0x08009267
 8009200:	08009253 	.word	0x08009253
 8009204:	08009267 	.word	0x08009267
 8009208:	08009227 	.word	0x08009227
 800920c:	0800921d 	.word	0x0800921d
 8009210:	08009267 	.word	0x08009267
 8009214:	0800923f 	.word	0x0800923f
 8009218:	08009231 	.word	0x08009231
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f9de 	bl	80095e0 <USBD_GetDescriptor>
          break;
 8009224:	e024      	b.n	8009270 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fb43 	bl	80098b4 <USBD_SetAddress>
          break;
 800922e:	e01f      	b.n	8009270 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fb82 	bl	800993c <USBD_SetConfig>
 8009238:	4603      	mov	r3, r0
 800923a:	73fb      	strb	r3, [r7, #15]
          break;
 800923c:	e018      	b.n	8009270 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800923e:	6839      	ldr	r1, [r7, #0]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fc21 	bl	8009a88 <USBD_GetConfig>
          break;
 8009246:	e013      	b.n	8009270 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fc52 	bl	8009af4 <USBD_GetStatus>
          break;
 8009250:	e00e      	b.n	8009270 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fc81 	bl	8009b5c <USBD_SetFeature>
          break;
 800925a:	e009      	b.n	8009270 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fc90 	bl	8009b84 <USBD_ClrFeature>
          break;
 8009264:	e004      	b.n	8009270 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fce7 	bl	8009c3c <USBD_CtlError>
          break;
 800926e:	bf00      	nop
      }
      break;
 8009270:	e004      	b.n	800927c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fce1 	bl	8009c3c <USBD_CtlError>
      break;
 800927a:	bf00      	nop
  }

  return ret;
 800927c:	7bfb      	ldrb	r3, [r7, #15]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop

08009288 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800929e:	2b40      	cmp	r3, #64	; 0x40
 80092a0:	d005      	beq.n	80092ae <USBD_StdItfReq+0x26>
 80092a2:	2b40      	cmp	r3, #64	; 0x40
 80092a4:	d82f      	bhi.n	8009306 <USBD_StdItfReq+0x7e>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <USBD_StdItfReq+0x26>
 80092aa:	2b20      	cmp	r3, #32
 80092ac:	d12b      	bne.n	8009306 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	3b01      	subs	r3, #1
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d81d      	bhi.n	80092f8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	889b      	ldrh	r3, [r3, #4]
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d813      	bhi.n	80092ee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	4798      	blx	r3
 80092d4:	4603      	mov	r3, r0
 80092d6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	88db      	ldrh	r3, [r3, #6]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d110      	bne.n	8009302 <USBD_StdItfReq+0x7a>
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10d      	bne.n	8009302 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fd73 	bl	8009dd2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092ec:	e009      	b.n	8009302 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fca3 	bl	8009c3c <USBD_CtlError>
          break;
 80092f6:	e004      	b.n	8009302 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fc9e 	bl	8009c3c <USBD_CtlError>
          break;
 8009300:	e000      	b.n	8009304 <USBD_StdItfReq+0x7c>
          break;
 8009302:	bf00      	nop
      }
      break;
 8009304:	e004      	b.n	8009310 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fc97 	bl	8009c3c <USBD_CtlError>
      break;
 800930e:	bf00      	nop
  }

  return ret;
 8009310:	7bfb      	ldrb	r3, [r7, #15]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	889b      	ldrh	r3, [r3, #4]
 800932c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009336:	2b40      	cmp	r3, #64	; 0x40
 8009338:	d007      	beq.n	800934a <USBD_StdEPReq+0x30>
 800933a:	2b40      	cmp	r3, #64	; 0x40
 800933c:	f200 8145 	bhi.w	80095ca <USBD_StdEPReq+0x2b0>
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00c      	beq.n	800935e <USBD_StdEPReq+0x44>
 8009344:	2b20      	cmp	r3, #32
 8009346:	f040 8140 	bne.w	80095ca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	4798      	blx	r3
 8009358:	4603      	mov	r3, r0
 800935a:	73fb      	strb	r3, [r7, #15]
      break;
 800935c:	e13a      	b.n	80095d4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	785b      	ldrb	r3, [r3, #1]
 8009362:	2b03      	cmp	r3, #3
 8009364:	d007      	beq.n	8009376 <USBD_StdEPReq+0x5c>
 8009366:	2b03      	cmp	r3, #3
 8009368:	f300 8129 	bgt.w	80095be <USBD_StdEPReq+0x2a4>
 800936c:	2b00      	cmp	r3, #0
 800936e:	d07f      	beq.n	8009470 <USBD_StdEPReq+0x156>
 8009370:	2b01      	cmp	r3, #1
 8009372:	d03c      	beq.n	80093ee <USBD_StdEPReq+0xd4>
 8009374:	e123      	b.n	80095be <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b02      	cmp	r3, #2
 8009380:	d002      	beq.n	8009388 <USBD_StdEPReq+0x6e>
 8009382:	2b03      	cmp	r3, #3
 8009384:	d016      	beq.n	80093b4 <USBD_StdEPReq+0x9a>
 8009386:	e02c      	b.n	80093e2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00d      	beq.n	80093aa <USBD_StdEPReq+0x90>
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b80      	cmp	r3, #128	; 0x80
 8009392:	d00a      	beq.n	80093aa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009394:	7bbb      	ldrb	r3, [r7, #14]
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 fca7 	bl	800acec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800939e:	2180      	movs	r1, #128	; 0x80
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 fca3 	bl	800acec <USBD_LL_StallEP>
 80093a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093a8:	e020      	b.n	80093ec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fc45 	bl	8009c3c <USBD_CtlError>
              break;
 80093b2:	e01b      	b.n	80093ec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	885b      	ldrh	r3, [r3, #2]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10e      	bne.n	80093da <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00b      	beq.n	80093da <USBD_StdEPReq+0xc0>
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
 80093c4:	2b80      	cmp	r3, #128	; 0x80
 80093c6:	d008      	beq.n	80093da <USBD_StdEPReq+0xc0>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	88db      	ldrh	r3, [r3, #6]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d104      	bne.n	80093da <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 fc89 	bl	800acec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fcf9 	bl	8009dd2 <USBD_CtlSendStatus>

              break;
 80093e0:	e004      	b.n	80093ec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fc29 	bl	8009c3c <USBD_CtlError>
              break;
 80093ea:	bf00      	nop
          }
          break;
 80093ec:	e0ec      	b.n	80095c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d002      	beq.n	8009400 <USBD_StdEPReq+0xe6>
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d016      	beq.n	800942c <USBD_StdEPReq+0x112>
 80093fe:	e030      	b.n	8009462 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00d      	beq.n	8009422 <USBD_StdEPReq+0x108>
 8009406:	7bbb      	ldrb	r3, [r7, #14]
 8009408:	2b80      	cmp	r3, #128	; 0x80
 800940a:	d00a      	beq.n	8009422 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800940c:	7bbb      	ldrb	r3, [r7, #14]
 800940e:	4619      	mov	r1, r3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f001 fc6b 	bl	800acec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009416:	2180      	movs	r1, #128	; 0x80
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 fc67 	bl	800acec <USBD_LL_StallEP>
 800941e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009420:	e025      	b.n	800946e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fc09 	bl	8009c3c <USBD_CtlError>
              break;
 800942a:	e020      	b.n	800946e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	885b      	ldrh	r3, [r3, #2]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d11b      	bne.n	800946c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009434:	7bbb      	ldrb	r3, [r7, #14]
 8009436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800943a:	2b00      	cmp	r3, #0
 800943c:	d004      	beq.n	8009448 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f001 fc71 	bl	800ad2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fcc2 	bl	8009dd2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	4798      	blx	r3
 800945c:	4603      	mov	r3, r0
 800945e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009460:	e004      	b.n	800946c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fbe9 	bl	8009c3c <USBD_CtlError>
              break;
 800946a:	e000      	b.n	800946e <USBD_StdEPReq+0x154>
              break;
 800946c:	bf00      	nop
          }
          break;
 800946e:	e0ab      	b.n	80095c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b02      	cmp	r3, #2
 800947a:	d002      	beq.n	8009482 <USBD_StdEPReq+0x168>
 800947c:	2b03      	cmp	r3, #3
 800947e:	d032      	beq.n	80094e6 <USBD_StdEPReq+0x1cc>
 8009480:	e097      	b.n	80095b2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009482:	7bbb      	ldrb	r3, [r7, #14]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <USBD_StdEPReq+0x17e>
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	2b80      	cmp	r3, #128	; 0x80
 800948c:	d004      	beq.n	8009498 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fbd3 	bl	8009c3c <USBD_CtlError>
                break;
 8009496:	e091      	b.n	80095bc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800949c:	2b00      	cmp	r3, #0
 800949e:	da0b      	bge.n	80094b8 <USBD_StdEPReq+0x19e>
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	3310      	adds	r3, #16
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	4413      	add	r3, r2
 80094b4:	3304      	adds	r3, #4
 80094b6:	e00b      	b.n	80094d0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	4413      	add	r3, r2
 80094ce:	3304      	adds	r3, #4
 80094d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2202      	movs	r2, #2
 80094dc:	4619      	mov	r1, r3
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fc1d 	bl	8009d1e <USBD_CtlSendData>
              break;
 80094e4:	e06a      	b.n	80095bc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	da11      	bge.n	8009512 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	f003 020f 	and.w	r2, r3, #15
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	4613      	mov	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	440b      	add	r3, r1
 8009500:	3324      	adds	r3, #36	; 0x24
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d117      	bne.n	8009538 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fb96 	bl	8009c3c <USBD_CtlError>
                  break;
 8009510:	e054      	b.n	80095bc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009512:	7bbb      	ldrb	r3, [r7, #14]
 8009514:	f003 020f 	and.w	r2, r3, #15
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	4613      	mov	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	440b      	add	r3, r1
 8009524:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d104      	bne.n	8009538 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fb83 	bl	8009c3c <USBD_CtlError>
                  break;
 8009536:	e041      	b.n	80095bc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800953c:	2b00      	cmp	r3, #0
 800953e:	da0b      	bge.n	8009558 <USBD_StdEPReq+0x23e>
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009546:	4613      	mov	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	3310      	adds	r3, #16
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	4413      	add	r3, r2
 8009554:	3304      	adds	r3, #4
 8009556:	e00b      	b.n	8009570 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009558:	7bbb      	ldrb	r3, [r7, #14]
 800955a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800955e:	4613      	mov	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	4413      	add	r3, r2
 800956e:	3304      	adds	r3, #4
 8009570:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009572:	7bbb      	ldrb	r3, [r7, #14]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <USBD_StdEPReq+0x264>
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	2b80      	cmp	r3, #128	; 0x80
 800957c:	d103      	bne.n	8009586 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2200      	movs	r2, #0
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	e00e      	b.n	80095a4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 fbec 	bl	800ad68 <USBD_LL_IsStallEP>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2201      	movs	r2, #1
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	e002      	b.n	80095a4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2202      	movs	r2, #2
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fbb7 	bl	8009d1e <USBD_CtlSendData>
              break;
 80095b0:	e004      	b.n	80095bc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fb41 	bl	8009c3c <USBD_CtlError>
              break;
 80095ba:	bf00      	nop
          }
          break;
 80095bc:	e004      	b.n	80095c8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fb3b 	bl	8009c3c <USBD_CtlError>
          break;
 80095c6:	bf00      	nop
      }
      break;
 80095c8:	e004      	b.n	80095d4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fb35 	bl	8009c3c <USBD_CtlError>
      break;
 80095d2:	bf00      	nop
  }

  return ret;
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
	...

080095e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095ee:	2300      	movs	r3, #0
 80095f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095f2:	2300      	movs	r3, #0
 80095f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	885b      	ldrh	r3, [r3, #2]
 80095fa:	0a1b      	lsrs	r3, r3, #8
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	3b01      	subs	r3, #1
 8009600:	2b06      	cmp	r3, #6
 8009602:	f200 8128 	bhi.w	8009856 <USBD_GetDescriptor+0x276>
 8009606:	a201      	add	r2, pc, #4	; (adr r2, 800960c <USBD_GetDescriptor+0x2c>)
 8009608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960c:	08009629 	.word	0x08009629
 8009610:	08009641 	.word	0x08009641
 8009614:	08009681 	.word	0x08009681
 8009618:	08009857 	.word	0x08009857
 800961c:	08009857 	.word	0x08009857
 8009620:	080097f7 	.word	0x080097f7
 8009624:	08009823 	.word	0x08009823
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	7c12      	ldrb	r2, [r2, #16]
 8009634:	f107 0108 	add.w	r1, r7, #8
 8009638:	4610      	mov	r0, r2
 800963a:	4798      	blx	r3
 800963c:	60f8      	str	r0, [r7, #12]
      break;
 800963e:	e112      	b.n	8009866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	7c1b      	ldrb	r3, [r3, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10d      	bne.n	8009664 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009650:	f107 0208 	add.w	r2, r7, #8
 8009654:	4610      	mov	r0, r2
 8009656:	4798      	blx	r3
 8009658:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3301      	adds	r3, #1
 800965e:	2202      	movs	r2, #2
 8009660:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009662:	e100      	b.n	8009866 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966c:	f107 0208 	add.w	r2, r7, #8
 8009670:	4610      	mov	r0, r2
 8009672:	4798      	blx	r3
 8009674:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3301      	adds	r3, #1
 800967a:	2202      	movs	r2, #2
 800967c:	701a      	strb	r2, [r3, #0]
      break;
 800967e:	e0f2      	b.n	8009866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	885b      	ldrh	r3, [r3, #2]
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b05      	cmp	r3, #5
 8009688:	f200 80ac 	bhi.w	80097e4 <USBD_GetDescriptor+0x204>
 800968c:	a201      	add	r2, pc, #4	; (adr r2, 8009694 <USBD_GetDescriptor+0xb4>)
 800968e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009692:	bf00      	nop
 8009694:	080096ad 	.word	0x080096ad
 8009698:	080096e1 	.word	0x080096e1
 800969c:	08009715 	.word	0x08009715
 80096a0:	08009749 	.word	0x08009749
 80096a4:	0800977d 	.word	0x0800977d
 80096a8:	080097b1 	.word	0x080097b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00b      	beq.n	80096d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	7c12      	ldrb	r2, [r2, #16]
 80096c4:	f107 0108 	add.w	r1, r7, #8
 80096c8:	4610      	mov	r0, r2
 80096ca:	4798      	blx	r3
 80096cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ce:	e091      	b.n	80097f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fab2 	bl	8009c3c <USBD_CtlError>
            err++;
 80096d8:	7afb      	ldrb	r3, [r7, #11]
 80096da:	3301      	adds	r3, #1
 80096dc:	72fb      	strb	r3, [r7, #11]
          break;
 80096de:	e089      	b.n	80097f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	7c12      	ldrb	r2, [r2, #16]
 80096f8:	f107 0108 	add.w	r1, r7, #8
 80096fc:	4610      	mov	r0, r2
 80096fe:	4798      	blx	r3
 8009700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009702:	e077      	b.n	80097f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fa98 	bl	8009c3c <USBD_CtlError>
            err++;
 800970c:	7afb      	ldrb	r3, [r7, #11]
 800970e:	3301      	adds	r3, #1
 8009710:	72fb      	strb	r3, [r7, #11]
          break;
 8009712:	e06f      	b.n	80097f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	7c12      	ldrb	r2, [r2, #16]
 800972c:	f107 0108 	add.w	r1, r7, #8
 8009730:	4610      	mov	r0, r2
 8009732:	4798      	blx	r3
 8009734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009736:	e05d      	b.n	80097f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fa7e 	bl	8009c3c <USBD_CtlError>
            err++;
 8009740:	7afb      	ldrb	r3, [r7, #11]
 8009742:	3301      	adds	r3, #1
 8009744:	72fb      	strb	r3, [r7, #11]
          break;
 8009746:	e055      	b.n	80097f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00b      	beq.n	800976c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	7c12      	ldrb	r2, [r2, #16]
 8009760:	f107 0108 	add.w	r1, r7, #8
 8009764:	4610      	mov	r0, r2
 8009766:	4798      	blx	r3
 8009768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800976a:	e043      	b.n	80097f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fa64 	bl	8009c3c <USBD_CtlError>
            err++;
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	3301      	adds	r3, #1
 8009778:	72fb      	strb	r3, [r7, #11]
          break;
 800977a:	e03b      	b.n	80097f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00b      	beq.n	80097a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978e:	695b      	ldr	r3, [r3, #20]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	7c12      	ldrb	r2, [r2, #16]
 8009794:	f107 0108 	add.w	r1, r7, #8
 8009798:	4610      	mov	r0, r2
 800979a:	4798      	blx	r3
 800979c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800979e:	e029      	b.n	80097f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fa4a 	bl	8009c3c <USBD_CtlError>
            err++;
 80097a8:	7afb      	ldrb	r3, [r7, #11]
 80097aa:	3301      	adds	r3, #1
 80097ac:	72fb      	strb	r3, [r7, #11]
          break;
 80097ae:	e021      	b.n	80097f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00b      	beq.n	80097d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	7c12      	ldrb	r2, [r2, #16]
 80097c8:	f107 0108 	add.w	r1, r7, #8
 80097cc:	4610      	mov	r0, r2
 80097ce:	4798      	blx	r3
 80097d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097d2:	e00f      	b.n	80097f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fa30 	bl	8009c3c <USBD_CtlError>
            err++;
 80097dc:	7afb      	ldrb	r3, [r7, #11]
 80097de:	3301      	adds	r3, #1
 80097e0:	72fb      	strb	r3, [r7, #11]
          break;
 80097e2:	e007      	b.n	80097f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa28 	bl	8009c3c <USBD_CtlError>
          err++;
 80097ec:	7afb      	ldrb	r3, [r7, #11]
 80097ee:	3301      	adds	r3, #1
 80097f0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80097f2:	bf00      	nop
      }
      break;
 80097f4:	e037      	b.n	8009866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	7c1b      	ldrb	r3, [r3, #16]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d109      	bne.n	8009812 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009806:	f107 0208 	add.w	r2, r7, #8
 800980a:	4610      	mov	r0, r2
 800980c:	4798      	blx	r3
 800980e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009810:	e029      	b.n	8009866 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fa11 	bl	8009c3c <USBD_CtlError>
        err++;
 800981a:	7afb      	ldrb	r3, [r7, #11]
 800981c:	3301      	adds	r3, #1
 800981e:	72fb      	strb	r3, [r7, #11]
      break;
 8009820:	e021      	b.n	8009866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	7c1b      	ldrb	r3, [r3, #16]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10d      	bne.n	8009846 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009832:	f107 0208 	add.w	r2, r7, #8
 8009836:	4610      	mov	r0, r2
 8009838:	4798      	blx	r3
 800983a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3301      	adds	r3, #1
 8009840:	2207      	movs	r2, #7
 8009842:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009844:	e00f      	b.n	8009866 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f9f7 	bl	8009c3c <USBD_CtlError>
        err++;
 800984e:	7afb      	ldrb	r3, [r7, #11]
 8009850:	3301      	adds	r3, #1
 8009852:	72fb      	strb	r3, [r7, #11]
      break;
 8009854:	e007      	b.n	8009866 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f9ef 	bl	8009c3c <USBD_CtlError>
      err++;
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	3301      	adds	r3, #1
 8009862:	72fb      	strb	r3, [r7, #11]
      break;
 8009864:	bf00      	nop
  }

  if (err != 0U)
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d11e      	bne.n	80098aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	88db      	ldrh	r3, [r3, #6]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d016      	beq.n	80098a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009874:	893b      	ldrh	r3, [r7, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00e      	beq.n	8009898 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	88da      	ldrh	r2, [r3, #6]
 800987e:	893b      	ldrh	r3, [r7, #8]
 8009880:	4293      	cmp	r3, r2
 8009882:	bf28      	it	cs
 8009884:	4613      	movcs	r3, r2
 8009886:	b29b      	uxth	r3, r3
 8009888:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800988a:	893b      	ldrh	r3, [r7, #8]
 800988c:	461a      	mov	r2, r3
 800988e:	68f9      	ldr	r1, [r7, #12]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fa44 	bl	8009d1e <USBD_CtlSendData>
 8009896:	e009      	b.n	80098ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f9ce 	bl	8009c3c <USBD_CtlError>
 80098a0:	e004      	b.n	80098ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fa95 	bl	8009dd2 <USBD_CtlSendStatus>
 80098a8:	e000      	b.n	80098ac <USBD_GetDescriptor+0x2cc>
    return;
 80098aa:	bf00      	nop
  }
}
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop

080098b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	889b      	ldrh	r3, [r3, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d131      	bne.n	800992a <USBD_SetAddress+0x76>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	88db      	ldrh	r3, [r3, #6]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d12d      	bne.n	800992a <USBD_SetAddress+0x76>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	885b      	ldrh	r3, [r3, #2]
 80098d2:	2b7f      	cmp	r3, #127	; 0x7f
 80098d4:	d829      	bhi.n	800992a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	885b      	ldrh	r3, [r3, #2]
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d104      	bne.n	80098f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f9a3 	bl	8009c3c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f6:	e01d      	b.n	8009934 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	7bfa      	ldrb	r2, [r7, #15]
 80098fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f001 fa5b 	bl	800adc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 fa61 	bl	8009dd2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d004      	beq.n	8009920 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2202      	movs	r2, #2
 800991a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800991e:	e009      	b.n	8009934 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009928:	e004      	b.n	8009934 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f985 	bl	8009c3c <USBD_CtlError>
  }
}
 8009932:	bf00      	nop
 8009934:	bf00      	nop
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	885b      	ldrh	r3, [r3, #2]
 800994e:	b2da      	uxtb	r2, r3
 8009950:	4b4c      	ldr	r3, [pc, #304]	; (8009a84 <USBD_SetConfig+0x148>)
 8009952:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009954:	4b4b      	ldr	r3, [pc, #300]	; (8009a84 <USBD_SetConfig+0x148>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d905      	bls.n	8009968 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f96c 	bl	8009c3c <USBD_CtlError>
    return USBD_FAIL;
 8009964:	2303      	movs	r3, #3
 8009966:	e088      	b.n	8009a7a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b02      	cmp	r3, #2
 8009972:	d002      	beq.n	800997a <USBD_SetConfig+0x3e>
 8009974:	2b03      	cmp	r3, #3
 8009976:	d025      	beq.n	80099c4 <USBD_SetConfig+0x88>
 8009978:	e071      	b.n	8009a5e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800997a:	4b42      	ldr	r3, [pc, #264]	; (8009a84 <USBD_SetConfig+0x148>)
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d01c      	beq.n	80099bc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009982:	4b40      	ldr	r3, [pc, #256]	; (8009a84 <USBD_SetConfig+0x148>)
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800998c:	4b3d      	ldr	r3, [pc, #244]	; (8009a84 <USBD_SetConfig+0x148>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7ff f948 	bl	8008c28 <USBD_SetClassConfig>
 8009998:	4603      	mov	r3, r0
 800999a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d004      	beq.n	80099ac <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f949 	bl	8009c3c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099aa:	e065      	b.n	8009a78 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fa10 	bl	8009dd2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2203      	movs	r2, #3
 80099b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80099ba:	e05d      	b.n	8009a78 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fa08 	bl	8009dd2 <USBD_CtlSendStatus>
      break;
 80099c2:	e059      	b.n	8009a78 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80099c4:	4b2f      	ldr	r3, [pc, #188]	; (8009a84 <USBD_SetConfig+0x148>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d112      	bne.n	80099f2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2202      	movs	r2, #2
 80099d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80099d4:	4b2b      	ldr	r3, [pc, #172]	; (8009a84 <USBD_SetConfig+0x148>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	461a      	mov	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099de:	4b29      	ldr	r3, [pc, #164]	; (8009a84 <USBD_SetConfig+0x148>)
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff f93b 	bl	8008c60 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f9f1 	bl	8009dd2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099f0:	e042      	b.n	8009a78 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80099f2:	4b24      	ldr	r3, [pc, #144]	; (8009a84 <USBD_SetConfig+0x148>)
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d02a      	beq.n	8009a56 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff f929 	bl	8008c60 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a0e:	4b1d      	ldr	r3, [pc, #116]	; (8009a84 <USBD_SetConfig+0x148>)
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a18:	4b1a      	ldr	r3, [pc, #104]	; (8009a84 <USBD_SetConfig+0x148>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff f902 	bl	8008c28 <USBD_SetClassConfig>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00f      	beq.n	8009a4e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f903 	bl	8009c3c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7ff f90e 	bl	8008c60 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a4c:	e014      	b.n	8009a78 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f9bf 	bl	8009dd2 <USBD_CtlSendStatus>
      break;
 8009a54:	e010      	b.n	8009a78 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f9bb 	bl	8009dd2 <USBD_CtlSendStatus>
      break;
 8009a5c:	e00c      	b.n	8009a78 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f8eb 	bl	8009c3c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a66:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <USBD_SetConfig+0x148>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7ff f8f7 	bl	8008c60 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a72:	2303      	movs	r3, #3
 8009a74:	73fb      	strb	r3, [r7, #15]
      break;
 8009a76:	bf00      	nop
  }

  return ret;
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	2000019c 	.word	0x2000019c

08009a88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	88db      	ldrh	r3, [r3, #6]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d004      	beq.n	8009aa4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f8cd 	bl	8009c3c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009aa2:	e023      	b.n	8009aec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	dc02      	bgt.n	8009ab6 <USBD_GetConfig+0x2e>
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	dc03      	bgt.n	8009abc <USBD_GetConfig+0x34>
 8009ab4:	e015      	b.n	8009ae2 <USBD_GetConfig+0x5a>
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d00b      	beq.n	8009ad2 <USBD_GetConfig+0x4a>
 8009aba:	e012      	b.n	8009ae2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f927 	bl	8009d1e <USBD_CtlSendData>
        break;
 8009ad0:	e00c      	b.n	8009aec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f91f 	bl	8009d1e <USBD_CtlSendData>
        break;
 8009ae0:	e004      	b.n	8009aec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f8a9 	bl	8009c3c <USBD_CtlError>
        break;
 8009aea:	bf00      	nop
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	3b01      	subs	r3, #1
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d81e      	bhi.n	8009b4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	88db      	ldrh	r3, [r3, #6]
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d004      	beq.n	8009b1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f890 	bl	8009c3c <USBD_CtlError>
        break;
 8009b1c:	e01a      	b.n	8009b54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d005      	beq.n	8009b3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	f043 0202 	orr.w	r2, r3, #2
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	330c      	adds	r3, #12
 8009b3e:	2202      	movs	r2, #2
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f8eb 	bl	8009d1e <USBD_CtlSendData>
      break;
 8009b48:	e004      	b.n	8009b54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f875 	bl	8009c3c <USBD_CtlError>
      break;
 8009b52:	bf00      	nop
  }
}
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	885b      	ldrh	r3, [r3, #2]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d106      	bne.n	8009b7c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f92b 	bl	8009dd2 <USBD_CtlSendStatus>
  }
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	3b01      	subs	r3, #1
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d80b      	bhi.n	8009bb4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	885b      	ldrh	r3, [r3, #2]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d10c      	bne.n	8009bbe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f910 	bl	8009dd2 <USBD_CtlSendStatus>
      }
      break;
 8009bb2:	e004      	b.n	8009bbe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f840 	bl	8009c3c <USBD_CtlError>
      break;
 8009bbc:	e000      	b.n	8009bc0 <USBD_ClrFeature+0x3c>
      break;
 8009bbe:	bf00      	nop
  }
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	781a      	ldrb	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3301      	adds	r3, #1
 8009be2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	781a      	ldrb	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f7ff fabb 	bl	800916e <SWAPBYTE>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	3301      	adds	r3, #1
 8009c04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f7ff faae 	bl	800916e <SWAPBYTE>
 8009c12:	4603      	mov	r3, r0
 8009c14:	461a      	mov	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	3301      	adds	r3, #1
 8009c24:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f7ff faa1 	bl	800916e <SWAPBYTE>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461a      	mov	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	80da      	strh	r2, [r3, #6]
}
 8009c34:	bf00      	nop
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c46:	2180      	movs	r1, #128	; 0x80
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f001 f84f 	bl	800acec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c4e:	2100      	movs	r1, #0
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f001 f84b 	bl	800acec <USBD_LL_StallEP>
}
 8009c56:	bf00      	nop
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b086      	sub	sp, #24
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	60b9      	str	r1, [r7, #8]
 8009c68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d036      	beq.n	8009ce2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009c78:	6938      	ldr	r0, [r7, #16]
 8009c7a:	f000 f836 	bl	8009cea <USBD_GetLen>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	3301      	adds	r3, #1
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	005b      	lsls	r3, r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	4413      	add	r3, r2
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	7812      	ldrb	r2, [r2, #0]
 8009c96:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	2203      	movs	r2, #3
 8009ca6:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	3301      	adds	r3, #1
 8009cac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009cae:	e013      	b.n	8009cd8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009cb0:	7dfb      	ldrb	r3, [r7, #23]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	7812      	ldrb	r2, [r2, #0]
 8009cba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	613b      	str	r3, [r7, #16]
    idx++;
 8009cc2:	7dfb      	ldrb	r3, [r7, #23]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	4413      	add	r3, r2
 8009cce:	2200      	movs	r2, #0
 8009cd0:	701a      	strb	r2, [r3, #0]
    idx++;
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1e7      	bne.n	8009cb0 <USBD_GetString+0x52>
 8009ce0:	e000      	b.n	8009ce4 <USBD_GetString+0x86>
    return;
 8009ce2:	bf00      	nop
  }
}
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009cea:	b480      	push	{r7}
 8009cec:	b085      	sub	sp, #20
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009cfa:	e005      	b.n	8009d08 <USBD_GetLen+0x1e>
  {
    len++;
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	3301      	adds	r3, #1
 8009d06:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1f5      	bne.n	8009cfc <USBD_GetLen+0x12>
  }

  return len;
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b084      	sub	sp, #16
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	60b9      	str	r1, [r7, #8]
 8009d28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	2100      	movs	r1, #0
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f001 f85a 	bl	800adfe <USBD_LL_Transmit>

  return USBD_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	2100      	movs	r1, #0
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f001 f849 	bl	800adfe <USBD_LL_Transmit>

  return USBD_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2203      	movs	r2, #3
 8009d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	2100      	movs	r1, #0
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f001 f84d 	bl	800ae40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f001 f83c 	bl	800ae40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2204      	movs	r2, #4
 8009dde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009de2:	2300      	movs	r3, #0
 8009de4:	2200      	movs	r2, #0
 8009de6:	2100      	movs	r1, #0
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 f808 	bl	800adfe <USBD_LL_Transmit>

  return USBD_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2205      	movs	r2, #5
 8009e04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e08:	2300      	movs	r3, #0
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f001 f816 	bl	800ae40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
	...

08009e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009e20:	b5b0      	push	{r4, r5, r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009e26:	f7f6 fbd9 	bl	80005dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009e2a:	f000 f85f 	bl	8009eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009e2e:	f000 f9dd 	bl	800a1ec <MX_GPIO_Init>
  MX_DMA_Init();
 8009e32:	f000 f9bb 	bl	800a1ac <MX_DMA_Init>
  MX_RTC_Init();
 8009e36:	f000 f939 	bl	800a0ac <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8009e3a:	f000 f95d 	bl	800a0f8 <MX_SDIO_SD_Init>
  MX_I2C1_Init();
 8009e3e:	f000 f8d9 	bl	8009ff4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8009e42:	f000 f905 	bl	800a050 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8009e46:	f000 f987 	bl	800a158 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8009e4a:	f000 fc89 	bl	800a760 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
 8009e4e:	2201      	movs	r2, #1
 8009e50:	2101      	movs	r1, #1
 8009e52:	4822      	ldr	r0, [pc, #136]	; (8009edc <main+0xbc>)
 8009e54:	f7f7 fa08 	bl	8001268 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(I2C2_VDD_GPIO_Port, I2C2_VDD_Pin, SET);
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e5e:	481f      	ldr	r0, [pc, #124]	; (8009edc <main+0xbc>)
 8009e60:	f7f7 fa02 	bl	8001268 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C1_VDD_GPIO_Port, I2C1_VDD_Pin, SET);
 8009e64:	2201      	movs	r2, #1
 8009e66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009e6a:	481c      	ldr	r0, [pc, #112]	; (8009edc <main+0xbc>)
 8009e6c:	f7f7 f9fc 	bl	8001268 <HAL_GPIO_WritePin>

  uint8_t u8DeviceAddressList = 0x0E;
 8009e70:	230e      	movs	r3, #14
 8009e72:	70fb      	strb	r3, [r7, #3]

  MCP9808_InitCommunicationI2C1(&hi2c1, &u8DeviceAddressList, 1);
 8009e74:	1cfb      	adds	r3, r7, #3
 8009e76:	2201      	movs	r2, #1
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4819      	ldr	r0, [pc, #100]	; (8009ee0 <main+0xc0>)
 8009e7c:	f7f6 fb84 	bl	8000588 <MCP9808_InitCommunicationI2C1>

  long long counter = 0;
 8009e80:	f04f 0200 	mov.w	r2, #0
 8009e84:	f04f 0300 	mov.w	r3, #0
 8009e88:	e9c7 2302 	strd	r2, r3, [r7, #8]
  float output = 0.0;
 8009e8c:	f04f 0300 	mov.w	r3, #0
 8009e90:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8009e92:	2104      	movs	r1, #4
 8009e94:	4811      	ldr	r0, [pc, #68]	; (8009edc <main+0xbc>)
 8009e96:	f7f7 fa00 	bl	800129a <HAL_GPIO_TogglePin>
	  counter++;
 8009e9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e9e:	1c54      	adds	r4, r2, #1
 8009ea0:	f143 0500 	adc.w	r5, r3, #0
 8009ea4:	e9c7 4502 	strd	r4, r5, [r7, #8]
	  if(counter >= 72000)
 8009ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009eac:	480d      	ldr	r0, [pc, #52]	; (8009ee4 <main+0xc4>)
 8009eae:	f04f 0100 	mov.w	r1, #0
 8009eb2:	4290      	cmp	r0, r2
 8009eb4:	eb71 0303 	sbcs.w	r3, r1, r3
 8009eb8:	daeb      	bge.n	8009e92 <main+0x72>
	  {
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009eba:	2102      	movs	r1, #2
 8009ebc:	4807      	ldr	r0, [pc, #28]	; (8009edc <main+0xbc>)
 8009ebe:	f7f7 f9ec 	bl	800129a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	4808      	ldr	r0, [pc, #32]	; (8009ee8 <main+0xc8>)
 8009ec6:	f7f7 f9e8 	bl	800129a <HAL_GPIO_TogglePin>
		  MCP9808_CommunicateTaskI2C1();
 8009eca:	f7f6 fb01 	bl	80004d0 <MCP9808_CommunicateTaskI2C1>
		  counter = 0;
 8009ece:	f04f 0200 	mov.w	r2, #0
 8009ed2:	f04f 0300 	mov.w	r3, #0
 8009ed6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8009eda:	e7da      	b.n	8009e92 <main+0x72>
 8009edc:	40020800 	.word	0x40020800
 8009ee0:	20000454 	.word	0x20000454
 8009ee4:	0001193f 	.word	0x0001193f
 8009ee8:	40020000 	.word	0x40020000

08009eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b09a      	sub	sp, #104	; 0x68
 8009ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009ef2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009ef6:	2230      	movs	r2, #48	; 0x30
 8009ef8:	2100      	movs	r1, #0
 8009efa:	4618      	mov	r0, r3
 8009efc:	f001 f976 	bl	800b1ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f04:	2200      	movs	r2, #0
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	605a      	str	r2, [r3, #4]
 8009f0a:	609a      	str	r2, [r3, #8]
 8009f0c:	60da      	str	r2, [r3, #12]
 8009f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f10:	f107 030c 	add.w	r3, r7, #12
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	605a      	str	r2, [r3, #4]
 8009f1a:	609a      	str	r2, [r3, #8]
 8009f1c:	60da      	str	r2, [r3, #12]
 8009f1e:	611a      	str	r2, [r3, #16]
 8009f20:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f22:	2300      	movs	r3, #0
 8009f24:	60bb      	str	r3, [r7, #8]
 8009f26:	4b31      	ldr	r3, [pc, #196]	; (8009fec <SystemClock_Config+0x100>)
 8009f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2a:	4a30      	ldr	r2, [pc, #192]	; (8009fec <SystemClock_Config+0x100>)
 8009f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f30:	6413      	str	r3, [r2, #64]	; 0x40
 8009f32:	4b2e      	ldr	r3, [pc, #184]	; (8009fec <SystemClock_Config+0x100>)
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f3a:	60bb      	str	r3, [r7, #8]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f3e:	2300      	movs	r3, #0
 8009f40:	607b      	str	r3, [r7, #4]
 8009f42:	4b2b      	ldr	r3, [pc, #172]	; (8009ff0 <SystemClock_Config+0x104>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a2a      	ldr	r2, [pc, #168]	; (8009ff0 <SystemClock_Config+0x104>)
 8009f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f4c:	6013      	str	r3, [r2, #0]
 8009f4e:	4b28      	ldr	r3, [pc, #160]	; (8009ff0 <SystemClock_Config+0x104>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009f56:	607b      	str	r3, [r7, #4]
 8009f58:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8009f5a:	2305      	movs	r3, #5
 8009f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009f64:	2301      	movs	r3, #1
 8009f66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009f68:	2302      	movs	r3, #2
 8009f6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009f6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f70:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 12;
 8009f72:	230c      	movs	r3, #12
 8009f74:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 8009f76:	2348      	movs	r3, #72	; 0x48
 8009f78:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009f82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fa fcd0 	bl	800492c <HAL_RCC_OscConfig>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8009f92:	f000 f9ad 	bl	800a2f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009f96:	230f      	movs	r3, #15
 8009f98:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fa6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fb0:	2102      	movs	r1, #2
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fa ff30 	bl	8004e18 <HAL_RCC_ClockConfig>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8009fbe:	f000 f997 	bl	800a2f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fca:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009fcc:	f107 030c 	add.w	r3, r7, #12
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fb f919 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8009fdc:	f000 f988 	bl	800a2f0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8009fe0:	f7fb f800 	bl	8004fe4 <HAL_RCC_EnableCSS>
}
 8009fe4:	bf00      	nop
 8009fe6:	3768      	adds	r7, #104	; 0x68
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	40023800 	.word	0x40023800
 8009ff0:	40007000 	.word	0x40007000

08009ff4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009ff8:	4b12      	ldr	r3, [pc, #72]	; (800a044 <MX_I2C1_Init+0x50>)
 8009ffa:	4a13      	ldr	r2, [pc, #76]	; (800a048 <MX_I2C1_Init+0x54>)
 8009ffc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009ffe:	4b11      	ldr	r3, [pc, #68]	; (800a044 <MX_I2C1_Init+0x50>)
 800a000:	4a12      	ldr	r2, [pc, #72]	; (800a04c <MX_I2C1_Init+0x58>)
 800a002:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a004:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <MX_I2C1_Init+0x50>)
 800a006:	2200      	movs	r2, #0
 800a008:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a00a:	4b0e      	ldr	r3, [pc, #56]	; (800a044 <MX_I2C1_Init+0x50>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a010:	4b0c      	ldr	r3, [pc, #48]	; (800a044 <MX_I2C1_Init+0x50>)
 800a012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a016:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a018:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <MX_I2C1_Init+0x50>)
 800a01a:	2200      	movs	r2, #0
 800a01c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a01e:	4b09      	ldr	r3, [pc, #36]	; (800a044 <MX_I2C1_Init+0x50>)
 800a020:	2200      	movs	r2, #0
 800a022:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a024:	4b07      	ldr	r3, [pc, #28]	; (800a044 <MX_I2C1_Init+0x50>)
 800a026:	2200      	movs	r2, #0
 800a028:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a02a:	4b06      	ldr	r3, [pc, #24]	; (800a044 <MX_I2C1_Init+0x50>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a030:	4804      	ldr	r0, [pc, #16]	; (800a044 <MX_I2C1_Init+0x50>)
 800a032:	f7f7 f94d 	bl	80012d0 <HAL_I2C_Init>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a03c:	f000 f958 	bl	800a2f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a040:	bf00      	nop
 800a042:	bd80      	pop	{r7, pc}
 800a044:	20000454 	.word	0x20000454
 800a048:	40005400 	.word	0x40005400
 800a04c:	000186a0 	.word	0x000186a0

0800a050 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a054:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <MX_I2C2_Init+0x50>)
 800a056:	4a13      	ldr	r2, [pc, #76]	; (800a0a4 <MX_I2C2_Init+0x54>)
 800a058:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800a05a:	4b11      	ldr	r3, [pc, #68]	; (800a0a0 <MX_I2C2_Init+0x50>)
 800a05c:	4a12      	ldr	r2, [pc, #72]	; (800a0a8 <MX_I2C2_Init+0x58>)
 800a05e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a060:	4b0f      	ldr	r3, [pc, #60]	; (800a0a0 <MX_I2C2_Init+0x50>)
 800a062:	2200      	movs	r2, #0
 800a064:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800a066:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <MX_I2C2_Init+0x50>)
 800a068:	2200      	movs	r2, #0
 800a06a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a06c:	4b0c      	ldr	r3, [pc, #48]	; (800a0a0 <MX_I2C2_Init+0x50>)
 800a06e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a072:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a074:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <MX_I2C2_Init+0x50>)
 800a076:	2200      	movs	r2, #0
 800a078:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800a07a:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <MX_I2C2_Init+0x50>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a080:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <MX_I2C2_Init+0x50>)
 800a082:	2200      	movs	r2, #0
 800a084:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a086:	4b06      	ldr	r3, [pc, #24]	; (800a0a0 <MX_I2C2_Init+0x50>)
 800a088:	2200      	movs	r2, #0
 800a08a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a08c:	4804      	ldr	r0, [pc, #16]	; (800a0a0 <MX_I2C2_Init+0x50>)
 800a08e:	f7f7 f91f 	bl	80012d0 <HAL_I2C_Init>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800a098:	f000 f92a 	bl	800a2f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a09c:	bf00      	nop
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	200004a8 	.word	0x200004a8
 800a0a4:	40005800 	.word	0x40005800
 800a0a8:	000186a0 	.word	0x000186a0

0800a0ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a0b0:	4b0f      	ldr	r3, [pc, #60]	; (800a0f0 <MX_RTC_Init+0x44>)
 800a0b2:	4a10      	ldr	r2, [pc, #64]	; (800a0f4 <MX_RTC_Init+0x48>)
 800a0b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a0b6:	4b0e      	ldr	r3, [pc, #56]	; (800a0f0 <MX_RTC_Init+0x44>)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a0bc:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <MX_RTC_Init+0x44>)
 800a0be:	227f      	movs	r2, #127	; 0x7f
 800a0c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a0c2:	4b0b      	ldr	r3, [pc, #44]	; (800a0f0 <MX_RTC_Init+0x44>)
 800a0c4:	22ff      	movs	r2, #255	; 0xff
 800a0c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a0c8:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <MX_RTC_Init+0x44>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a0ce:	4b08      	ldr	r3, [pc, #32]	; (800a0f0 <MX_RTC_Init+0x44>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a0d4:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <MX_RTC_Init+0x44>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a0da:	4805      	ldr	r0, [pc, #20]	; (800a0f0 <MX_RTC_Init+0x44>)
 800a0dc:	f7fb f984 	bl	80053e8 <HAL_RTC_Init>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800a0e6:	f000 f903 	bl	800a2f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a0ea:	bf00      	nop
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000540 	.word	0x20000540
 800a0f4:	40002800 	.word	0x40002800

0800a0f8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800a0fc:	4b14      	ldr	r3, [pc, #80]	; (800a150 <MX_SDIO_SD_Init+0x58>)
 800a0fe:	4a15      	ldr	r2, [pc, #84]	; (800a154 <MX_SDIO_SD_Init+0x5c>)
 800a100:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a102:	4b13      	ldr	r3, [pc, #76]	; (800a150 <MX_SDIO_SD_Init+0x58>)
 800a104:	2200      	movs	r2, #0
 800a106:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a108:	4b11      	ldr	r3, [pc, #68]	; (800a150 <MX_SDIO_SD_Init+0x58>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a10e:	4b10      	ldr	r3, [pc, #64]	; (800a150 <MX_SDIO_SD_Init+0x58>)
 800a110:	2200      	movs	r2, #0
 800a112:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a114:	4b0e      	ldr	r3, [pc, #56]	; (800a150 <MX_SDIO_SD_Init+0x58>)
 800a116:	2200      	movs	r2, #0
 800a118:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a11a:	4b0d      	ldr	r3, [pc, #52]	; (800a150 <MX_SDIO_SD_Init+0x58>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800a120:	4b0b      	ldr	r3, [pc, #44]	; (800a150 <MX_SDIO_SD_Init+0x58>)
 800a122:	2200      	movs	r2, #0
 800a124:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800a126:	480a      	ldr	r0, [pc, #40]	; (800a150 <MX_SDIO_SD_Init+0x58>)
 800a128:	f7fb fa43 	bl	80055b2 <HAL_SD_Init>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800a132:	f000 f8dd 	bl	800a2f0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a136:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a13a:	4805      	ldr	r0, [pc, #20]	; (800a150 <MX_SDIO_SD_Init+0x58>)
 800a13c:	f7fb fc8c 	bl	8005a58 <HAL_SD_ConfigWideBusOperation>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800a146:	f000 f8d3 	bl	800a2f0 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800a14a:	bf00      	nop
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	20000560 	.word	0x20000560
 800a154:	40012c00 	.word	0x40012c00

0800a158 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a15c:	4b11      	ldr	r3, [pc, #68]	; (800a1a4 <MX_USART1_UART_Init+0x4c>)
 800a15e:	4a12      	ldr	r2, [pc, #72]	; (800a1a8 <MX_USART1_UART_Init+0x50>)
 800a160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a162:	4b10      	ldr	r3, [pc, #64]	; (800a1a4 <MX_USART1_UART_Init+0x4c>)
 800a164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a16a:	4b0e      	ldr	r3, [pc, #56]	; (800a1a4 <MX_USART1_UART_Init+0x4c>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a170:	4b0c      	ldr	r3, [pc, #48]	; (800a1a4 <MX_USART1_UART_Init+0x4c>)
 800a172:	2200      	movs	r2, #0
 800a174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a176:	4b0b      	ldr	r3, [pc, #44]	; (800a1a4 <MX_USART1_UART_Init+0x4c>)
 800a178:	2200      	movs	r2, #0
 800a17a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a17c:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <MX_USART1_UART_Init+0x4c>)
 800a17e:	220c      	movs	r2, #12
 800a180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a182:	4b08      	ldr	r3, [pc, #32]	; (800a1a4 <MX_USART1_UART_Init+0x4c>)
 800a184:	2200      	movs	r2, #0
 800a186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a188:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <MX_USART1_UART_Init+0x4c>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a18e:	4805      	ldr	r0, [pc, #20]	; (800a1a4 <MX_USART1_UART_Init+0x4c>)
 800a190:	f7fb ffbf 	bl	8006112 <HAL_UART_Init>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a19a:	f000 f8a9 	bl	800a2f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a19e:	bf00      	nop
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	200004fc 	.word	0x200004fc
 800a1a8:	40011000 	.word	0x40011000

0800a1ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	607b      	str	r3, [r7, #4]
 800a1b6:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <MX_DMA_Init+0x3c>)
 800a1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ba:	4a0b      	ldr	r2, [pc, #44]	; (800a1e8 <MX_DMA_Init+0x3c>)
 800a1bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1c0:	6313      	str	r3, [r2, #48]	; 0x30
 800a1c2:	4b09      	ldr	r3, [pc, #36]	; (800a1e8 <MX_DMA_Init+0x3c>)
 800a1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1ca:	607b      	str	r3, [r7, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	200c      	movs	r0, #12
 800a1d4:	f7f6 fb73 	bl	80008be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800a1d8:	200c      	movs	r0, #12
 800a1da:	f7f6 fb8c 	bl	80008f6 <HAL_NVIC_EnableIRQ>

}
 800a1de:	bf00      	nop
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	40023800 	.word	0x40023800

0800a1ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b08a      	sub	sp, #40	; 0x28
 800a1f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1f2:	f107 0314 	add.w	r3, r7, #20
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	605a      	str	r2, [r3, #4]
 800a1fc:	609a      	str	r2, [r3, #8]
 800a1fe:	60da      	str	r2, [r3, #12]
 800a200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a202:	2300      	movs	r3, #0
 800a204:	613b      	str	r3, [r7, #16]
 800a206:	4b37      	ldr	r3, [pc, #220]	; (800a2e4 <MX_GPIO_Init+0xf8>)
 800a208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20a:	4a36      	ldr	r2, [pc, #216]	; (800a2e4 <MX_GPIO_Init+0xf8>)
 800a20c:	f043 0304 	orr.w	r3, r3, #4
 800a210:	6313      	str	r3, [r2, #48]	; 0x30
 800a212:	4b34      	ldr	r3, [pc, #208]	; (800a2e4 <MX_GPIO_Init+0xf8>)
 800a214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a216:	f003 0304 	and.w	r3, r3, #4
 800a21a:	613b      	str	r3, [r7, #16]
 800a21c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a21e:	2300      	movs	r3, #0
 800a220:	60fb      	str	r3, [r7, #12]
 800a222:	4b30      	ldr	r3, [pc, #192]	; (800a2e4 <MX_GPIO_Init+0xf8>)
 800a224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a226:	4a2f      	ldr	r2, [pc, #188]	; (800a2e4 <MX_GPIO_Init+0xf8>)
 800a228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a22c:	6313      	str	r3, [r2, #48]	; 0x30
 800a22e:	4b2d      	ldr	r3, [pc, #180]	; (800a2e4 <MX_GPIO_Init+0xf8>)
 800a230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a23a:	2300      	movs	r3, #0
 800a23c:	60bb      	str	r3, [r7, #8]
 800a23e:	4b29      	ldr	r3, [pc, #164]	; (800a2e4 <MX_GPIO_Init+0xf8>)
 800a240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a242:	4a28      	ldr	r2, [pc, #160]	; (800a2e4 <MX_GPIO_Init+0xf8>)
 800a244:	f043 0301 	orr.w	r3, r3, #1
 800a248:	6313      	str	r3, [r2, #48]	; 0x30
 800a24a:	4b26      	ldr	r3, [pc, #152]	; (800a2e4 <MX_GPIO_Init+0xf8>)
 800a24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	60bb      	str	r3, [r7, #8]
 800a254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a256:	2300      	movs	r3, #0
 800a258:	607b      	str	r3, [r7, #4]
 800a25a:	4b22      	ldr	r3, [pc, #136]	; (800a2e4 <MX_GPIO_Init+0xf8>)
 800a25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25e:	4a21      	ldr	r2, [pc, #132]	; (800a2e4 <MX_GPIO_Init+0xf8>)
 800a260:	f043 0302 	orr.w	r3, r3, #2
 800a264:	6313      	str	r3, [r2, #48]	; 0x30
 800a266:	4b1f      	ldr	r3, [pc, #124]	; (800a2e4 <MX_GPIO_Init+0xf8>)
 800a268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26a:	f003 0302 	and.w	r3, r3, #2
 800a26e:	607b      	str	r3, [r7, #4]
 800a270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800a272:	2200      	movs	r2, #0
 800a274:	f243 010f 	movw	r1, #12303	; 0x300f
 800a278:	481b      	ldr	r0, [pc, #108]	; (800a2e8 <MX_GPIO_Init+0xfc>)
 800a27a:	f7f6 fff5 	bl	8001268 <HAL_GPIO_WritePin>
                          |LED3_Pin|I2C1_VDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN_0_Pin|PIN_1_Pin|PIN_2_Pin, GPIO_PIN_RESET);
 800a27e:	2200      	movs	r2, #0
 800a280:	2107      	movs	r1, #7
 800a282:	481a      	ldr	r0, [pc, #104]	; (800a2ec <MX_GPIO_Init+0x100>)
 800a284:	f7f6 fff0 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I2C2_VDD_Pin LED0_Pin LED1_Pin LED2_Pin
                           LED3_Pin I2C1_VDD_Pin */
  GPIO_InitStruct.Pin = I2C2_VDD_Pin|LED0_Pin|LED1_Pin|LED2_Pin
 800a288:	f243 030f 	movw	r3, #12303	; 0x300f
 800a28c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|I2C1_VDD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a28e:	2301      	movs	r3, #1
 800a290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a292:	2300      	movs	r3, #0
 800a294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a296:	2300      	movs	r3, #0
 800a298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a29a:	f107 0314 	add.w	r3, r7, #20
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4811      	ldr	r0, [pc, #68]	; (800a2e8 <MX_GPIO_Init+0xfc>)
 800a2a2:	f7f6 fe5d 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_0_Pin PIN_1_Pin PIN_2_Pin */
  GPIO_InitStruct.Pin = PIN_0_Pin|PIN_1_Pin|PIN_2_Pin;
 800a2a6:	2307      	movs	r3, #7
 800a2a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2b6:	f107 0314 	add.w	r3, r7, #20
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	480b      	ldr	r0, [pc, #44]	; (800a2ec <MX_GPIO_Init+0x100>)
 800a2be:	f7f6 fe4f 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VSENSE_Pin */
  GPIO_InitStruct.Pin = USB_VSENSE_Pin;
 800a2c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VSENSE_GPIO_Port, &GPIO_InitStruct);
 800a2d0:	f107 0314 	add.w	r3, r7, #20
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4805      	ldr	r0, [pc, #20]	; (800a2ec <MX_GPIO_Init+0x100>)
 800a2d8:	f7f6 fe42 	bl	8000f60 <HAL_GPIO_Init>

}
 800a2dc:	bf00      	nop
 800a2de:	3728      	adds	r7, #40	; 0x28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	40023800 	.word	0x40023800
 800a2e8:	40020800 	.word	0x40020800
 800a2ec:	40020000 	.word	0x40020000

0800a2f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a2f4:	b672      	cpsid	i
}
 800a2f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a2f8:	e7fe      	b.n	800a2f8 <Error_Handler+0x8>
	...

0800a2fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a302:	2300      	movs	r3, #0
 800a304:	607b      	str	r3, [r7, #4]
 800a306:	4b10      	ldr	r3, [pc, #64]	; (800a348 <HAL_MspInit+0x4c>)
 800a308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a30a:	4a0f      	ldr	r2, [pc, #60]	; (800a348 <HAL_MspInit+0x4c>)
 800a30c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a310:	6453      	str	r3, [r2, #68]	; 0x44
 800a312:	4b0d      	ldr	r3, [pc, #52]	; (800a348 <HAL_MspInit+0x4c>)
 800a314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a31a:	607b      	str	r3, [r7, #4]
 800a31c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a31e:	2300      	movs	r3, #0
 800a320:	603b      	str	r3, [r7, #0]
 800a322:	4b09      	ldr	r3, [pc, #36]	; (800a348 <HAL_MspInit+0x4c>)
 800a324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a326:	4a08      	ldr	r2, [pc, #32]	; (800a348 <HAL_MspInit+0x4c>)
 800a328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a32c:	6413      	str	r3, [r2, #64]	; 0x40
 800a32e:	4b06      	ldr	r3, [pc, #24]	; (800a348 <HAL_MspInit+0x4c>)
 800a330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a336:	603b      	str	r3, [r7, #0]
 800a338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	40023800 	.word	0x40023800

0800a34c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08c      	sub	sp, #48	; 0x30
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a354:	f107 031c 	add.w	r3, r7, #28
 800a358:	2200      	movs	r2, #0
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	605a      	str	r2, [r3, #4]
 800a35e:	609a      	str	r2, [r3, #8]
 800a360:	60da      	str	r2, [r3, #12]
 800a362:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a55      	ldr	r2, [pc, #340]	; (800a4c0 <HAL_I2C_MspInit+0x174>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d162      	bne.n	800a434 <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a36e:	2300      	movs	r3, #0
 800a370:	61bb      	str	r3, [r7, #24]
 800a372:	4b54      	ldr	r3, [pc, #336]	; (800a4c4 <HAL_I2C_MspInit+0x178>)
 800a374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a376:	4a53      	ldr	r2, [pc, #332]	; (800a4c4 <HAL_I2C_MspInit+0x178>)
 800a378:	f043 0302 	orr.w	r3, r3, #2
 800a37c:	6313      	str	r3, [r2, #48]	; 0x30
 800a37e:	4b51      	ldr	r3, [pc, #324]	; (800a4c4 <HAL_I2C_MspInit+0x178>)
 800a380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a382:	f003 0302 	and.w	r3, r3, #2
 800a386:	61bb      	str	r3, [r7, #24]
 800a388:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a38a:	23c0      	movs	r3, #192	; 0xc0
 800a38c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a38e:	2312      	movs	r3, #18
 800a390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a392:	2301      	movs	r3, #1
 800a394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a396:	2303      	movs	r3, #3
 800a398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a39a:	2304      	movs	r3, #4
 800a39c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a39e:	f107 031c 	add.w	r3, r7, #28
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4848      	ldr	r0, [pc, #288]	; (800a4c8 <HAL_I2C_MspInit+0x17c>)
 800a3a6:	f7f6 fddb 	bl	8000f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	617b      	str	r3, [r7, #20]
 800a3ae:	4b45      	ldr	r3, [pc, #276]	; (800a4c4 <HAL_I2C_MspInit+0x178>)
 800a3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b2:	4a44      	ldr	r2, [pc, #272]	; (800a4c4 <HAL_I2C_MspInit+0x178>)
 800a3b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3b8:	6413      	str	r3, [r2, #64]	; 0x40
 800a3ba:	4b42      	ldr	r3, [pc, #264]	; (800a4c4 <HAL_I2C_MspInit+0x178>)
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3c2:	617b      	str	r3, [r7, #20]
 800a3c4:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800a3c6:	4b41      	ldr	r3, [pc, #260]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a3c8:	4a41      	ldr	r2, [pc, #260]	; (800a4d0 <HAL_I2C_MspInit+0x184>)
 800a3ca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800a3cc:	4b3f      	ldr	r3, [pc, #252]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a3d2:	4b3e      	ldr	r3, [pc, #248]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a3d4:	2240      	movs	r2, #64	; 0x40
 800a3d6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a3d8:	4b3c      	ldr	r3, [pc, #240]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a3de:	4b3b      	ldr	r3, [pc, #236]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a3e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a3e4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a3e6:	4b39      	ldr	r3, [pc, #228]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a3ec:	4b37      	ldr	r3, [pc, #220]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800a3f2:	4b36      	ldr	r3, [pc, #216]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a3f8:	4b34      	ldr	r3, [pc, #208]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a3fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a3fe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a400:	4b32      	ldr	r3, [pc, #200]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a402:	2200      	movs	r2, #0
 800a404:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800a406:	4831      	ldr	r0, [pc, #196]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a408:	f7f6 fa90 	bl	800092c <HAL_DMA_Init>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800a412:	f7ff ff6d 	bl	800a2f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a2c      	ldr	r2, [pc, #176]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a41a:	635a      	str	r2, [r3, #52]	; 0x34
 800a41c:	4a2b      	ldr	r2, [pc, #172]	; (800a4cc <HAL_I2C_MspInit+0x180>)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800a422:	2200      	movs	r2, #0
 800a424:	2100      	movs	r1, #0
 800a426:	201f      	movs	r0, #31
 800a428:	f7f6 fa49 	bl	80008be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800a42c:	201f      	movs	r0, #31
 800a42e:	f7f6 fa62 	bl	80008f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800a432:	e041      	b.n	800a4b8 <HAL_I2C_MspInit+0x16c>
  else if(hi2c->Instance==I2C2)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a26      	ldr	r2, [pc, #152]	; (800a4d4 <HAL_I2C_MspInit+0x188>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d13c      	bne.n	800a4b8 <HAL_I2C_MspInit+0x16c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a43e:	2300      	movs	r3, #0
 800a440:	613b      	str	r3, [r7, #16]
 800a442:	4b20      	ldr	r3, [pc, #128]	; (800a4c4 <HAL_I2C_MspInit+0x178>)
 800a444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a446:	4a1f      	ldr	r2, [pc, #124]	; (800a4c4 <HAL_I2C_MspInit+0x178>)
 800a448:	f043 0302 	orr.w	r3, r3, #2
 800a44c:	6313      	str	r3, [r2, #48]	; 0x30
 800a44e:	4b1d      	ldr	r3, [pc, #116]	; (800a4c4 <HAL_I2C_MspInit+0x178>)
 800a450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a452:	f003 0302 	and.w	r3, r3, #2
 800a456:	613b      	str	r3, [r7, #16]
 800a458:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a45a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a45e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a460:	2312      	movs	r3, #18
 800a462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a464:	2301      	movs	r3, #1
 800a466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a468:	2303      	movs	r3, #3
 800a46a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a46c:	2304      	movs	r3, #4
 800a46e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a470:	f107 031c 	add.w	r3, r7, #28
 800a474:	4619      	mov	r1, r3
 800a476:	4814      	ldr	r0, [pc, #80]	; (800a4c8 <HAL_I2C_MspInit+0x17c>)
 800a478:	f7f6 fd72 	bl	8000f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a47c:	2308      	movs	r3, #8
 800a47e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a480:	2312      	movs	r3, #18
 800a482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a484:	2301      	movs	r3, #1
 800a486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a488:	2303      	movs	r3, #3
 800a48a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800a48c:	2309      	movs	r3, #9
 800a48e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a490:	f107 031c 	add.w	r3, r7, #28
 800a494:	4619      	mov	r1, r3
 800a496:	480c      	ldr	r0, [pc, #48]	; (800a4c8 <HAL_I2C_MspInit+0x17c>)
 800a498:	f7f6 fd62 	bl	8000f60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a49c:	2300      	movs	r3, #0
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	4b08      	ldr	r3, [pc, #32]	; (800a4c4 <HAL_I2C_MspInit+0x178>)
 800a4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a4:	4a07      	ldr	r2, [pc, #28]	; (800a4c4 <HAL_I2C_MspInit+0x178>)
 800a4a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a4aa:	6413      	str	r3, [r2, #64]	; 0x40
 800a4ac:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <HAL_I2C_MspInit+0x178>)
 800a4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4b4:	60fb      	str	r3, [r7, #12]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
}
 800a4b8:	bf00      	nop
 800a4ba:	3730      	adds	r7, #48	; 0x30
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	40005400 	.word	0x40005400
 800a4c4:	40023800 	.word	0x40023800
 800a4c8:	40020400 	.word	0x40020400
 800a4cc:	200003f4 	.word	0x200003f4
 800a4d0:	40026028 	.word	0x40026028
 800a4d4:	40005800 	.word	0x40005800

0800a4d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a05      	ldr	r2, [pc, #20]	; (800a4fc <HAL_RTC_MspInit+0x24>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d102      	bne.n	800a4f0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a4ea:	4b05      	ldr	r3, [pc, #20]	; (800a500 <HAL_RTC_MspInit+0x28>)
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr
 800a4fc:	40002800 	.word	0x40002800
 800a500:	42470e3c 	.word	0x42470e3c

0800a504 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b08c      	sub	sp, #48	; 0x30
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a50c:	f107 031c 	add.w	r3, r7, #28
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	605a      	str	r2, [r3, #4]
 800a516:	609a      	str	r2, [r3, #8]
 800a518:	60da      	str	r2, [r3, #12]
 800a51a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a38      	ldr	r2, [pc, #224]	; (800a604 <HAL_SD_MspInit+0x100>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d169      	bne.n	800a5fa <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800a526:	2300      	movs	r3, #0
 800a528:	61bb      	str	r3, [r7, #24]
 800a52a:	4b37      	ldr	r3, [pc, #220]	; (800a608 <HAL_SD_MspInit+0x104>)
 800a52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a52e:	4a36      	ldr	r2, [pc, #216]	; (800a608 <HAL_SD_MspInit+0x104>)
 800a530:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a534:	6453      	str	r3, [r2, #68]	; 0x44
 800a536:	4b34      	ldr	r3, [pc, #208]	; (800a608 <HAL_SD_MspInit+0x104>)
 800a538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a53e:	61bb      	str	r3, [r7, #24]
 800a540:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a542:	2300      	movs	r3, #0
 800a544:	617b      	str	r3, [r7, #20]
 800a546:	4b30      	ldr	r3, [pc, #192]	; (800a608 <HAL_SD_MspInit+0x104>)
 800a548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54a:	4a2f      	ldr	r2, [pc, #188]	; (800a608 <HAL_SD_MspInit+0x104>)
 800a54c:	f043 0301 	orr.w	r3, r3, #1
 800a550:	6313      	str	r3, [r2, #48]	; 0x30
 800a552:	4b2d      	ldr	r3, [pc, #180]	; (800a608 <HAL_SD_MspInit+0x104>)
 800a554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	617b      	str	r3, [r7, #20]
 800a55c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a55e:	2300      	movs	r3, #0
 800a560:	613b      	str	r3, [r7, #16]
 800a562:	4b29      	ldr	r3, [pc, #164]	; (800a608 <HAL_SD_MspInit+0x104>)
 800a564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a566:	4a28      	ldr	r2, [pc, #160]	; (800a608 <HAL_SD_MspInit+0x104>)
 800a568:	f043 0302 	orr.w	r3, r3, #2
 800a56c:	6313      	str	r3, [r2, #48]	; 0x30
 800a56e:	4b26      	ldr	r3, [pc, #152]	; (800a608 <HAL_SD_MspInit+0x104>)
 800a570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a572:	f003 0302 	and.w	r3, r3, #2
 800a576:	613b      	str	r3, [r7, #16]
 800a578:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	4b22      	ldr	r3, [pc, #136]	; (800a608 <HAL_SD_MspInit+0x104>)
 800a580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a582:	4a21      	ldr	r2, [pc, #132]	; (800a608 <HAL_SD_MspInit+0x104>)
 800a584:	f043 0304 	orr.w	r3, r3, #4
 800a588:	6313      	str	r3, [r2, #48]	; 0x30
 800a58a:	4b1f      	ldr	r3, [pc, #124]	; (800a608 <HAL_SD_MspInit+0x104>)
 800a58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58e:	f003 0304 	and.w	r3, r3, #4
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a596:	2340      	movs	r3, #64	; 0x40
 800a598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a59a:	2302      	movs	r3, #2
 800a59c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a5a6:	230c      	movs	r3, #12
 800a5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5aa:	f107 031c 	add.w	r3, r7, #28
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	4816      	ldr	r0, [pc, #88]	; (800a60c <HAL_SD_MspInit+0x108>)
 800a5b2:	f7f6 fcd5 	bl	8000f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a5b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5bc:	2302      	movs	r3, #2
 800a5be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a5c8:	230c      	movs	r3, #12
 800a5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5cc:	f107 031c 	add.w	r3, r7, #28
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	480f      	ldr	r0, [pc, #60]	; (800a610 <HAL_SD_MspInit+0x10c>)
 800a5d4:	f7f6 fcc4 	bl	8000f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800a5d8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800a5dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5de:	2302      	movs	r3, #2
 800a5e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a5ea:	230c      	movs	r3, #12
 800a5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5ee:	f107 031c 	add.w	r3, r7, #28
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4807      	ldr	r0, [pc, #28]	; (800a614 <HAL_SD_MspInit+0x110>)
 800a5f6:	f7f6 fcb3 	bl	8000f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800a5fa:	bf00      	nop
 800a5fc:	3730      	adds	r7, #48	; 0x30
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	40012c00 	.word	0x40012c00
 800a608:	40023800 	.word	0x40023800
 800a60c:	40020000 	.word	0x40020000
 800a610:	40020400 	.word	0x40020400
 800a614:	40020800 	.word	0x40020800

0800a618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08a      	sub	sp, #40	; 0x28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a620:	f107 0314 	add.w	r3, r7, #20
 800a624:	2200      	movs	r2, #0
 800a626:	601a      	str	r2, [r3, #0]
 800a628:	605a      	str	r2, [r3, #4]
 800a62a:	609a      	str	r2, [r3, #8]
 800a62c:	60da      	str	r2, [r3, #12]
 800a62e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a19      	ldr	r2, [pc, #100]	; (800a69c <HAL_UART_MspInit+0x84>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d12c      	bne.n	800a694 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a63a:	2300      	movs	r3, #0
 800a63c:	613b      	str	r3, [r7, #16]
 800a63e:	4b18      	ldr	r3, [pc, #96]	; (800a6a0 <HAL_UART_MspInit+0x88>)
 800a640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a642:	4a17      	ldr	r2, [pc, #92]	; (800a6a0 <HAL_UART_MspInit+0x88>)
 800a644:	f043 0310 	orr.w	r3, r3, #16
 800a648:	6453      	str	r3, [r2, #68]	; 0x44
 800a64a:	4b15      	ldr	r3, [pc, #84]	; (800a6a0 <HAL_UART_MspInit+0x88>)
 800a64c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64e:	f003 0310 	and.w	r3, r3, #16
 800a652:	613b      	str	r3, [r7, #16]
 800a654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a656:	2300      	movs	r3, #0
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	4b11      	ldr	r3, [pc, #68]	; (800a6a0 <HAL_UART_MspInit+0x88>)
 800a65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65e:	4a10      	ldr	r2, [pc, #64]	; (800a6a0 <HAL_UART_MspInit+0x88>)
 800a660:	f043 0301 	orr.w	r3, r3, #1
 800a664:	6313      	str	r3, [r2, #48]	; 0x30
 800a666:	4b0e      	ldr	r3, [pc, #56]	; (800a6a0 <HAL_UART_MspInit+0x88>)
 800a668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800a672:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800a676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a678:	2302      	movs	r3, #2
 800a67a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a680:	2303      	movs	r3, #3
 800a682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a684:	2307      	movs	r3, #7
 800a686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a688:	f107 0314 	add.w	r3, r7, #20
 800a68c:	4619      	mov	r1, r3
 800a68e:	4805      	ldr	r0, [pc, #20]	; (800a6a4 <HAL_UART_MspInit+0x8c>)
 800a690:	f7f6 fc66 	bl	8000f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a694:	bf00      	nop
 800a696:	3728      	adds	r7, #40	; 0x28
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	40011000 	.word	0x40011000
 800a6a0:	40023800 	.word	0x40023800
 800a6a4:	40020000 	.word	0x40020000

0800a6a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800a6ac:	f7fa fd90 	bl	80051d0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a6b0:	e7fe      	b.n	800a6b0 <NMI_Handler+0x8>

0800a6b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a6b6:	e7fe      	b.n	800a6b6 <HardFault_Handler+0x4>

0800a6b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a6bc:	e7fe      	b.n	800a6bc <MemManage_Handler+0x4>

0800a6be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a6be:	b480      	push	{r7}
 800a6c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a6c2:	e7fe      	b.n	800a6c2 <BusFault_Handler+0x4>

0800a6c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a6c8:	e7fe      	b.n	800a6c8 <UsageFault_Handler+0x4>

0800a6ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a6ce:	bf00      	nop
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a6dc:	bf00      	nop
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a6ea:	bf00      	nop
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a6f8:	f7f5 ffc2 	bl	8000680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a6fc:	bf00      	nop
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800a704:	4802      	ldr	r0, [pc, #8]	; (800a710 <DMA1_Stream1_IRQHandler+0x10>)
 800a706:	f7f6 f9e1 	bl	8000acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800a70a:	bf00      	nop
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	200003f4 	.word	0x200003f4

0800a714 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800a718:	4802      	ldr	r0, [pc, #8]	; (800a724 <I2C1_EV_IRQHandler+0x10>)
 800a71a:	f7f7 f943 	bl	80019a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800a71e:	bf00      	nop
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	20000454 	.word	0x20000454

0800a728 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a72c:	4802      	ldr	r0, [pc, #8]	; (800a738 <OTG_FS_IRQHandler+0x10>)
 800a72e:	f7f9 f8c9 	bl	80038c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a732:	bf00      	nop
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	200018b4 	.word	0x200018b4

0800a73c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a73c:	b480      	push	{r7}
 800a73e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a740:	4b06      	ldr	r3, [pc, #24]	; (800a75c <SystemInit+0x20>)
 800a742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a746:	4a05      	ldr	r2, [pc, #20]	; (800a75c <SystemInit+0x20>)
 800a748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a74c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a750:	bf00      	nop
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	e000ed00 	.word	0xe000ed00

0800a760 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a764:	2200      	movs	r2, #0
 800a766:	4912      	ldr	r1, [pc, #72]	; (800a7b0 <MX_USB_DEVICE_Init+0x50>)
 800a768:	4812      	ldr	r0, [pc, #72]	; (800a7b4 <MX_USB_DEVICE_Init+0x54>)
 800a76a:	f7fe f9ef 	bl	8008b4c <USBD_Init>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a774:	f7ff fdbc 	bl	800a2f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a778:	490f      	ldr	r1, [pc, #60]	; (800a7b8 <MX_USB_DEVICE_Init+0x58>)
 800a77a:	480e      	ldr	r0, [pc, #56]	; (800a7b4 <MX_USB_DEVICE_Init+0x54>)
 800a77c:	f7fe fa16 	bl	8008bac <USBD_RegisterClass>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d001      	beq.n	800a78a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a786:	f7ff fdb3 	bl	800a2f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a78a:	490c      	ldr	r1, [pc, #48]	; (800a7bc <MX_USB_DEVICE_Init+0x5c>)
 800a78c:	4809      	ldr	r0, [pc, #36]	; (800a7b4 <MX_USB_DEVICE_Init+0x54>)
 800a78e:	f7fe f967 	bl	8008a60 <USBD_CDC_RegisterInterface>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a798:	f7ff fdaa 	bl	800a2f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a79c:	4805      	ldr	r0, [pc, #20]	; (800a7b4 <MX_USB_DEVICE_Init+0x54>)
 800a79e:	f7fe fa2c 	bl	8008bfa <USBD_Start>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7a8:	f7ff fda2 	bl	800a2f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7ac:	bf00      	nop
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	20000130 	.word	0x20000130
 800a7b4:	200005e4 	.word	0x200005e4
 800a7b8:	20000014 	.word	0x20000014
 800a7bc:	2000011c 	.word	0x2000011c

0800a7c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4905      	ldr	r1, [pc, #20]	; (800a7dc <CDC_Init_FS+0x1c>)
 800a7c8:	4805      	ldr	r0, [pc, #20]	; (800a7e0 <CDC_Init_FS+0x20>)
 800a7ca:	f7fe f95e 	bl	8008a8a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7ce:	4905      	ldr	r1, [pc, #20]	; (800a7e4 <CDC_Init_FS+0x24>)
 800a7d0:	4803      	ldr	r0, [pc, #12]	; (800a7e0 <CDC_Init_FS+0x20>)
 800a7d2:	f7fe f978 	bl	8008ac6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	200010b4 	.word	0x200010b4
 800a7e0:	200005e4 	.word	0x200005e4
 800a7e4:	200008b4 	.word	0x200008b4

0800a7e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a7ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	4603      	mov	r3, r0
 800a800:	6039      	str	r1, [r7, #0]
 800a802:	71fb      	strb	r3, [r7, #7]
 800a804:	4613      	mov	r3, r2
 800a806:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	2b23      	cmp	r3, #35	; 0x23
 800a80c:	d84a      	bhi.n	800a8a4 <CDC_Control_FS+0xac>
 800a80e:	a201      	add	r2, pc, #4	; (adr r2, 800a814 <CDC_Control_FS+0x1c>)
 800a810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a814:	0800a8a5 	.word	0x0800a8a5
 800a818:	0800a8a5 	.word	0x0800a8a5
 800a81c:	0800a8a5 	.word	0x0800a8a5
 800a820:	0800a8a5 	.word	0x0800a8a5
 800a824:	0800a8a5 	.word	0x0800a8a5
 800a828:	0800a8a5 	.word	0x0800a8a5
 800a82c:	0800a8a5 	.word	0x0800a8a5
 800a830:	0800a8a5 	.word	0x0800a8a5
 800a834:	0800a8a5 	.word	0x0800a8a5
 800a838:	0800a8a5 	.word	0x0800a8a5
 800a83c:	0800a8a5 	.word	0x0800a8a5
 800a840:	0800a8a5 	.word	0x0800a8a5
 800a844:	0800a8a5 	.word	0x0800a8a5
 800a848:	0800a8a5 	.word	0x0800a8a5
 800a84c:	0800a8a5 	.word	0x0800a8a5
 800a850:	0800a8a5 	.word	0x0800a8a5
 800a854:	0800a8a5 	.word	0x0800a8a5
 800a858:	0800a8a5 	.word	0x0800a8a5
 800a85c:	0800a8a5 	.word	0x0800a8a5
 800a860:	0800a8a5 	.word	0x0800a8a5
 800a864:	0800a8a5 	.word	0x0800a8a5
 800a868:	0800a8a5 	.word	0x0800a8a5
 800a86c:	0800a8a5 	.word	0x0800a8a5
 800a870:	0800a8a5 	.word	0x0800a8a5
 800a874:	0800a8a5 	.word	0x0800a8a5
 800a878:	0800a8a5 	.word	0x0800a8a5
 800a87c:	0800a8a5 	.word	0x0800a8a5
 800a880:	0800a8a5 	.word	0x0800a8a5
 800a884:	0800a8a5 	.word	0x0800a8a5
 800a888:	0800a8a5 	.word	0x0800a8a5
 800a88c:	0800a8a5 	.word	0x0800a8a5
 800a890:	0800a8a5 	.word	0x0800a8a5
 800a894:	0800a8a5 	.word	0x0800a8a5
 800a898:	0800a8a5 	.word	0x0800a8a5
 800a89c:	0800a8a5 	.word	0x0800a8a5
 800a8a0:	0800a8a5 	.word	0x0800a8a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a8a4:	bf00      	nop
  }

  return (USBD_OK);
 800a8a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a8be:	6879      	ldr	r1, [r7, #4]
 800a8c0:	4805      	ldr	r0, [pc, #20]	; (800a8d8 <CDC_Receive_FS+0x24>)
 800a8c2:	f7fe f900 	bl	8008ac6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a8c6:	4804      	ldr	r0, [pc, #16]	; (800a8d8 <CDC_Receive_FS+0x24>)
 800a8c8:	f7fe f916 	bl	8008af8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a8cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	200005e4 	.word	0x200005e4

0800a8dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a8ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	371c      	adds	r7, #28
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
	...

0800a900 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b08a      	sub	sp, #40	; 0x28
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a908:	f107 0314 	add.w	r3, r7, #20
 800a90c:	2200      	movs	r2, #0
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	605a      	str	r2, [r3, #4]
 800a912:	609a      	str	r2, [r3, #8]
 800a914:	60da      	str	r2, [r3, #12]
 800a916:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a920:	d147      	bne.n	800a9b2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a922:	2300      	movs	r3, #0
 800a924:	613b      	str	r3, [r7, #16]
 800a926:	4b25      	ldr	r3, [pc, #148]	; (800a9bc <HAL_PCD_MspInit+0xbc>)
 800a928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92a:	4a24      	ldr	r2, [pc, #144]	; (800a9bc <HAL_PCD_MspInit+0xbc>)
 800a92c:	f043 0301 	orr.w	r3, r3, #1
 800a930:	6313      	str	r3, [r2, #48]	; 0x30
 800a932:	4b22      	ldr	r3, [pc, #136]	; (800a9bc <HAL_PCD_MspInit+0xbc>)
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	613b      	str	r3, [r7, #16]
 800a93c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a93e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a944:	2300      	movs	r3, #0
 800a946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a948:	2300      	movs	r3, #0
 800a94a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a94c:	f107 0314 	add.w	r3, r7, #20
 800a950:	4619      	mov	r1, r3
 800a952:	481b      	ldr	r0, [pc, #108]	; (800a9c0 <HAL_PCD_MspInit+0xc0>)
 800a954:	f7f6 fb04 	bl	8000f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a958:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a95c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a95e:	2302      	movs	r3, #2
 800a960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a962:	2300      	movs	r3, #0
 800a964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a966:	2303      	movs	r3, #3
 800a968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a96a:	230a      	movs	r3, #10
 800a96c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a96e:	f107 0314 	add.w	r3, r7, #20
 800a972:	4619      	mov	r1, r3
 800a974:	4812      	ldr	r0, [pc, #72]	; (800a9c0 <HAL_PCD_MspInit+0xc0>)
 800a976:	f7f6 faf3 	bl	8000f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a97a:	4b10      	ldr	r3, [pc, #64]	; (800a9bc <HAL_PCD_MspInit+0xbc>)
 800a97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97e:	4a0f      	ldr	r2, [pc, #60]	; (800a9bc <HAL_PCD_MspInit+0xbc>)
 800a980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a984:	6353      	str	r3, [r2, #52]	; 0x34
 800a986:	2300      	movs	r3, #0
 800a988:	60fb      	str	r3, [r7, #12]
 800a98a:	4b0c      	ldr	r3, [pc, #48]	; (800a9bc <HAL_PCD_MspInit+0xbc>)
 800a98c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a98e:	4a0b      	ldr	r2, [pc, #44]	; (800a9bc <HAL_PCD_MspInit+0xbc>)
 800a990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a994:	6453      	str	r3, [r2, #68]	; 0x44
 800a996:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <HAL_PCD_MspInit+0xbc>)
 800a998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a99a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	2043      	movs	r0, #67	; 0x43
 800a9a8:	f7f5 ff89 	bl	80008be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9ac:	2043      	movs	r0, #67	; 0x43
 800a9ae:	f7f5 ffa2 	bl	80008f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9b2:	bf00      	nop
 800a9b4:	3728      	adds	r7, #40	; 0x28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	40023800 	.word	0x40023800
 800a9c0:	40020000 	.word	0x40020000

0800a9c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4610      	mov	r0, r2
 800a9dc:	f7fe f958 	bl	8008c90 <USBD_LL_SetupStage>
}
 800a9e0:	bf00      	nop
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a9fa:	78fa      	ldrb	r2, [r7, #3]
 800a9fc:	6879      	ldr	r1, [r7, #4]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	1a9b      	subs	r3, r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	440b      	add	r3, r1
 800aa08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	4619      	mov	r1, r3
 800aa12:	f7fe f992 	bl	8008d3a <USBD_LL_DataOutStage>
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800aa30:	78fa      	ldrb	r2, [r7, #3]
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	4613      	mov	r3, r2
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	1a9b      	subs	r3, r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	440b      	add	r3, r1
 800aa3e:	3348      	adds	r3, #72	; 0x48
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	4619      	mov	r1, r3
 800aa46:	f7fe f9db 	bl	8008e00 <USBD_LL_DataInStage>
}
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b082      	sub	sp, #8
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fe faef 	bl	8009044 <USBD_LL_SOF>
}
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b084      	sub	sp, #16
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa76:	2301      	movs	r3, #1
 800aa78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d001      	beq.n	800aa86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa82:	f7ff fc35 	bl	800a2f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa8c:	7bfa      	ldrb	r2, [r7, #15]
 800aa8e:	4611      	mov	r1, r2
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fe fa99 	bl	8008fc8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fe fa45 	bl	8008f2c <USBD_LL_Reset>
}
 800aaa2:	bf00      	nop
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fe fa94 	bl	8008fe8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	6812      	ldr	r2, [r2, #0]
 800aace:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aad2:	f043 0301 	orr.w	r3, r3, #1
 800aad6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d005      	beq.n	800aaec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aae0:	4b04      	ldr	r3, [pc, #16]	; (800aaf4 <HAL_PCD_SuspendCallback+0x48>)
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	4a03      	ldr	r2, [pc, #12]	; (800aaf4 <HAL_PCD_SuspendCallback+0x48>)
 800aae6:	f043 0306 	orr.w	r3, r3, #6
 800aaea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aaec:	bf00      	nop
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	e000ed00 	.word	0xe000ed00

0800aaf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fe fa84 	bl	8009014 <USBD_LL_Resume>
}
 800ab0c:	bf00      	nop
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab26:	78fa      	ldrb	r2, [r7, #3]
 800ab28:	4611      	mov	r1, r2
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe fad2 	bl	80090d4 <USBD_LL_IsoOUTIncomplete>
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	460b      	mov	r3, r1
 800ab42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab4a:	78fa      	ldrb	r2, [r7, #3]
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe fa9a 	bl	8009088 <USBD_LL_IsoINIncomplete>
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe fad8 	bl	8009120 <USBD_LL_DevConnected>
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe fad5 	bl	8009136 <USBD_LL_DevDisconnected>
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d13c      	bne.n	800ac1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aba4:	4a20      	ldr	r2, [pc, #128]	; (800ac28 <USBD_LL_Init+0x94>)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a1e      	ldr	r2, [pc, #120]	; (800ac28 <USBD_LL_Init+0x94>)
 800abb0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abb4:	4b1c      	ldr	r3, [pc, #112]	; (800ac28 <USBD_LL_Init+0x94>)
 800abb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800abba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800abbc:	4b1a      	ldr	r3, [pc, #104]	; (800ac28 <USBD_LL_Init+0x94>)
 800abbe:	2204      	movs	r2, #4
 800abc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800abc2:	4b19      	ldr	r3, [pc, #100]	; (800ac28 <USBD_LL_Init+0x94>)
 800abc4:	2202      	movs	r2, #2
 800abc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abc8:	4b17      	ldr	r3, [pc, #92]	; (800ac28 <USBD_LL_Init+0x94>)
 800abca:	2200      	movs	r2, #0
 800abcc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800abce:	4b16      	ldr	r3, [pc, #88]	; (800ac28 <USBD_LL_Init+0x94>)
 800abd0:	2202      	movs	r2, #2
 800abd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800abd4:	4b14      	ldr	r3, [pc, #80]	; (800ac28 <USBD_LL_Init+0x94>)
 800abd6:	2200      	movs	r2, #0
 800abd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800abda:	4b13      	ldr	r3, [pc, #76]	; (800ac28 <USBD_LL_Init+0x94>)
 800abdc:	2200      	movs	r2, #0
 800abde:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800abe0:	4b11      	ldr	r3, [pc, #68]	; (800ac28 <USBD_LL_Init+0x94>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800abe6:	4b10      	ldr	r3, [pc, #64]	; (800ac28 <USBD_LL_Init+0x94>)
 800abe8:	2201      	movs	r2, #1
 800abea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800abec:	4b0e      	ldr	r3, [pc, #56]	; (800ac28 <USBD_LL_Init+0x94>)
 800abee:	2200      	movs	r2, #0
 800abf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800abf2:	480d      	ldr	r0, [pc, #52]	; (800ac28 <USBD_LL_Init+0x94>)
 800abf4:	f7f8 fd16 	bl	8003624 <HAL_PCD_Init>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d001      	beq.n	800ac02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800abfe:	f7ff fb77 	bl	800a2f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ac02:	2180      	movs	r1, #128	; 0x80
 800ac04:	4808      	ldr	r0, [pc, #32]	; (800ac28 <USBD_LL_Init+0x94>)
 800ac06:	f7f9 fe74 	bl	80048f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac0a:	2240      	movs	r2, #64	; 0x40
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	4806      	ldr	r0, [pc, #24]	; (800ac28 <USBD_LL_Init+0x94>)
 800ac10:	f7f9 fe28 	bl	8004864 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac14:	2280      	movs	r2, #128	; 0x80
 800ac16:	2101      	movs	r1, #1
 800ac18:	4803      	ldr	r0, [pc, #12]	; (800ac28 <USBD_LL_Init+0x94>)
 800ac1a:	f7f9 fe23 	bl	8004864 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	200018b4 	.word	0x200018b4

0800ac2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac34:	2300      	movs	r3, #0
 800ac36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7f8 fe0b 	bl	800385e <HAL_PCD_Start>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac4c:	7bfb      	ldrb	r3, [r7, #15]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 f942 	bl	800aed8 <USBD_Get_USB_Status>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b084      	sub	sp, #16
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	4608      	mov	r0, r1
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	461a      	mov	r2, r3
 800ac70:	4603      	mov	r3, r0
 800ac72:	70fb      	strb	r3, [r7, #3]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70bb      	strb	r3, [r7, #2]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ac8a:	78bb      	ldrb	r3, [r7, #2]
 800ac8c:	883a      	ldrh	r2, [r7, #0]
 800ac8e:	78f9      	ldrb	r1, [r7, #3]
 800ac90:	f7f9 f9ef 	bl	8004072 <HAL_PCD_EP_Open>
 800ac94:	4603      	mov	r3, r0
 800ac96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac98:	7bfb      	ldrb	r3, [r7, #15]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 f91c 	bl	800aed8 <USBD_Get_USB_Status>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b084      	sub	sp, #16
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	460b      	mov	r3, r1
 800acb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800acc8:	78fa      	ldrb	r2, [r7, #3]
 800acca:	4611      	mov	r1, r2
 800accc:	4618      	mov	r0, r3
 800acce:	f7f9 fa38 	bl	8004142 <HAL_PCD_EP_Close>
 800acd2:	4603      	mov	r3, r0
 800acd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 f8fd 	bl	800aed8 <USBD_Get_USB_Status>
 800acde:	4603      	mov	r3, r0
 800ace0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ace2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acfc:	2300      	movs	r3, #0
 800acfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad06:	78fa      	ldrb	r2, [r7, #3]
 800ad08:	4611      	mov	r1, r2
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7f9 fb10 	bl	8004330 <HAL_PCD_EP_SetStall>
 800ad10:	4603      	mov	r3, r0
 800ad12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 f8de 	bl	800aed8 <USBD_Get_USB_Status>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	460b      	mov	r3, r1
 800ad34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad36:	2300      	movs	r3, #0
 800ad38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad44:	78fa      	ldrb	r2, [r7, #3]
 800ad46:	4611      	mov	r1, r2
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7f9 fb55 	bl	80043f8 <HAL_PCD_EP_ClrStall>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 f8bf 	bl	800aed8 <USBD_Get_USB_Status>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	460b      	mov	r3, r1
 800ad72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	da0b      	bge.n	800ad9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad84:	78fb      	ldrb	r3, [r7, #3]
 800ad86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad8a:	68f9      	ldr	r1, [r7, #12]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	1a9b      	subs	r3, r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	440b      	add	r3, r1
 800ad96:	333e      	adds	r3, #62	; 0x3e
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	e00b      	b.n	800adb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad9c:	78fb      	ldrb	r3, [r7, #3]
 800ad9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ada2:	68f9      	ldr	r1, [r7, #12]
 800ada4:	4613      	mov	r3, r2
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	1a9b      	subs	r3, r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	440b      	add	r3, r1
 800adae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800adb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	460b      	mov	r3, r1
 800adca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800add0:	2300      	movs	r3, #0
 800add2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800adda:	78fa      	ldrb	r2, [r7, #3]
 800addc:	4611      	mov	r1, r2
 800adde:	4618      	mov	r0, r3
 800ade0:	f7f9 f922 	bl	8004028 <HAL_PCD_SetAddress>
 800ade4:	4603      	mov	r3, r0
 800ade6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	4618      	mov	r0, r3
 800adec:	f000 f874 	bl	800aed8 <USBD_Get_USB_Status>
 800adf0:	4603      	mov	r3, r0
 800adf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b086      	sub	sp, #24
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	60f8      	str	r0, [r7, #12]
 800ae06:	607a      	str	r2, [r7, #4]
 800ae08:	603b      	str	r3, [r7, #0]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae1c:	7af9      	ldrb	r1, [r7, #11]
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	f7f9 fa3b 	bl	800429c <HAL_PCD_EP_Transmit>
 800ae26:	4603      	mov	r3, r0
 800ae28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 f853 	bl	800aed8 <USBD_Get_USB_Status>
 800ae32:	4603      	mov	r3, r0
 800ae34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae36:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	607a      	str	r2, [r7, #4]
 800ae4a:	603b      	str	r3, [r7, #0]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae54:	2300      	movs	r3, #0
 800ae56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ae5e:	7af9      	ldrb	r1, [r7, #11]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	f7f9 f9b7 	bl	80041d6 <HAL_PCD_EP_Receive>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 f832 	bl	800aed8 <USBD_Get_USB_Status>
 800ae74:	4603      	mov	r3, r0
 800ae76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae78:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3718      	adds	r7, #24
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b082      	sub	sp, #8
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae94:	78fa      	ldrb	r2, [r7, #3]
 800ae96:	4611      	mov	r1, r2
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7f9 f9e7 	bl	800426c <HAL_PCD_EP_GetRxCount>
 800ae9e:	4603      	mov	r3, r0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aeb0:	4b03      	ldr	r3, [pc, #12]	; (800aec0 <USBD_static_malloc+0x18>)
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	200001a0 	.word	0x200001a0

0800aec4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]

}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	4603      	mov	r3, r0
 800aee0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aee2:	2300      	movs	r3, #0
 800aee4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aee6:	79fb      	ldrb	r3, [r7, #7]
 800aee8:	2b03      	cmp	r3, #3
 800aeea:	d817      	bhi.n	800af1c <USBD_Get_USB_Status+0x44>
 800aeec:	a201      	add	r2, pc, #4	; (adr r2, 800aef4 <USBD_Get_USB_Status+0x1c>)
 800aeee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef2:	bf00      	nop
 800aef4:	0800af05 	.word	0x0800af05
 800aef8:	0800af0b 	.word	0x0800af0b
 800aefc:	0800af11 	.word	0x0800af11
 800af00:	0800af17 	.word	0x0800af17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	73fb      	strb	r3, [r7, #15]
    break;
 800af08:	e00b      	b.n	800af22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af0a:	2303      	movs	r3, #3
 800af0c:	73fb      	strb	r3, [r7, #15]
    break;
 800af0e:	e008      	b.n	800af22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af10:	2301      	movs	r3, #1
 800af12:	73fb      	strb	r3, [r7, #15]
    break;
 800af14:	e005      	b.n	800af22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af16:	2303      	movs	r3, #3
 800af18:	73fb      	strb	r3, [r7, #15]
    break;
 800af1a:	e002      	b.n	800af22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af1c:	2303      	movs	r3, #3
 800af1e:	73fb      	strb	r3, [r7, #15]
    break;
 800af20:	bf00      	nop
  }
  return usb_status;
 800af22:	7bfb      	ldrb	r3, [r7, #15]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	4603      	mov	r3, r0
 800af38:	6039      	str	r1, [r7, #0]
 800af3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2212      	movs	r2, #18
 800af40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800af42:	4b03      	ldr	r3, [pc, #12]	; (800af50 <USBD_FS_DeviceDescriptor+0x20>)
}
 800af44:	4618      	mov	r0, r3
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	2000014c 	.word	0x2000014c

0800af54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	4603      	mov	r3, r0
 800af5c:	6039      	str	r1, [r7, #0]
 800af5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2204      	movs	r2, #4
 800af64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af66:	4b03      	ldr	r3, [pc, #12]	; (800af74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800af68:	4618      	mov	r0, r3
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr
 800af74:	20000160 	.word	0x20000160

0800af78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	6039      	str	r1, [r7, #0]
 800af82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af84:	79fb      	ldrb	r3, [r7, #7]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d105      	bne.n	800af96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	4907      	ldr	r1, [pc, #28]	; (800afac <USBD_FS_ProductStrDescriptor+0x34>)
 800af8e:	4808      	ldr	r0, [pc, #32]	; (800afb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800af90:	f7fe fe65 	bl	8009c5e <USBD_GetString>
 800af94:	e004      	b.n	800afa0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	4904      	ldr	r1, [pc, #16]	; (800afac <USBD_FS_ProductStrDescriptor+0x34>)
 800af9a:	4805      	ldr	r0, [pc, #20]	; (800afb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800af9c:	f7fe fe5f 	bl	8009c5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800afa0:	4b02      	ldr	r3, [pc, #8]	; (800afac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	20001cbc 	.word	0x20001cbc
 800afb0:	0800b214 	.word	0x0800b214

0800afb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	4603      	mov	r3, r0
 800afbc:	6039      	str	r1, [r7, #0]
 800afbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	4904      	ldr	r1, [pc, #16]	; (800afd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800afc4:	4804      	ldr	r0, [pc, #16]	; (800afd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800afc6:	f7fe fe4a 	bl	8009c5e <USBD_GetString>
  return USBD_StrDesc;
 800afca:	4b02      	ldr	r3, [pc, #8]	; (800afd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	20001cbc 	.word	0x20001cbc
 800afd8:	0800b22c 	.word	0x0800b22c

0800afdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	6039      	str	r1, [r7, #0]
 800afe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	221a      	movs	r2, #26
 800afec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800afee:	f000 f843 	bl	800b078 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aff2:	4b02      	ldr	r3, [pc, #8]	; (800affc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000164 	.word	0x20000164

0800b000 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	6039      	str	r1, [r7, #0]
 800b00a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b00c:	79fb      	ldrb	r3, [r7, #7]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d105      	bne.n	800b01e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	4907      	ldr	r1, [pc, #28]	; (800b034 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b016:	4808      	ldr	r0, [pc, #32]	; (800b038 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b018:	f7fe fe21 	bl	8009c5e <USBD_GetString>
 800b01c:	e004      	b.n	800b028 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	4904      	ldr	r1, [pc, #16]	; (800b034 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b022:	4805      	ldr	r0, [pc, #20]	; (800b038 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b024:	f7fe fe1b 	bl	8009c5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b028:	4b02      	ldr	r3, [pc, #8]	; (800b034 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	20001cbc 	.word	0x20001cbc
 800b038:	0800b240 	.word	0x0800b240

0800b03c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	4603      	mov	r3, r0
 800b044:	6039      	str	r1, [r7, #0]
 800b046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b048:	79fb      	ldrb	r3, [r7, #7]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d105      	bne.n	800b05a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	4907      	ldr	r1, [pc, #28]	; (800b070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b052:	4808      	ldr	r0, [pc, #32]	; (800b074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b054:	f7fe fe03 	bl	8009c5e <USBD_GetString>
 800b058:	e004      	b.n	800b064 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	4904      	ldr	r1, [pc, #16]	; (800b070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b05e:	4805      	ldr	r0, [pc, #20]	; (800b074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b060:	f7fe fdfd 	bl	8009c5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b064:	4b02      	ldr	r3, [pc, #8]	; (800b070 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	20001cbc 	.word	0x20001cbc
 800b074:	0800b24c 	.word	0x0800b24c

0800b078 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b07e:	4b0f      	ldr	r3, [pc, #60]	; (800b0bc <Get_SerialNum+0x44>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b084:	4b0e      	ldr	r3, [pc, #56]	; (800b0c0 <Get_SerialNum+0x48>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b08a:	4b0e      	ldr	r3, [pc, #56]	; (800b0c4 <Get_SerialNum+0x4c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4413      	add	r3, r2
 800b096:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d009      	beq.n	800b0b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b09e:	2208      	movs	r2, #8
 800b0a0:	4909      	ldr	r1, [pc, #36]	; (800b0c8 <Get_SerialNum+0x50>)
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 f814 	bl	800b0d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b0a8:	2204      	movs	r2, #4
 800b0aa:	4908      	ldr	r1, [pc, #32]	; (800b0cc <Get_SerialNum+0x54>)
 800b0ac:	68b8      	ldr	r0, [r7, #8]
 800b0ae:	f000 f80f 	bl	800b0d0 <IntToUnicode>
  }
}
 800b0b2:	bf00      	nop
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	1fff7a10 	.word	0x1fff7a10
 800b0c0:	1fff7a14 	.word	0x1fff7a14
 800b0c4:	1fff7a18 	.word	0x1fff7a18
 800b0c8:	20000166 	.word	0x20000166
 800b0cc:	20000176 	.word	0x20000176

0800b0d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b087      	sub	sp, #28
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	75fb      	strb	r3, [r7, #23]
 800b0e6:	e027      	b.n	800b138 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	0f1b      	lsrs	r3, r3, #28
 800b0ec:	2b09      	cmp	r3, #9
 800b0ee:	d80b      	bhi.n	800b108 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	0f1b      	lsrs	r3, r3, #28
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
 800b0f8:	005b      	lsls	r3, r3, #1
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	440b      	add	r3, r1
 800b100:	3230      	adds	r2, #48	; 0x30
 800b102:	b2d2      	uxtb	r2, r2
 800b104:	701a      	strb	r2, [r3, #0]
 800b106:	e00a      	b.n	800b11e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	0f1b      	lsrs	r3, r3, #28
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	7dfb      	ldrb	r3, [r7, #23]
 800b110:	005b      	lsls	r3, r3, #1
 800b112:	4619      	mov	r1, r3
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	440b      	add	r3, r1
 800b118:	3237      	adds	r2, #55	; 0x37
 800b11a:	b2d2      	uxtb	r2, r2
 800b11c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	011b      	lsls	r3, r3, #4
 800b122:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b124:	7dfb      	ldrb	r3, [r7, #23]
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	3301      	adds	r3, #1
 800b12a:	68ba      	ldr	r2, [r7, #8]
 800b12c:	4413      	add	r3, r2
 800b12e:	2200      	movs	r2, #0
 800b130:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b132:	7dfb      	ldrb	r3, [r7, #23]
 800b134:	3301      	adds	r3, #1
 800b136:	75fb      	strb	r3, [r7, #23]
 800b138:	7dfa      	ldrb	r2, [r7, #23]
 800b13a:	79fb      	ldrb	r3, [r7, #7]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d3d3      	bcc.n	800b0e8 <IntToUnicode+0x18>
  }
}
 800b140:	bf00      	nop
 800b142:	bf00      	nop
 800b144:	371c      	adds	r7, #28
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
	...

0800b150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b150:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b154:	480d      	ldr	r0, [pc, #52]	; (800b18c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b156:	490e      	ldr	r1, [pc, #56]	; (800b190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b158:	4a0e      	ldr	r2, [pc, #56]	; (800b194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b15a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b15c:	e002      	b.n	800b164 <LoopCopyDataInit>

0800b15e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b15e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b162:	3304      	adds	r3, #4

0800b164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b168:	d3f9      	bcc.n	800b15e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b16a:	4a0b      	ldr	r2, [pc, #44]	; (800b198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b16c:	4c0b      	ldr	r4, [pc, #44]	; (800b19c <LoopFillZerobss+0x26>)
  movs r3, #0
 800b16e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b170:	e001      	b.n	800b176 <LoopFillZerobss>

0800b172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b174:	3204      	adds	r2, #4

0800b176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b178:	d3fb      	bcc.n	800b172 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b17a:	f7ff fadf 	bl	800a73c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b17e:	f000 f811 	bl	800b1a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b182:	f7fe fe4d 	bl	8009e20 <main>
  bx  lr    
 800b186:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b18c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b190:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800b194:	0800b28c 	.word	0x0800b28c
  ldr r2, =_sbss
 800b198:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800b19c:	20001ebc 	.word	0x20001ebc

0800b1a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b1a0:	e7fe      	b.n	800b1a0 <ADC_IRQHandler>
	...

0800b1a4 <__libc_init_array>:
 800b1a4:	b570      	push	{r4, r5, r6, lr}
 800b1a6:	4d0d      	ldr	r5, [pc, #52]	; (800b1dc <__libc_init_array+0x38>)
 800b1a8:	4c0d      	ldr	r4, [pc, #52]	; (800b1e0 <__libc_init_array+0x3c>)
 800b1aa:	1b64      	subs	r4, r4, r5
 800b1ac:	10a4      	asrs	r4, r4, #2
 800b1ae:	2600      	movs	r6, #0
 800b1b0:	42a6      	cmp	r6, r4
 800b1b2:	d109      	bne.n	800b1c8 <__libc_init_array+0x24>
 800b1b4:	4d0b      	ldr	r5, [pc, #44]	; (800b1e4 <__libc_init_array+0x40>)
 800b1b6:	4c0c      	ldr	r4, [pc, #48]	; (800b1e8 <__libc_init_array+0x44>)
 800b1b8:	f000 f820 	bl	800b1fc <_init>
 800b1bc:	1b64      	subs	r4, r4, r5
 800b1be:	10a4      	asrs	r4, r4, #2
 800b1c0:	2600      	movs	r6, #0
 800b1c2:	42a6      	cmp	r6, r4
 800b1c4:	d105      	bne.n	800b1d2 <__libc_init_array+0x2e>
 800b1c6:	bd70      	pop	{r4, r5, r6, pc}
 800b1c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1cc:	4798      	blx	r3
 800b1ce:	3601      	adds	r6, #1
 800b1d0:	e7ee      	b.n	800b1b0 <__libc_init_array+0xc>
 800b1d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1d6:	4798      	blx	r3
 800b1d8:	3601      	adds	r6, #1
 800b1da:	e7f2      	b.n	800b1c2 <__libc_init_array+0x1e>
 800b1dc:	0800b284 	.word	0x0800b284
 800b1e0:	0800b284 	.word	0x0800b284
 800b1e4:	0800b284 	.word	0x0800b284
 800b1e8:	0800b288 	.word	0x0800b288

0800b1ec <memset>:
 800b1ec:	4402      	add	r2, r0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d100      	bne.n	800b1f6 <memset+0xa>
 800b1f4:	4770      	bx	lr
 800b1f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1fa:	e7f9      	b.n	800b1f0 <memset+0x4>

0800b1fc <_init>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	bf00      	nop
 800b200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b202:	bc08      	pop	{r3}
 800b204:	469e      	mov	lr, r3
 800b206:	4770      	bx	lr

0800b208 <_fini>:
 800b208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20a:	bf00      	nop
 800b20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b20e:	bc08      	pop	{r3}
 800b210:	469e      	mov	lr, r3
 800b212:	4770      	bx	lr
